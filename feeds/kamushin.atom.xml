<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kamushin's blog</title><link href="/" rel="alternate"></link><link href="/feeds/kamushin.atom.xml" rel="self"></link><id>/</id><updated>2017-03-02T18:02:57+08:00</updated><entry><title>Python subprocess 线程不安全的解决方案</title><link href="/debug/python-subprocess32.html" rel="alternate"></link><updated>2017-03-02T18:02:57+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-03-02:debug/python-subprocess32.html</id><summary type="html">&lt;p&gt;Python subprocess 不是线程安全的. 虽然文档上没有说明subprocess 是线程安全的, 我们应该把它看做线程不安全来使用. 但是在实际使用中, 我们并不知道 subprocess 的具体哪个方法
是线程不安全的, 于是很难对它加锁, 在这里我认为 subprocess 没有设计成线程安全这件事, 是 Python2.7的一个缺陷.&lt;br /&gt;
所幸依然有三个方法来解决这个问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;升级至 Python3.2  &lt;/li&gt;
&lt;li&gt;使用多进程替代多线程  &lt;/li&gt;
&lt;li&gt;在 Python2.7 下使用 subprocess32 包&lt;/li&gt;
&lt;/ol&gt;</summary><category term="python"></category></entry><entry><title>从一次失效的文件锁看看 Python 的垃圾回收机制</title><link href="/debug/python-gc.html" rel="alternate"></link><updated>2017-02-17T17:54:39+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-02-17:debug/python-gc.html</id><summary type="html">&lt;h3&gt;引&lt;/h3&gt;
&lt;p&gt;有同事发现 Python 在函数中进行文件锁, 退出函数后, 文件锁就失效了. 我简单想下, 应该是函数中锁文件后, 退出函数, 文件句柄变量被 GC, 导致文件锁也失效了.&lt;br /&gt;
写了段代码验证这个情况.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fcntl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/locktest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCK_EX&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCK_NB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;twoLines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/locktest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCK_EX&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;fcntl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LOCK_NB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;


&lt;span class="n"&gt;lockFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt; &lt;span class="c"&gt;# will print No error&lt;/span&gt;
&lt;span class="c"&gt;# lockFile = twoLines  # will print blocking &lt;/span&gt;
&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lockFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lockFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;can&amp;#39;t immediately write-lock the file ($!), blocking ...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Python 中实现的 GC&lt;/h3&gt;
&lt;h4&gt;引用计数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;最早期的垃圾回收实现方法，通过对数据存储的物理空间附加多一个计数器空间，当有其他数据与其相关时则加一，反之相关解除时减一，定期检查各储存对象的计数器，为零的话则认为已经被抛弃而将其所占物理空间回收。是最简单的实现，但存在无法回收循环引用的存储对象的缺陷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// object.h
struct _object {
    Py_ssize_t ob_refcnt;
    struct PyTypeObject *ob_type;
} PyObject;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Python 源码中, 类的结构体都具有一个&lt;code&gt;ob_refcnt&lt;/code&gt;的部分, 用来做引用计数.&lt;/p&gt;
&lt;p&gt;引用计数的优点是高效,不需要停顿,易于实现, 缺点是无法解决循环引用, 计数次数和引用赋值成正比, 而 mark and sweep则只和对象数量成正比.&lt;/p&gt;
&lt;h4&gt;标记清除&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;近现代的垃圾回收实现方法，通过定期对若干根储存对象开始遍历，对整个程序所拥有的储存空间查找与之相关的存储对象和没相关的存储对象进行标记，然后将没相关的存储对象所占物理空间回收。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// objimpl.h
typedef union _gc_head {
    struct {
        union _gc_head *gc_next;
        union _gc_head *gc_prev;
        Py_ssize_t gc_refs;
    } gc;
    long double dummy;  /* force worst-case alignment */
} PyGC_Head;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在申请内存时，所有容器对象的头部又加上了&lt;code&gt;PyGC_Head&lt;/code&gt;来实现"标记-清除"机制.垃圾标记时，先将集合中对象的引用计数复制一份副本(以免在操作过程中破坏真实的引用计数值), 然后操作这个副本，遍历对象集合，将被引用对象的引用计数副本值减1, 
然后根据引用计数副本值是否为0将集合内的对象分成两类，reachable和unreachable，其中unreachable是可以被回收的对象. 这是一个比较基础的标记清除的过程.&lt;/p&gt;
&lt;h4&gt;分代回收&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;由于“复制”算法对于存活时间长，大容量的储存对象需要耗费更多的移动时间，和存在储存对象的存活时间的差异。需要程序将所拥有的内存空间分成若干分区，并标记为年轻代空间和年老代空间。程序运行所需的存储对象会先存放在年轻代分区，年轻代分区会较为频密进行较为激进垃圾回收行为，每次回收完成幸存的存储对象内的寿命计数器加一。当年轻代分区存储对象的寿命计数器达到一定阈值或存储对象的占用空间超过一定阈值时，则被移动到年老代空间，年老代空间会较少运行垃圾回收行为。一般情况下，还有永久代的空间，用于涉及程序整个运行生命周期的对象存储，例如运行代码、数据常量等，该空间通常不进行垃圾回收的操作。
通过分代，存活在局限域，小容量，寿命短的存储对象会被快速回收；存活在全局域，大容量，寿命长的存储对象就较少被回收行为处理干扰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;// gcmodule.c
struct gc_generation {
    PyGC_Head head;
    int threshold; /* collection threshold */
    int count; /* count of allocations or collections of younger
              generations */
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python默认定义了三代对象集合，索引数越大，对象存活时间越长。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;#define NUM_GENERATIONS 3&lt;/span&gt;
&lt;span class="x"&gt;#define GEN_HEAD(n) (&amp;amp;generations[n].head)&lt;/span&gt;

&lt;span class="x"&gt;/* linked lists of container objects */&lt;/span&gt;
&lt;span class="x"&gt;static struct gc_generation generations[NUM_GENERATIONS] = {&lt;/span&gt;
&lt;span class="x"&gt;    /* PyGC_Head,               threshold,  count */&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,   700,        0},&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,   10,     0},&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;GEN_HEAD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;,   10,     0},&lt;/span&gt;
&lt;span class="x"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新生成的对象会被加入第0代, 每新生成一个对象都会检查第0代有没有满，如果满了就开始着手进行垃圾回收.&lt;/p&gt;
&lt;h3&gt;flock的失效&lt;/h3&gt;
&lt;p&gt;上面简单复习了下 Python 的 GC 机制. 可以知道因为没有其他对象持有文件句柄的引用, 所以在离开函数作用域后就被回收, 那么持有的文件锁也就被释放了.&lt;/p&gt;</summary><category term="python gc"></category></entry><entry><title>KernelRestarter: restart failed in Jupyter</title><link href="/debug/jupyter-docker.html" rel="alternate"></link><updated>2017-02-03T17:43:26+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-02-03:debug/jupyter-docker.html</id><summary type="html">&lt;p&gt;If run &lt;code&gt;jupyter notebook&lt;/code&gt; as Docker entrypoint, then &lt;code&gt;jupyter&lt;/code&gt; will be the root process with pid 1.&lt;br /&gt;
For some reason, this doesn't play well with IPython, and the Kernel won't be started successfully.&lt;br /&gt;
Errors may occur like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[I 08:49:49.637 NotebookApp] KernelRestarter: restarting kernel (1/5)
[D 08:49:49.638 NotebookApp] Starting kernel: [&amp;#39;/usr/bin/python&amp;#39;, &amp;#39;-m&amp;#39;, &amp;#39;ipykernel&amp;#39;, &amp;#39;-f&amp;#39;, u&amp;#39;/root/.local/share/jupyter/runtime/kernel-5a23f4ca-734b-422f-9c1c-e0ad126f6552.json&amp;#39;]
[D 08:49:49.643 NotebookApp] Connecting to: tcp://127.0.0.1:54341
[I 08:49:52.646 NotebookApp] KernelRestarter: restarting kernel (2/5)
[D 08:49:52.647 NotebookApp] Starting kernel: [&amp;#39;/usr/bin/python&amp;#39;, &amp;#39;-m&amp;#39;, &amp;#39;ipykernel&amp;#39;, &amp;#39;-f&amp;#39;, u&amp;#39;/root/.local/share/jupyter/runtime/kernel-5a23f4ca-734b-422f-9c1c-e0ad126f6552.json&amp;#39;]
[D 08:49:52.652 NotebookApp] Connecting to: tcp://127.0.0.1:54341
[I 08:49:55.655 NotebookApp] KernelRestarter: restarting kernel (3/5)
[D 08:49:55.656 NotebookApp] Starting kernel: [&amp;#39;/usr/bin/python&amp;#39;, &amp;#39;-m&amp;#39;, &amp;#39;ipykernel&amp;#39;, &amp;#39;-f&amp;#39;, u&amp;#39;/root/.local/share/jupyter/runtime/kernel-5a23f4ca-734b-422f-9c1c-e0ad126f6552.json&amp;#39;]
[D 08:49:55.662 NotebookApp] Connecting to: tcp://127.0.0.1:54341
[W 08:49:56.713 NotebookApp] Timeout waiting for kernel_info reply from 5a23f4ca-734b-422f-9c1c-e0ad126f6552
[D 08:49:56.715 NotebookApp] Opening websocket /api/kernels/5a23f4ca-734b-422f-9c1c-e0ad126f6552/channels
[D 08:49:56.715 NotebookApp] Connecting to: tcp://127.0.0.1:42528
[D 08:49:56.715 NotebookApp] Connecting to: tcp://127.0.0.1:58272
[D 08:49:56.716 NotebookApp] Connecting to: tcp://127.0.0.1:52503
[I 08:49:58.664 NotebookApp] KernelRestarter: restarting kernel (4/5)
WARNING:root:kernel 5a23f4ca-734b-422f-9c1c-e0ad126f6552 restarted
[D 08:49:58.665 NotebookApp] Starting kernel: [&amp;#39;/usr/bin/python&amp;#39;, &amp;#39;-m&amp;#39;, &amp;#39;ipykernel&amp;#39;, &amp;#39;-f&amp;#39;, u&amp;#39;/root/.local/share/jupyter/runtime/kernel-5a23f4ca-734b-422f-9c1c-e0ad126f6552.json&amp;#39;]
[D 08:49:58.670 NotebookApp] Connecting to: tcp://127.0.0.1:54341
[W 08:50:01.672 NotebookApp] KernelRestarter: restart failed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I try to use &lt;code&gt;sh -c 'jupyter notebook'&lt;/code&gt; as the entrypoint, it maybe works for someone else, but for my specfic docker version, &lt;code&gt;jupyter&lt;/code&gt; still run as root process. &lt;br /&gt;
The final solution is using a &lt;code&gt;start.sh&lt;/code&gt; to wrapp &lt;code&gt;sh -c 'jupyter notebook'&lt;/code&gt;. That works for me.&lt;/p&gt;</summary><category term="Jupyter Docker"></category></entry><entry><title></title><link href="/tool/mem.html" rel="alternate"></link><updated>2017-01-16T15:42:57+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-01-16:tool/mem.html</id><summary type="html">&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
mem &lt;span class="o"&gt;(){&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;********************&amp;quot;&lt;/span&gt;
    date
    &lt;span class="nv"&gt;COLUMNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt; top -n1 -c -b &lt;span class="p"&gt;|&lt;/span&gt; head -n7 &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;1,6d&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;COLUMNS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9999&lt;/span&gt; top -n1 -c -b &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;1,6d&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep &lt;span class="p"&gt;|&lt;/span&gt; awk -F &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{ sum += $6 } END { printf &amp;quot;Total Memory Usage: %.1f MB\n&amp;quot;, sum/1024 }&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term=""></category></entry><entry><title></title><link href="/learning/docker_logs.html" rel="alternate"></link><updated>2017-01-11T11:10:52+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-01-11:learning/docker_logs.html</id><summary type="html">&lt;p&gt;docker compose 老容器日志&lt;/p&gt;</summary><category term=""></category></entry><entry><title>No space left on device</title><link href="/debug/No-space-left-on-device.html" rel="alternate"></link><updated>2017-01-05T13:40:12+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-01-05:debug/No-space-left-on-device.html</id><summary type="html">&lt;p&gt;今天当我试着在服务器上创建新文件的时候, 服务器给出了, "No space left on device" 的提示.&lt;br /&gt;
查看&lt;code&gt;df&lt;/code&gt;后, 发现空间还是挺充裕的, 自然怀疑到 inode 上来. inode 存储了 Linux 系统中的文件元信息, 比如权限, 修改日期等等.inode 的最大数量在分配磁盘的时候被设置好.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The inode is a data structure in a Unix-style file system which describes a filesystem object such as a file or a directory. Each inode stores the attributes and disk block location(s) of the object's data.[1] Filesystem object attributes may include metadata (times of last change,[2] access, modification), as well as owner and permission data.[3]])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然我没有遇到过 inode 被用光的情况, 但是我依然用 &lt;code&gt;df -i&lt;/code&gt; 查看了下, 果然看到 home 目录 inode 被用光了. &lt;br /&gt;
接下来我通过逐步探测的方式, 找出是哪个目录占用了大量的 inode  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for i in /home/*; do echo $i; sudo find $i |wc -l; done&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;for i in /home/docker/*; do echo $i;sudo find $i |wc -l; done&lt;/code&gt;    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后问题锁定在docker上. docker 的 overlays 占用大量 inode, 所以需要把 docker 放在一个 inode 最大值比较大的磁盘上.&lt;/p&gt;</summary><category term="debug"></category></entry><entry><title>2017做点啥</title><link href="/annual-summary/2017-todo.html" rel="alternate"></link><updated>2017-01-04T23:41:55+08:00</updated><author><name>Kamushin</name></author><id>tag:,2017-01-04:annual-summary/2017-todo.html</id><summary type="html">&lt;h3&gt;去旅游&lt;/h3&gt;
&lt;p&gt;今年清明会去趟悉尼, 国庆会去趟丽江. 今年的变化是, 我早在1月份就定好了这两次旅行的机票. 提早规划的好处是更廉价的机票, 更充足的攻略, 当然坏处也是有的就是时间上增加了不确定性.  &lt;/p&gt;
&lt;p&gt;当然今年应该不止这两次旅行, 年末应该也会计划一次, 会去一个东南亚国家学潜水.&lt;/p&gt;
&lt;h3&gt;读点书&lt;/h3&gt;
&lt;p&gt;去年也算是去图书馆比较多了, 虽然没看完多少书, 但是以月来说, 总不至于完全抛下书本. 今年想多看点美国近代小说, 从去年没看完的&amp;lt;&amp;lt;天使望故乡&amp;gt;&amp;gt;开始吧.&lt;/p&gt;
&lt;h3&gt;学拍照&lt;/h3&gt;
&lt;p&gt;多次在朋友圈被人吐槽小伙子图都不 p 就传上来了. 也算是蛮尴尬的一件事情, 学下拍照和 p 图, 至少让旅行的回忆更加美好吧.&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;p&gt;想了下, 可能工作之余能做到这几样已经不错了吧. 人生路漫漫, 还是不要定下太多目标了~2017年,希望一切平淡.&lt;/p&gt;</summary><category term="todo"></category></entry><entry><title>2016年度总结旅游篇</title><link href="/annual-summary/2016-trip.html" rel="alternate"></link><updated>2016-12-18T11:57:14+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-12-18:annual-summary/2016-trip.html</id><summary type="html">&lt;p&gt;去年只去了新西兰旅游,今年则是挖空心思的出去玩,看到了很多美景,也提升了自己旅游方面的一些能力.&lt;/p&gt;
&lt;h3&gt;南浔&lt;/h3&gt;
&lt;p&gt;南浔是个古镇. 和无锡一样是江南古镇, 所以光看我分享照片的基友, 都以为我回家了呢.&lt;/p&gt;
&lt;h3&gt;仙居&lt;/h3&gt;
&lt;p&gt;仙居真的很仙, 听说夏季有杨梅节, 不过我们去的时候是春季. 爬了那边的山, 山上可玩可爱的还挺多的.&lt;/p&gt;
&lt;h3&gt;岘港&lt;/h3&gt;
&lt;p&gt;和同事一起 outing, 这是一次海滩度假游. 我终于试着在海里游泳了,感觉很不错,因为是酒店包场的海滩,所以人很少.不过越南的物价并不便宜,我们呆的地方&lt;br /&gt;
估计都是来旅游的,所以物价蛮贵&lt;/p&gt;
&lt;h3&gt;东极岛&lt;/h3&gt;
&lt;p&gt;怀着对韩寒作品的朝圣心态来的, 但是这里的环境还是挺可怕的, 到处是海蟑螂, 怕虫子的话海边基本不敢去. 岛上很多黑心店家, 以后再去的话, 会选择自己带帐篷,带食物.&lt;/p&gt;
&lt;h3&gt;西北大环线&lt;/h3&gt;
&lt;p&gt;茶卡盐湖, 青海湖, 柴达木, 德令哈..好多神秘的名字, 西北之旅对我的视觉冲击是最大的, 作为一个几乎没离开过沿海沿湖的人, 第一次看到沙漠, 在沙漠中露营, 感受沙漠中的月色.&lt;/p&gt;
&lt;h3&gt;清迈&lt;/h3&gt;
&lt;p&gt;清迈是个小清新的城市, 飞机抵达后, 睡上一觉, 第二天起来喝杯冰饮料, 做个马杀鸡, 度过炎热的中午, 下午就逛逛它的街道, 买买水果, 非常悠哉.&lt;/p&gt;
&lt;h3&gt;收获&lt;/h3&gt;
&lt;p&gt;今年对我来说, 除了旅行时需要的技能增长, 也增长了使用信用卡的技能, 比如最后去清迈的旅游, 我的白金卡为我省下了2000多的花费. 也在同时积累酒店和飞行相关的知识.  &lt;/p&gt;
&lt;h3&gt;明年&lt;/h3&gt;
&lt;p&gt;今年可以做到无压力去支持英语的国家, 希望明年有个小突破, 去一个不说英语的国家.&lt;/p&gt;</summary><category term="annual-summary"></category></entry><entry><title>最近在做的事情</title><link href="/learning/nodejs.html" rel="alternate"></link><updated>2016-12-16T18:16:03+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-12-16:learning/nodejs.html</id><summary type="html">&lt;p&gt;最近几个月没有写博客, 一方面是觉得之前博客总是在分享单一的知识点,没能沉淀出什么精华,在反思该如何写博客. 另一方面是玩起了&lt;code&gt;nodejs&lt;/code&gt;后, 发现挺好玩的,也就一直花时间在代码上.  &lt;/p&gt;
&lt;p&gt;一开始先是读了tj 大神的&lt;code&gt;co&lt;/code&gt;库, 和 python 的实现对比后发现, 因为 node 自带事件驱动模型, 所以实现的非常简单.  之前写过两者的比较. 这个坑填了一半.得找时间填下.  &lt;/p&gt;
&lt;p&gt;后来就开始用&lt;code&gt;co&lt;/code&gt;做一个后台项目, 当然不是 web 项目, 本来也是可以用 python 做的, 但是这次想玩玩 node, 现在感觉还不错.  &lt;/p&gt;
&lt;p&gt;先记录下一些我觉得还不错的库吧, 其他高深的暂时也没 get 到.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dockernode-promise https://github.com/kamushin/dockerode-promise-es6 这个库是用 node 调用 docker 的..稍微有点 bug, 所以我给它提了个 pr, 所以先写在第一个. &lt;/li&gt;
&lt;li&gt;tracer 这个是我在一堆 log 库里挑出感觉还不错的&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sequelize orm 库, 似乎大家都是用的这个.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;co-mocha 涉及到 co 的单测&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;power-assert 一用就爱上的 assertion, 再也不用写 should 了&lt;/li&gt;
&lt;li&gt;growl 下面这两个主要是配合 mocha 提升测试时的体验的, 比如 watch 文件,然后把测试 report 用 message 的形式显示在桌面等等.&lt;/li&gt;
&lt;li&gt;intelli-espower-loader&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用了一段时间 node, 感觉库比 python 丰富, 包管理也简单的多, 速度肯定是比 Python 快. 在es6语法的支持下, 语法糖也不算输 python 太多. 据说修饰器也快要有了.&lt;/p&gt;</summary><category term="nodejs"></category></entry><entry><title>Docker容器管理</title><link href="/learning/container_manager.html" rel="alternate"></link><updated>2016-09-28T11:38:53+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-09-28:learning/container_manager.html</id><summary type="html">&lt;p&gt;在去年10月开始使用了一阵docker后，我逐渐开始了解docker的管理工具。目前了解到的docker管理工具，从简单到复杂，分别是&lt;code&gt;docker-compose&lt;/code&gt;,&lt;code&gt;swarm&lt;/code&gt;,&lt;code&gt;k8s&lt;/code&gt;.&lt;br /&gt;
其中最简单的，我在今年的四月份开始使用了，因为我目前并没有集群管理的需求，只是想要加速开发部署节奏，构建我的微服务应用, 所以&lt;code&gt;docker-compose&lt;/code&gt;满足了我的需求。
目前我把一些web应用，数据分析，数据抓取程序以及nginx，一起放在了&lt;code&gt;docker-compose&lt;/code&gt;配置里，当我希望整套服务换一个物理机器的时候，只需要重新执行&lt;code&gt;docker-compose&lt;/code&gt;的命令，虽然还是比较原始的
容器使用方式，但是既满足了我的需求，也做到了&lt;strong&gt;按docker的方式做事&lt;/strong&gt;, 呃 , 我是说把nginx放在docker里这件事情。&lt;br /&gt;
最近我又希望往前走一小步，使用下&lt;code&gt;swarm&lt;/code&gt;，我选择了一个简单的Python构建的Web-UI, &lt;code&gt;shipyard&lt;/code&gt;.  它会和主机的8080端口做映射，然后提供一个web服务。由于我的nginx已经被&lt;code&gt;docker-compose&lt;/code&gt;管理了，所以我
只能暂时让nginx把&lt;code&gt;shipyard&lt;/code&gt;指向&lt;code&gt;192.168.5.1&lt;/code&gt;的宿主机地址。TODO&lt;/p&gt;</summary><category term="docker"></category></entry><entry><title>Why shouldn't use component wrap a Route</title><link href="/debug/wrap_a_react_route.html" rel="alternate"></link><updated>2016-08-31T11:22:52+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-08-31:debug/wrap_a_react_route.html</id><summary type="html">&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;由于我希望每个子项目管理自己的route，于是想维护一个&lt;code&gt;route&lt;/code&gt;的component在各个子目录中，在index.js中import各个子项目的&lt;code&gt;route&lt;/code&gt;.&lt;br /&gt;
以此简化index.js中的需要import的依赖数量。&lt;/p&gt;
&lt;h3&gt;react-route是如何配置规则的&lt;/h3&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="nt"&gt;&amp;lt;Router&lt;/span&gt; &lt;span class="na"&gt;history=&lt;/span&gt;&lt;span class="s"&gt;{browserHistory}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Route&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="s"&gt;{Layout}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Route&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;signup&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;component=&lt;/span&gt;&lt;span class="s"&gt;{SignupPage}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Route&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Router&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Router&lt;/code&gt;组件在&lt;code&gt;componentWillMount&lt;/code&gt;时会尝试加载children中的&lt;code&gt;Route&lt;/code&gt;配置, 通过遍历children，找到他们的props, 然后把props加入&lt;code&gt;route&lt;/code&gt;数组中。
也就是说&lt;code&gt;Route&lt;/code&gt;组件实际上作为一个配置用的组件，会直接被&lt;code&gt;Router&lt;/code&gt;读取，所以&lt;code&gt;Route&lt;/code&gt;也没有实际意义上的render方法。&lt;/p&gt;
&lt;p&gt;ps.这提供给我一个思路，如何一个组件的配置太过于多和复杂，那么可以搞出个专门用来做配置用的子组件，在渲染前读取子组件的配置，加载成自己的配置。这样的好处是大大提高了可读性。让配置成为声明而不是运算。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * Creates and returns a routes object from the given ReactChildren. JSX&lt;/span&gt;
&lt;span class="cm"&gt; * provides a convenient way to visualize how routes in the hierarchy are&lt;/span&gt;
&lt;span class="cm"&gt; * nested.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *   import { Route, createRoutesFromReactChildren } from &amp;#39;react-router&amp;#39;&lt;/span&gt;
&lt;span class="cm"&gt; *   &lt;/span&gt;
&lt;span class="cm"&gt; *   const routes = createRoutesFromReactChildren(&lt;/span&gt;
&lt;span class="cm"&gt; *     &amp;lt;Route component={App}&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; *       &amp;lt;Route path=&amp;quot;home&amp;quot; component={Dashboard}/&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; *       &amp;lt;Route path=&amp;quot;news&amp;quot; component={NewsFeed}/&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; *     &amp;lt;/Route&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; *   )&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * Note: This method is automatically used when you provide &amp;lt;Route&amp;gt; children&lt;/span&gt;
&lt;span class="cm"&gt; * to a &amp;lt;Router&amp;gt; component.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createRoutesFromReactChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentRoute&lt;/span&gt;&lt;span class="p"&gt;){...}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;为什么不能用一个wrapper组件来隐藏子route的细节&lt;/h3&gt;
&lt;p&gt;有了上面的知识后，这个问题就显而易见了，因为配置是通过读取children的&lt;code&gt;props&lt;/code&gt;来加载的。在children外包裹一层wrapper会导致读到wrapper的&lt;code&gt;props&lt;/code&gt;。&lt;/p&gt;
&lt;h3&gt;怎么实现我想要的功能&lt;/h3&gt;
&lt;p&gt;最简单的方法就是写个函数来直接return route。这样既达到了分割的目的，也不会加入中间层。&lt;/p&gt;
&lt;h3&gt;为什么一开始会想用wrapper呢&lt;/h3&gt;
&lt;p&gt;一开始不够了解react-route的原理，以为只要能渲染出来，效果是一样的。&lt;/p&gt;
&lt;h3&gt;SO 相关问题链接&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/35048738/react-router-import-routes"&gt;点我&lt;/a&gt;&lt;/p&gt;</summary><category term="react-route"></category></entry><entry><title>docker-compose: scale and link</title><link href="/learning/docker_compose_scale_link.html" rel="alternate"></link><updated>2016-08-22T22:54:17+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-08-22:learning/docker_compose_scale_link.html</id><summary type="html">&lt;p&gt;Month ago, I built my apps with docker and used Nginx outside the docker as a reverse proxy server. Now I have something better to make a change.&lt;br /&gt;
In docker's world, every component of a website should running as a container, include app, db, and Nginx as well.
A docker compose YAML I found online as follows, from &lt;a href="http://anandmanisankar.com/posts/docker-container-nginx-node-redis-example/"&gt;a blog&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;nginx&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;build&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;./nginx&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;node1:node1&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;node2:node2&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;node3:node3&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;80:80&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;node1&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;build&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;./node&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;node2&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;build&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;./node&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;node3&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;build&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;./node&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8080&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;image&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;redis&lt;/span&gt;
    &lt;span class="l-Scalar-Plain"&gt;ports&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6379&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The author made 3 app containers, 1 redis container and 1 nginx container. I find some ugly implement here that each node is hard coded in conf file, so if nodes need to be scaled up, we should add more and more nodes in the conf file.&lt;br /&gt;
&lt;code&gt;docker compose scale&lt;/code&gt; is a useful command here to let us scale up our app containers elegantly. &lt;code&gt;docker compose scale node=3 nginx=1 redis=1&lt;/code&gt; will automatically create 3 node containers for us.&lt;br /&gt;
But there is another dark cloud on the sky. In the previous version, nginx config file is simply as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;node-app&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kn"&gt;least_conn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="s"&gt;weight=10&lt;/span&gt; &lt;span class="s"&gt;max_fails=3&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=30s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;node2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="s"&gt;weight=10&lt;/span&gt; &lt;span class="s"&gt;max_fails=3&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=30s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;node3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt; &lt;span class="s"&gt;weight=10&lt;/span&gt; &lt;span class="s"&gt;max_fails=3&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=30s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

              &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://node-app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kn"&gt;proxy_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Upgrade&lt;/span&gt; &lt;span class="nv"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Connection&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;upgrade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kn"&gt;proxy_cache_bypass&lt;/span&gt; &lt;span class="nv"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Can we use &lt;code&gt;node&lt;/code&gt; to replace &lt;code&gt;node1&lt;/code&gt;,&lt;code&gt;node2&lt;/code&gt;,&lt;code&gt;node3&lt;/code&gt; here?&lt;br /&gt;
&lt;code&gt;node1&lt;/code&gt; here is not some docker magic, it's just a hostname which docker generated in &lt;code&gt;/ets/hosts&lt;/code&gt; of nginx container, since we linked &lt;code&gt;node1&lt;/code&gt; to nginx.
So if we have 3 node IP which has the same hostname, we can just rewrite conf to a single server: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;node-app&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;least_conn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt; &lt;span class="n"&gt;max_fails&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;fail_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, docker compose v1 seems not support group nodes into the same hostname. &lt;br /&gt;
It will generate hosts as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;172.17.0.21 node 8a1297a5b3e4 compose_node_1
172.17.0.21 node_1 8a1297a5b3e4 compose_node_1
172.17.0.22 node_2 069dd46836aa compose_node_2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Only one container will get the name &lt;code&gt;node&lt;/code&gt;. After searching in Github, I got some interesting facts:&lt;/p&gt;
&lt;p&gt;The interaction of scaling with networking (as with links) is unsatisfactory at the moment - you'll basically get a bunch of entries in /etc/hosts along these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  172.16.0.1 myapp_php_1
  172.16.0.2 myapp_php_2
  172.16.0.3 myapp_php_3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a future version of Compose (enabled by changes to Engine), the name under which each container joins the network is going to change to just the service name, php. So you'll get multiple entries with the same name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;172.16.0.1 php
172.16.0.2 php
172.16.0.3 php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This isn't a real solution either, of course - we're still working towards one - but in both cases, if you have a load balancer container that needs to keep up-to-date with what's currently on the network, for the time being it'll need to periodically read /etc/hosts and parse the entries to determine the IPs of the backends.   &lt;/p&gt;
&lt;p&gt;@aanand one of the maintainer of docker compose said above in &lt;a href="https://github.com/docker/compose/issues/2472"&gt;2015-12-7&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;It may already be improved in v2 with docker 1.10, but I have not get the chance to use docker 1.10.  &lt;/p&gt;
&lt;p&gt;I think this way is better since we can easily scale up and dont need to change the config.  DevOps should evolve in this scalable way.&lt;/p&gt;</summary><category term="DevOps docker"></category></entry><entry><title>搭建一个jupyter站点做数据分析吧</title><link href="/learning/jupyter.html" rel="alternate"></link><updated>2016-08-22T22:34:10+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-08-22:learning/jupyter.html</id><summary type="html">&lt;h3&gt;jupyter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;jupyter&lt;/code&gt; 是一个非常适合做数据分析的工作台。为了可以使得&lt;code&gt;jupyter&lt;/code&gt;可以运行在服务器上访问生产环境的数据，今天我要在服务器上搭建一个&lt;code&gt;jupyter&lt;/code&gt;站点。&lt;/p&gt;
&lt;h3&gt;容器&lt;/h3&gt;
&lt;p&gt;为了不和线上的其他应用起冲突，我决定把它装在一个docker中。
这里没有踩到什么坑。&lt;/p&gt;
&lt;h3&gt;Nginx&lt;/h3&gt;
&lt;p&gt;为了提供可靠的域名转发服务，我会用Nginx根据域名转发到docker上绑定的Port。&lt;br /&gt;
这里有个细节需要注意，因为&lt;code&gt;jupyter&lt;/code&gt;用到了&lt;code&gt;websocket&lt;/code&gt;技术，所以在nginx的配置上略有不同。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;/(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://127.0.0.1:8003&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;# WebSocket support&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Upgrade&lt;/span&gt; &lt;span class="nv"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Connection&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;upgrade&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;# 对于满足以上格式的请求，是一个ws请求，需要加上最后3行。&lt;/span&gt;
        &lt;span class="c1"&gt;# 另外，至少需要 nginx 1.1.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安全&lt;/h3&gt;
&lt;p&gt;我们当然不能让谁都能访问我们的工作台啦，果断加上密码 参考http://jupyter-notebook.readthedocs.io/en/latest/public_server.html&lt;/p&gt;
&lt;h3&gt;愉快的开始数据分析吧&lt;/h3&gt;
&lt;p&gt;装上&lt;code&gt;pandas&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt; 愉快的开始数据分析吧。&lt;/p&gt;</summary><category term="jupyter"></category></entry><entry><title>推荐一个更好的Python 环境和包管理工具 canda</title><link href="/tool/conda.html" rel="alternate"></link><updated>2016-08-01T09:47:40+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-08-01:tool/conda.html</id><summary type="html">&lt;p&gt;今天在吐槽&lt;code&gt;cx_Oracle&lt;/code&gt;包装起来麻烦，要先装oracle的客户端，然后配置环境变量。同事推荐了这个包管理工具给我。
实测非常靠谱. 简直是比&lt;code&gt;npm&lt;/code&gt;还舒服的体验, 当然是随口一说的，不过至少在oracle的包的安装上，比&lt;code&gt;npm&lt;/code&gt;的要简单。 &lt;br /&gt;
再用清华的源加个速，&lt;code&gt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&lt;/code&gt;。 &lt;/p&gt;</summary><category term="conda"></category></entry><entry><title>记一次网络问题的排查</title><link href="/debug/dnat_debug.html" rel="alternate"></link><updated>2016-07-26T16:02:25+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-07-26:debug/dnat_debug.html</id><summary type="html">&lt;p&gt;昨天遇到了一个端口转发导致VIP失效的问题，今天记录下当时的排查思路。  &lt;/p&gt;
&lt;p&gt;因为要做升级，所以我删除了dokcer老容器，并启动新容器。之后访问VIP, 也就是LVS中的VIP，发现原先可以访问的站点不能访问了。  &lt;/p&gt;
&lt;p&gt;以上是故障表现，下面是具体排查过程  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker logs containerId&lt;/code&gt; 检查docker 中的应用是成功启动的，排除应用无法启动的问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl localhost:80&lt;/code&gt; 因为容器是以&lt;code&gt;-p 80:80&lt;/code&gt;的方式启动的，所以接下来我尝试在物理机上访问自己的80端口，发现可以成功访问应用，排除了&lt;code&gt;forward&lt;/code&gt;没设置的问题&lt;/li&gt;
&lt;li&gt;接下来，我祭出了瑞士军刀&lt;code&gt;nc -l 80&lt;/code&gt;, 然后在外部以VIP的方式访问，发现无法访问。 这时候怀疑是 &lt;code&gt;iptables&lt;/code&gt; 的问题&lt;/li&gt;
&lt;li&gt;先做下备份，&lt;code&gt;service iptables save&lt;/code&gt;, 然后关掉&lt;code&gt;service iptables stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再起&lt;code&gt;nc -l 80&lt;/code&gt;, 发现很快nc进程就结束了，&lt;code&gt;trace nc -l 80&lt;/code&gt; 找出来源包IP，发现是&lt;code&gt;LVS&lt;/code&gt;的心跳包。至此VIP恢复访问&lt;/li&gt;
&lt;li&gt;接下来就是要找iptables里谁在搞鬼了。&lt;code&gt;iptables -L&lt;/code&gt;, 因为怀疑是docker在搞鬼，所以把展示出和docker有关的都删了，但是问题没有解决&lt;/li&gt;
&lt;li&gt;上面我犯了一个错误，那就是以为&lt;code&gt;iptables -L&lt;/code&gt;展示的是所有的规则，但其实只展示了&lt;code&gt;filter&lt;/code&gt;, 和转发有关的nat需要&lt;code&gt;iptables -t nat -L&lt;/code&gt;来展示&lt;/li&gt;
&lt;li&gt;把&lt;code&gt;iptables -t nat -L&lt;/code&gt;中和docker有关的删掉。问题解决。问题原因是docker删除容器后没有把转发规则删除。&lt;/li&gt;
&lt;li&gt;又重现了下这个问题，应该是docker的问题，删除实例没有把转发规则和proxy干掉。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次排查，用到了几个工具，都是之前的积累，所以排查显得顺畅多了。主要时间花在了对iptables的不熟悉。&lt;/p&gt;</summary><category term="network"></category></entry><entry><title>Python subprocess包中的父子进程沟通</title><link href="/debug/subprocess_pipe.html" rel="alternate"></link><updated>2016-06-02T01:19:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-06-02:debug/subprocess_pipe.html</id><summary type="html">&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;前段时间是5.27蚂蚁技术日，听了康朵分享的关于创新的一些特质，记录一下，权且是自勉。  &lt;/p&gt;
&lt;p&gt;创新需要以下几点能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;学习能力&lt;/strong&gt; 没有学习能力，别说创新，跟上大环境都难&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解构能力&lt;/strong&gt; 没有解构能力，无法把复杂问题分解为已知问题去解决&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统性思维&lt;/strong&gt; 这点我觉得很难做到，是内功&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交朋友能力&lt;/strong&gt; 主要指认识大牛&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;化繁为简&lt;/strong&gt; 这个和解构差不多吧&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对美的追求&lt;/strong&gt; 很多烂设计，如果对美有要求，根本不会让它出现。这点我深有体会。那种接到一个需求就做，从来不考虑怎么去更完美的实现的人，肯定是给团队挖坑最多的人。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;引言&lt;/h3&gt;
&lt;p&gt;10多天前，我写了篇文章谈如何调试一个hang住的Python程序，最后发现程序是因为打日志把buffer打满了，而产生了阻塞。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你发现家里有一只蟑螂的时候，可能你家里已经有了一个蟑螂窝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这话用了形容这几天的发现着实不假，当你发现一个legacy项目的代码中有了一个暗藏的坑后，项目中其他的代码可能也都是这个坑。 这周果然又在其他代码中发现了这个问题，并引起了一个小故障。
在故障的改进措施中，我发现大家其实对操作系统的一些基础知识已经不是那么熟悉了，所以今天再写篇文章，复盘下这个坑。&lt;/p&gt;
&lt;h3&gt;subprocess&lt;/h3&gt;
&lt;p&gt;Python中可以使用&lt;code&gt;subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)&lt;/code&gt;来开启一个子进程。
两处埋坑的代码，一摸一样的错误，都是试图在子进程返回后才去读子进程的stderr的PIPE。这就带来了一个坑，子进程在没返回前就把这个PIPE打满了，父进程不去读PIPE，而是在等子进程返回，子进程则在等父进程读PIPE消耗缓冲区，产生了死锁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning This will deadlock when using stdout=PIPE and/or stderr=PIPE and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use communicate() to avoid that.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个坑，可能太经典了吧，以至于Python官方文档都要做个爱心提示了[1]&lt;/p&gt;
&lt;h3&gt;communicate&lt;/h3&gt;
&lt;p&gt;在上文中提到，要避免死锁，需要用&lt;code&gt;communicate()&lt;/code&gt;, 那做个函数做了什么事情避免了死锁呢？&lt;br /&gt;
其实它也只是做了一点微小的工作，那就是用&lt;code&gt;select&lt;/code&gt;读父子进程间的管道，直到EOF，然后调用&lt;code&gt;wait()&lt;/code&gt;等待子进程返回.&lt;br /&gt;
今天我在看改进方案时，发现同学尝试用非阻塞读去解决上面那个问题，我觉得是牛头不对马嘴。首先要搞清楚，程序hang住不是因为buffer空着去读buffer，然后读阻塞。而是buffer写满了，造成的写阻塞。用非阻塞读去解决写阻塞的问题，我真是不知道说什么好了。
解决方法就是，在子进程返回前，要不停的去探测子进程有没有输出，即文件是否可读，保证buffer不被打满。至于怎么去读，用IO复用也好，判断可读后用阻塞读，无需判断可读性直接非阻塞读也罢, 还是另开线程直接阻塞读也是个更好的方法，都不是问题。[2] 关键就是，&lt;strong&gt;要在&lt;code&gt;wait()&lt;/code&gt;前读文件&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;参考资料&lt;/h3&gt;
&lt;p&gt;[1]  https://docs.python.org/2/library/subprocess.html#subprocess.Popen.wait&lt;br /&gt;
[2]  《Unix 网络编程》&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>MySQL auto_increment 的坑</title><link href="/learning/mysql_autoinc.html" rel="alternate"></link><updated>2016-06-02T00:40:14+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-06-02:learning/mysql_autoinc.html</id><summary type="html">&lt;h3&gt;Auto-Increment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内存中有一个计数器auto-increment counter来记录行值。在服务器启动后的第一个sql进来的时候，这个计数器被初始化select max(col) from t for update.如果表是空的，就用1开始，这个值也是可以设定的。&lt;/li&gt;
&lt;li&gt;如果在计数器被初始化前， SHOW TABLE STATUS，那么计数器会被初始化，这个语句所在的事务持有独占锁，直到事务结束。&lt;/li&gt;
&lt;li&gt;插入的时候，如果值大于当前最大值+步长，那么counter也跟着跳变。&lt;/li&gt;
&lt;li&gt;如果值是NULL或者0，那么会被置为最大值+步长 &lt;/li&gt;
&lt;li&gt;如果值是负或者大于整数范围，未定义行为&lt;/li&gt;
&lt;li&gt;Auto-Increment Locking是表锁，但是在语句结束的时候释放，而不是事务结束。&lt;/li&gt;
&lt;li&gt;A server restart also cancels the effect of the AUTO_INCREMENT = N table option in CREATE TABLE and ALTER TABLE statements, which you can use with InnoDB tables to set the initial counter value or alter the current counter value.&lt;/li&gt;
&lt;li&gt;因为是语句锁，所以rollback后，是会产生gap的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Configurable InnoDB Auto-Increment Locking&lt;/h3&gt;
&lt;p&gt;表级锁可以保证顺序性，但是并发性能差。所以加入优化，如果当前insert数量可预测，而且也没用别的语句持有Auto-Increment Locking表锁，那么这个insert不会持有表锁，而是在语句结束的时候，持mutex来修改counter。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;innodb_autoinc_lock_mode = 0&lt;/code&gt; 全部用传统的表锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;innodb_autoinc_lock_mode = 1&lt;/code&gt; 简单插入用mutex，但是如果当前已经有语句持有表锁，那简单插入也得等着了。对于语句级别的复制是安全的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;innodb_autoinc_lock_mode = 2&lt;/code&gt;  所有语句都用mutex。会导致交叉增加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于这个参数的设定，考虑到主备同步，还要和主备复制的参数一起考虑
- 对于语句级别的复制，开 &lt;code&gt;innodb_autoinc_lock_mode=2&lt;/code&gt; 会导致主备不一致。
- row级别的复制，则不要紧。 
- 对于mixed来说1，2模式下，计数器简单的增加插入数量，不管有多少是特殊值。&lt;/p&gt;
&lt;p&gt;简单插入，simple insert指的是mysql可以自己判断出插入条数的sql，其他为bulk insert。&lt;br /&gt;
故障就是因为开了1，一个insert select这种bulk insert，导致持有表锁。&lt;br /&gt;
以上&lt;/p&gt;</summary><category term="MySQL"></category></entry><entry><title>Python 调试方法</title><link href="/debug/python.html" rel="alternate"></link><updated>2016-05-21T15:45:00+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-05-21:debug/python.html</id><summary type="html">&lt;h3&gt;背景&lt;/h3&gt;
&lt;p&gt;这几天一直在查一个线上程序 hang 住的问题. 这个程序总是在运行50分钟后 hang 住, 通过以下的一些调试手段,发现是打日志的时候因为 buffer 满被 block 了.
Python 日志是默认打到 stderr 的, 无论日志级别. 而我这个程序是被另一个程序调起的, 父进程没有接收子进程的 stderr, 导致了 buffer 被打满.
在调试的过程中, 用到了以下几种 Python 调试手段, 于是记录以下.&lt;/p&gt;
&lt;h3&gt;GDB&lt;/h3&gt;
&lt;p&gt;GDB是一个广为人知的调试器, 而且线上可用, 非常赞. 但是默认配置的 GDB 并不能打印 Python 当前调用栈. 我们需要对其做些配置. &lt;br /&gt;
首先进行gdb的安装, 需要gdb7以上版本&lt;br /&gt;
&lt;code&gt;sudo yum install gdb python-debuginfo&lt;/code&gt; &lt;br /&gt;
然后下载这份 gdb 配置文件&lt;code&gt;http://svn.python.org/projects/python/trunk/Misc/gdbinit&lt;/code&gt; 到 &lt;code&gt;~/.gdbinit&lt;/code&gt;&lt;br /&gt;
对于一个线上已经hang住的程序来说, 可以用&lt;code&gt;gdb -p pid&lt;/code&gt;的形式进行 attach, 打印出当前调用栈.&lt;br /&gt;
一般来说, 必须是带&lt;code&gt;debug symbol&lt;/code&gt;的Python 编译版本才能打印出足够多的信息, 但是线上的 Python 版本往往是不带&lt;code&gt;debug symbol&lt;/code&gt; 的, 于是我们要修改下上述的配置文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    &amp;lt;&amp;lt;&amp;lt;&amp;lt;         if &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;pc&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; PyEval_EvalFrameEx &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;pc&lt;/span&gt;&lt;span class="x"&gt; &amp;lt; PyEval_EvalCodeEx&lt;/span&gt;
&lt;span class="x"&gt;    &amp;gt;&amp;gt;&amp;gt;&amp;gt;         if &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;pc&lt;/span&gt;&lt;span class="x"&gt; &amp;gt; PyEval_EvalFrameEx &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;pc&lt;/span&gt;&lt;span class="x"&gt; &amp;lt; PyEval_EvalCodeEx &amp;amp;&amp;amp; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;fp&lt;/span&gt;&lt;span class="x"&gt; != 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对&lt;code&gt;~/.gdbinit&lt;/code&gt; 进行上述修改, 即可成功打印出当前 hang住进程的调用栈.&lt;br /&gt;
具体到我这次遇到的问题, 在打出调用栈后发现是卡死在 log 模块的 emit 上, 于是 strace 下看到果然是卡死在 write 的系统调用上, 顺利找到了原因.&lt;br /&gt;
更多的用法可以看https://wiki.python.org/moin/DebuggingWithGdb, 不过大部分的用法依然需要&lt;code&gt;debug symbol&lt;/code&gt;, 按照 wiki 来,不一定可以顺利实现.&lt;/p&gt;
&lt;h3&gt;PDB&lt;/h3&gt;
&lt;p&gt;PDB是 Python 自带的一个调试模块. 可以以&lt;code&gt;python -m pdf xxx.py&lt;/code&gt; 的形式, 以调试模式启动一个 Python 进程.
虽然似乎不能 attach 到已运行的进程上, 但是提供了一个简单快速的调试方式.&lt;/p&gt;
&lt;h3&gt;Singal AND InteractiveConsole&lt;/h3&gt;
&lt;p&gt;上述的方式都是不需要侵入代码的, 这里再提供一种侵入代码的方式.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;signal&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Interrupt running process, and provide a python prompt for&lt;/span&gt;
&lt;span class="sd"&gt;    interactive debugging.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;_frame&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;         &lt;span class="c"&gt;# Allow access to frame object.&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_globals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Unless shadowed by global&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_locals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InteractiveConsole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Signal received : entering python shell.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Traceback:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format_stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGUSR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# Register handler&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本原理是给&lt;code&gt;SIGUSR1&lt;/code&gt;信号加上一个handler, handler 执行时会把当前的变量加载到一个交互式窗口, 然后开启交互式console, 接下来就像打开一个 REPL 一样了, 可以查看当前的变量值, 可以改变变量值, 可以调用函数看看结果是什么, 查看完后&lt;code&gt;^d&lt;/code&gt;离开, 就可以让程序继续执行下去. &lt;br /&gt;
在加好 handler 后, 我们可以用&lt;code&gt;os.kill(pid, signal.SIGUSR1)&lt;/code&gt;的方式, 调起 handler, 进行调试.&lt;br /&gt;
值得注意的是, 由于和console 的交互需要 stdout 的支持, 而父子进程默认是不共享 stdout 的,所以当要调试子进程的时候, 需要重定向子进程的 stdout 到父进程的 stdout, 这个很简单,就不贴代码了.&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Loggers in Python</title><link href="/debug/logger_in_python.html" rel="alternate"></link><updated>2016-05-21T15:14:04+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-05-21:debug/logger_in_python.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;Loggers will send to stderr by default. So make sure stderr has a receiver.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Logger manager&lt;/h3&gt;
&lt;p&gt;Loggers will be stored in manager in Python. Handlers will cause resource leak if not removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a logger with the specified name, creating it if necessary.&lt;/span&gt;

&lt;span class="sd"&gt;    If no name is specified, return the root logger.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Get a logger with the specified name (channel name), creating it&lt;/span&gt;
&lt;span class="sd"&gt;        if it doesn&amp;#39;t yet exist. This name is a dot-separated hierarchical&lt;/span&gt;
&lt;span class="sd"&gt;        name, such as &amp;quot;a&amp;quot;, &amp;quot;a.b&amp;quot;, &amp;quot;a.b.c&amp;quot; or similar.&lt;/span&gt;

&lt;span class="sd"&gt;        If a PlaceHolder existed for the specified name [i.e. the logger&lt;/span&gt;
&lt;span class="sd"&gt;        didn&amp;#39;t exist but a child of it did], replace it with the created&lt;/span&gt;
&lt;span class="sd"&gt;        logger and fix up the parent/child references which pointed to the&lt;/span&gt;
&lt;span class="sd"&gt;        placeholder to now point to the logger.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A logger name must be string or Unicode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;_acquireLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PlaceHolder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;ph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
                    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerClass&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;_loggerClass&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fixupChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fixupParents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerClass&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;_loggerClass&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fixupParents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;_releaseLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Loggers&lt;/code&gt; in Python are stored in &lt;code&gt;Logger.manager&lt;/code&gt; with a specified name. If create a logger with a task rather than a file, loggers stored in manager will increase and never be deleted.&lt;br /&gt;
It becomes even worse when the logger has a handler, eg. write logs to database. It may cause a connections leak.&lt;/p&gt;
&lt;h4&gt;Log emit will hang if stderr is not received&lt;/h4&gt;
&lt;p&gt;Log info will send to stderr by default, make sure stderr buffer has a removed, otherwise stream write will be blocked.&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>About Me</title><link href="/misc/about.html" rel="alternate"></link><updated>2016-05-13T00:15:33+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-05-13:misc/about.html</id><summary type="html">&lt;p&gt;My name is Lawrance Shen and I'm a passionate hybrid developer interested in web development, DevOps, database and tons of other stuff. I am one of the research developers of the Alibaba.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>What do the top 1% of software engineers do that the other 99% do not</title><link href="/think/What-do-the-top-1%-of-software-engineers-do-that-the-other-99%-do-not.html" rel="alternate"></link><updated>2016-04-27T00:50:28+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-04-27:think/What-do-the-top-1%-of-software-engineers-do-that-the-other-99%-do-not.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.quora.com/What-do-the-top-1-of-software-engineers-do-that-the-other-99-do-not"&gt;What do the top 1% of software engineers do that the other 99% do not&lt;/a&gt;&lt;br /&gt;
After reading some answers, I decide to reflect and list what I did or did not in the past working year.&lt;/p&gt;
&lt;h4&gt;Invest in learning and building tools&lt;/h4&gt;
&lt;p&gt;I give myself A on this measure. I used variuos of tools, tiny tool like ssh tunnel to save my life to ssh to remote servers, complex tools like docker to build and depoly my project.&lt;br /&gt;
All these tools is discovered by myself, not pushed by my boss or mentor. Instead, I recommanded some tools to my mentor and friends, for example,  iTerm2, oh-my-zsh, etc.&lt;/p&gt;
&lt;h4&gt;Give credit where credit is due&lt;/h4&gt;
&lt;p&gt;This rule is not very clear to me. Maybe the author think a top coder should also be a nice guy.&lt;/p&gt;
&lt;h4&gt;Impatience. Rather than wanting to spend time in meetings, top engineers write code, and spend time writing code rather than talking about it.&lt;/h4&gt;
&lt;p&gt;I hate meeting. But I can't say I spend much time on writing code. Sometimes I can't deep into coding. After writing piece of code, I would open IM app to see messages.&lt;/p&gt;
&lt;h4&gt;Total stack comprehension.&lt;/h4&gt;
&lt;p&gt;WOW! It's very high level skill, I think. It's hard for someone to break through his stack, it's harder than full stack. A back-end programmer can easily learn how to use &lt;code&gt;ajax&lt;/code&gt; but it's very hard to learn about &lt;code&gt;JVM&lt;/code&gt; or the compiler he use.&lt;/p&gt;
&lt;h4&gt;they solve the problem rather than doing what's asked.&lt;/h4&gt;
&lt;p&gt;Totally agree with this, and that's what I want to improve in the next year. Do more things, do the right thing, and be responsible to the project.&lt;/p&gt;
&lt;h4&gt;they choose the right level of abstraction for the task&lt;/h4&gt;
&lt;p&gt;It's not a primer skill. Know how to abstract is good, but know how to choose the right level is great. It's really depends on the teammates.&lt;/p&gt;</summary><category term="thinking"></category></entry><entry><title>Python multiprocessing WHY and HOW</title><link href="/learning/python-multiprocessing.html" rel="alternate"></link><updated>2016-04-25T14:41:15+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-04-25:learning/python-multiprocessing.html</id><summary type="html">&lt;p&gt;I am working on a Python script which will migrate data from one database to another. In a simple way, I need &lt;code&gt;select&lt;/code&gt; from a database and then &lt;code&gt;insert&lt;/code&gt; into another.&lt;br /&gt;
In the first version, I designed to use multithreading, just because I am more familiar with it than multiprocessing. But after fewer month, I found several problems in my workaround.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can only use one of 24 cpus in case of GIL&lt;/li&gt;
&lt;li&gt;can not handle singal for each thread. I want to use a simple &lt;code&gt;timeout&lt;/code&gt; decarator, to set a &lt;code&gt;signal.SIGALRM&lt;/code&gt; for a specified function. But for multithreading, the signal will get caught by a random thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I start to refactor to multiprocessing.&lt;/p&gt;
&lt;h3&gt;multiprocessing&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;multiprocessing is a package that supports spawning processes using an API similar to the threading module. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But it's not so elegant and sweet as it described.&lt;/p&gt;
&lt;h4&gt;multiprocessing.pool&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It looks like a good solution, but we can not set a &lt;code&gt;bound function&lt;/code&gt; as a target &lt;code&gt;func&lt;/code&gt;. Because &lt;code&gt;bound function&lt;/code&gt; can not be serialized in &lt;code&gt;pickle&lt;/code&gt;. And &lt;code&gt;multithreading.pool&lt;/code&gt; use pickle to serialize object and send to new processes.
&lt;code&gt;pathos.multiprocessing&lt;/code&gt; is a good instead. It uses &lt;code&gt;dill&lt;/code&gt; as an instead of &lt;code&gt;pickle&lt;/code&gt; to give better serialization.&lt;/p&gt;
&lt;h4&gt;share memory&lt;/h4&gt;
&lt;p&gt;Memory in multithreading is shared naturally. In a multiprocessing environment, there are some wrappers to wrap a sharing object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.Value&lt;/code&gt; and &lt;code&gt;multiprocessing.Array&lt;/code&gt; is the most simple way to share Objects between two processes. But it can only contain &lt;code&gt;ctype&lt;/code&gt; Objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiprocessing.Queue&lt;/code&gt; is very useful and use an API similar to &lt;code&gt;Queue.Queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Python and GCC version&lt;/h4&gt;
&lt;p&gt;I didn't know that even the &lt;code&gt;GCC&lt;/code&gt; version will affect behavior of my code. On my centos5 os, same Python version with different &lt;code&gt;GCC&lt;/code&gt; version will have different behaviors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;20060404&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.queues&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JoinableQueue&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/oracle/dbapython/lib/python2.7/multiprocessing/queues.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.synchronize&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BoundedSemaphore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Condition&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/oracle/dbapython/lib/python2.7/multiprocessing/synchronize.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot; function, see issue 3770.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="n"&gt;lacks&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;functioning&lt;/span&gt; &lt;span class="n"&gt;sem_open&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;therefore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="n"&gt;synchronization&lt;/span&gt; &lt;span class="n"&gt;primitives&lt;/span&gt; &lt;span class="n"&gt;needed&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt; &lt;span class="mf"&gt;3770.&lt;/span&gt;


&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;20080704&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Red&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="mf"&gt;4.1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux2&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;multiprocessing.queues&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JoinableQueue&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>对 Paxos 的一些理解</title><link href="/think/paxos.html" rel="alternate"></link><updated>2016-04-22T14:12:26+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-04-22:think/paxos.html</id><summary type="html">&lt;p&gt;今天 OB 的同事花了一个多小时讲了 paxos 的原理, 我相信场上听懂50%的人不超过50%. 至少我自己对 basic-paxos 还存在这几点疑问.&lt;/p&gt;
&lt;h3&gt;prepare 阶段是干嘛的&lt;/h3&gt;
&lt;p&gt;multi paxos 是不需要 prepare 的, 而 basic paxos 需要, 为什么多个leader 的时候需要做 prepare 呢?&lt;br /&gt;
prepare 阶段是用来决定当前要进行 accept 的 proposal id 的.  拥有 prepare 阶段后的 accept 阶段可以保证很大概率下多数人可以接受它的请求. 
如果失去了 prepare 阶段, 并且有多个 leader 在同时提交, 很可能出现&lt;strong&gt;大家都在做持久化,但是都是一群乌合之众,没有一个人是 majority&lt;/strong&gt;.
虽然有了 prepare 阶段后, 依然可能出现全是乌合之众的情况, 但是大大降低了.&lt;/p&gt;
&lt;p&gt;从 paxos 的推演的角度, 我们来思考这个问题, paxos 需要满足以下三个原始条件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;决议（value）只有在被proposers提出后才能被批准（未经批准的决议称为“提案（proposal）”）；&lt;/li&gt;
&lt;li&gt;在一次Paxos算法的执行实例中，只批准（chosen）一个value；&lt;/li&gt;
&lt;li&gt;learners只能获得被批准（chosen）的value。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们怎么保证只批准一个 value 呢? 那就是看哪个 value 是多数派,多数派的那个有效.
 为了形成多数派, 必然要有一方比另一方至少多1个, 而怎么保证这1个肯定出现,而不是摇摆不定呢?
 所以我们有了约束&lt;code&gt;p1:一个 acceptor 必须 accept 遇到的第一个提案&lt;/code&gt;&lt;br /&gt;
 继续考虑, 条件2其实只说了批准 value, 没说不能 accept 多个决议.
 所以我们有了约束&lt;code&gt;p2:一个 value 被 批准后, 之后批准的提案必须具有这个 value&lt;/code&gt;
 p2进一步加强可以得到&lt;code&gt;p2a: 一个 value 被批准后, acceptor 只能接受具备这个 value 的提案&lt;/code&gt;
 但是&lt;code&gt;p2a&lt;/code&gt;不具备可操作性, 与p1矛盾了. 所以我们用 p2b 代替 &lt;code&gt;p2b: 一个 value 被批准后, proposal 只能提出具备这个 value 的提案&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;到这里,我突然想通了 prepare 阶段是干嘛的, prepare 阶段就是检查当前有没有已经 accept的提案的,如果已经有了 accept 的提案, 
 那么就不能提出了(如果 value 不同. 如果强行提出呢? 只不过是浪费带宽罢了&lt;/p&gt;
&lt;p&gt;但是故事还没完, p2b 的意思是, proposal 每提出决议,就要访问全部其他节点, 看有没有 value 被批准. 这可太麻烦了. 退化为2pc 了喂!
 所以有了非常拗口的&lt;code&gt;p2c: 如果一个编号为n的提案具有value v，那么存在一个多数派，要么他们中所有人都没有接受（accept）编号小于n 
 的任何提案，要么他们已经接受（accept）的所有编号小于n的提案中编号最大的那个提案具有value v。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从这里, 我们得到一个神奇的结论, paxos 是 2pc 的单调递增优化!&lt;/p&gt;
&lt;h3&gt;为什么比2pc 好&lt;/h3&gt;
&lt;p&gt;如果我们简单的把2pc 的 commit 条件设置为多数同意就 commit. 是不是就变得和 paxos 一样了呢?&lt;br /&gt;
2pc 的 commit 条件设置为多数同意, 这就是 zookeeper 的 zab 算法. 它比 paxos 弱的一点是, 当一个 acceptor 在 prepare 阶段接受了一个提议后,
除非 rollback, 不然不能接受新的更大的提议, 也就是有个锁在上面. 而 paxos 协议是可以打破这把锁的. 打破锁的行为, 可以提高吞吐量和容错率. ( 这点不知道线上验证如何.&lt;/p&gt;
&lt;h3&gt;什么时候持久化&lt;/h3&gt;
&lt;p&gt;在 prepare 和 accept 后都需要持久化, 不过 accept 才是数据持久化.&lt;/p&gt;
&lt;h3&gt;待续&lt;/h3&gt;
&lt;p&gt;今天暂时想通了这么多, 明天继续和同事切磋去.&lt;/p&gt;</summary><category term="Paxos"></category></entry><entry><title>MySQL 首行查询陷阱</title><link href="/learning/mysql_limit_1.html" rel="alternate"></link><updated>2016-04-08T00:00:26+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-04-08:learning/mysql_limit_1.html</id><summary type="html">&lt;h3&gt;起因&lt;/h3&gt;
&lt;p&gt;今天在执行一条 query 的时候,发现数据库用了6分钟才返回数据,而这条 query 仅仅是很简单的&lt;code&gt;select * from foo limit 1&lt;/code&gt;.  &lt;/p&gt;
&lt;h3&gt;排查&lt;/h3&gt;
&lt;p&gt;foo 这个表里有近1T的数据, 但是这不应该成为返回慢的原因. 有同事发现这条语句只扫描了1行数据, 这是符合我们预期的, 但是为什么扫描一行数据花了6分钟呢?&lt;br /&gt;
接下来我们发现此时数据库上io 压力非常大, 而且脏页比例很高. 问了下同事, 这个表最近在做历史数据迁移, 这时候真相就水落石出了.&lt;/p&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;什么叫&lt;strong&gt;脏页&lt;/strong&gt;? 在 Mysql 删除一条数据的时候, 并不是直接从数据文件中删除它, 而是先把它标记为 delete, 而后有异步的&lt;code&gt;purge&lt;/code&gt;线程进行清理.而还没有被清理的数据所存在的页,
我们称之为脏页.&lt;br /&gt;
在这个 case 中, 数据库先去数据文件中找1条记录,拿出来一看,发现这条记录是被标记 delete 的, 数据库又只能回去找下一条. 而当脏页比例很高且 io 压力很大的情况下,
要遍历找出第一条记录前, 很可能有大量的脏记录, 这就是为什么数据库花了6分钟才返回的原因.&lt;/p&gt;
&lt;h3&gt;解决&lt;/h3&gt;
&lt;p&gt;这个问题只有等数据库 purge 线程再工作一段时间,就会自动消失.&lt;/p&gt;</summary><category term="mysql"></category></entry><entry><title>Alter dataSource in Spring By AOP And Annotation</title><link href="/debug/aop_proxy.html" rel="alternate"></link><updated>2016-04-06T20:42:11+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-04-06:debug/aop_proxy.html</id><summary type="html">&lt;p&gt;Here is an article of how to use AOP and Annotation mechanism to alter dataSource elegantly.&lt;br /&gt;
First, I want make sure that everyone knows how to build multiple dataSource. Please check this article &lt;a href="https://spring.io/blog/2007/01/23/dynamic-datasource-routing/"&gt;Dynamic-DataSource-Routing&lt;/a&gt;&lt;br /&gt;
After this, we will have a &lt;code&gt;DataSourceHolder&lt;/code&gt; class, in the case above, it is called &lt;code&gt;CustomerContextHolder&lt;/code&gt;.&lt;br /&gt;
Let's remove the customer logic and make &lt;code&gt;Holder&lt;/code&gt; purer.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSourceHolder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ThreadLocal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;contextHolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ThreadLocal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getCurrentDataSource&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDefaultDataSource&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;clearCustomerType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;   
    &lt;span class="o"&gt;}&lt;/span&gt;  

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;When should we call &lt;code&gt;setDataSource&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In the project I take charge of, they invoke &lt;code&gt;setDataSource&lt;/code&gt; in each &lt;code&gt;controller&lt;/code&gt;. IMHO, I don't think it's an 
elegant way. I think &lt;code&gt;dataSource&lt;/code&gt; should be an attribute of a &lt;code&gt;DAO&lt;/code&gt; method or a &lt;code&gt;Service&lt;/code&gt; method. And since
&lt;code&gt;transactionManager&lt;/code&gt; is a &lt;code&gt;advice&lt;/code&gt; to &lt;code&gt;Service&lt;/code&gt; method in this project, &lt;code&gt;dataSource&lt;/code&gt; must be an attribute of a &lt;code&gt;Service&lt;/code&gt; method.&lt;/p&gt;
&lt;h3&gt;Use Annotation to describe a Service method&lt;/h3&gt;
&lt;p&gt;First, we should define a runtime annotation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface DataSource {
    String name() default DataSource.DEFAULT;

    public final static String DEFAULT     = &amp;quot;foo&amp;quot;;

    public final static String BAR           = &amp;quot;bar&amp;quot;;

    public final static String BAZ           = &amp;quot;baz&amp;quot;;

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we use the annotation to describe a &lt;code&gt;Service&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    @Override
    @DataSource(name=DataSource.BAR)
    public Object getSomething() {
        return dao.getSomething();
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use AOP to invoke setDataSource&lt;/h3&gt;
&lt;p&gt;First, define a &lt;code&gt;pointcut&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &amp;lt;aop:pointcut id=&amp;quot;serviceWithAnnotation&amp;quot;
    expression=&amp;quot;@annotation(com.yourpackageName.DataSource)&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, define a &lt;code&gt;advisor&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &amp;lt;aop:advisor advice-ref=&amp;quot;dataSourceExchange&amp;quot; pointcut-ref=&amp;quot;serviceWithAnnotation&amp;quot; order=&amp;quot;1&amp;quot;/&amp;gt;
    &amp;lt;bean id=&amp;quot;dataSourceExchange&amp;quot; class=&amp;quot;com.yourpackageName.DataSourceExchange&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the AOP mechanism will make sure that some methods of &lt;code&gt;DataSourceExchange&lt;/code&gt; will run if Service method which &lt;code&gt;DataSource&lt;/code&gt; annotation decorated is invoked.&lt;/p&gt;
&lt;p&gt;Last, define &lt;code&gt;DataSourceExchange&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSourceExchange&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MethodInterceptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;             &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSourceExchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Method name : &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Method arguments : &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getArguments&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dataSource in invocation is null&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dbnameString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DataSourceHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbnameString&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DataSourceHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDefaultDataSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//TODO&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The hardest part in this bunch of code is how should us impl the &lt;code&gt;getDataSource&lt;/code&gt; method.
I spent several hours of this method.
First, I've seen some code online, which tell me it's quite simple to do this. Just like the code below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAnnotation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it won't work, because &lt;code&gt;invocation.getMethod()&lt;/code&gt; will not return the method you defined above, it will
return a &lt;code&gt;proxy&lt;/code&gt; method. It's a mechanism called &lt;code&gt;Proxy&lt;/code&gt; in Spring framework.&lt;br /&gt;
So we should find out the real method.&lt;br /&gt;
Again I searched stackoverflow.com, some answers tell me &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; will be useful to me.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;AnnotationUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAnnotation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; will recursively find the super class of the proxy method, to find the annotation decorated on the real method you defined above.&lt;br /&gt;
But it's &lt;strong&gt;not&lt;/strong&gt; the complete answer. &lt;br /&gt;
Let's see the source code of &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    /**
     * Get a single {@link Annotation} of &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;annotationType&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; from the supplied {@link Method},
     * traversing its super methods if no annotation can be found on the given method itself.
     * &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Annotations on methods are not inherited by default, so we need to handle this explicitly.
     * @param method the method to look for annotations on
     * @param annotationType the annotation class to look for
     * @return the annotation found, or &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;null&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; if none found
     */
    public static &lt;span class="nt"&gt;&amp;lt;A&lt;/span&gt; &lt;span class="err"&gt;extends&lt;/span&gt; &lt;span class="err"&gt;Annotation&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; A findAnnotation(Method method, Class&lt;span class="nt"&gt;&amp;lt;A&amp;gt;&lt;/span&gt; annotationType) {
        A annotation = getAnnotation(method, annotationType);
        Class&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDeclaringClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchOnInterfaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInterfaces&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSuperclass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="nx"&gt;equivalentMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDeclaredMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameterTypes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAnnotation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;equivalentMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotationType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchOnInterfaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInterfaces&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NoSuchMethodException&lt;/span&gt; &lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// We&amp;#39;re done...&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a precondition to let &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; works, that is the &lt;code&gt;Proxy&lt;/code&gt; mechanism is implemented by &lt;code&gt;inherit&lt;/code&gt;.
There are two ways of &lt;code&gt;proxy&lt;/code&gt; in Spring. &lt;a href="http://stackoverflow.com/questions/10664182/what-is-the-difference-between-jdk-dynamic-proxy-and-cglib"&gt;What is the difference between JDK dynamic proxy and CGLib&lt;/a&gt;. &lt;code&gt;CGLib&lt;/code&gt; is implemented by &lt;code&gt;inherit&lt;/code&gt; but &lt;code&gt;JDK dynamic proxy&lt;/code&gt; is not.&lt;br /&gt;
So &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; won't work for &lt;code&gt;JDK dynamic proxy&lt;/code&gt;. We should write some more code to deal with this situation.
Here is my final solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    private DataSource getDataSource(MethodInvocation invocation) throws Throwable {
        DataSource dataSource = AnnotationUtils.findAnnotation(invocation.getMethod(), DataSource.class);
        if(dataSource != null) {
            return dataSource; // if use CGlib proxy
        }

        Method proxyedMethod = invocation.getMethod(); // or use jdk proxy
        Method realMethod = invocation.getThis().getClass().getDeclaredMethod(proxyedMethod.getName(), proxyedMethod.getParameterTypes());
        dataSource =  AnnotationUtils.findAnnotation(realMethod, DataSource.class);
        return dataSource;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this case, I learnt&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to use AOP and annotation&lt;/li&gt;
&lt;li&gt;there is a mechanism called proxy used by Spring&lt;/li&gt;
&lt;li&gt;there are two implements of proxy mechanism, they are different&lt;/li&gt;
&lt;li&gt;how to use reflection in Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope it would help u.&lt;/p&gt;</summary><category term="aop java"></category></entry><entry><title>hashHistory and browserHistory in React-Router</title><link href="/learning/react_route.html" rel="alternate"></link><updated>2016-03-17T23:09:38+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-03-17:learning/react_route.html</id><summary type="html">&lt;p&gt;&lt;code&gt;hashHistory&lt;/code&gt; and &lt;code&gt;browserHistory&lt;/code&gt; are two kinds of common React-Router &lt;code&gt;Histories&lt;/code&gt; implementations.&lt;br /&gt;
When I was using React-Router v1.0, I read the doc in github and wrote the code like this  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;react-router&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; 
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found something in url like &lt;code&gt;#/home/k=ckuvupr&lt;/code&gt;. What the hell is this?&lt;br /&gt;
I went back to the doc and changed the code with &lt;code&gt;browserHistory&lt;/code&gt;. With the doc, I knew the default implementation is &lt;code&gt;hashHistory&lt;/code&gt;, 
which will make a &lt;code&gt;#&lt;/code&gt; -- hash in url.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;browserHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;react-router&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; 
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;browserHistory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, it would not effect in v1.0, it's the way in v2.0. So I didn't see anything changed. And just for a while, 
I forgot to deal with this, and went to write other codes.  &lt;/p&gt;
&lt;p&gt;Today when I c&amp;amp;p this chunk of code to my new project, using some new tools. The build tool automatically install
react-router v2.0 for me. While the hash tag is gone, and url looks like the &lt;strong&gt;real&lt;/strong&gt; url.
But it cause another problem, that is when the url is like the &lt;strong&gt;real&lt;/strong&gt; url, it means that I should set the server side route to &lt;code&gt;/* -&amp;gt; index.html&lt;/code&gt; rather than &lt;code&gt;/ -&amp;gt; index.html&lt;/code&gt;.&lt;br /&gt;
Otherwise, it will get a 404 error when the url &lt;code&gt;/home&lt;/code&gt; is re-flushed. And the problem will not raise while using &lt;code&gt;hashHistory&lt;/code&gt;, because the url is like &lt;code&gt;/#/home&lt;/code&gt; and it is still &lt;code&gt;/&lt;/code&gt;, the string after hash tag is not in the route rule.
&lt;a href="https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md"&gt;Docs about them.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;I havn't find the correct way to set the server side route, because I am using a &lt;code&gt;webpack-dev-server&lt;/code&gt;-like tool, I don't know how to change the route.&lt;br /&gt;
So I go back to use the ugly &lt;code&gt;hashHistory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It seems a waste of time, my fault is reading doc but not paid attention to version, but I still hate the doc because the difference between v1.0 and v2.0 is not heightlighted.&lt;/p&gt;</summary><category term="react"></category></entry><entry><title>Why Alipay lottery failed</title><link href="/think/alipay-lottery.html" rel="alternate"></link><updated>2016-02-08T02:13:37+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-02-08:think/alipay-lottery.html</id><summary type="html">&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Here I use the word &lt;em&gt;lottery&lt;/em&gt; rather than red packet, because only about 1% of the users get the final rewards. &lt;br /&gt;
After the last round of lottery, most of the users started to question whether it's a deception.&lt;br /&gt;
Here comes a very interesting question, how many percents of people should Alipay choose to win the lottery 
will be satisfied ? Does it really a magic number or can be calculated and proved to be the most satisfied number?&lt;br /&gt;
Here are two models to simulate the group of people.  &lt;/p&gt;
&lt;h3&gt;Granovettor model&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Granovetter has done research on a model of how fads are created. Consider a hypothetical mob assuming that each person's decision whether to riot or not is dependent on what everyone else is doing. Instigators will begin rioting even if no one else is, while others need to see a critical number of trouble makers before they riot, too. This threshold is assumed to be distributed to some probability distribution. The outcomes may diverge largely although the initial condition of threshold may only differ very slightly. This threshold model of social behavior was proposed previously by Thomas Schelling and later popularized by Malcolm Gladwell's book The Tipping Point. via wiki&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a threshold model that is to say there is a threshold to decide if Alipay lottery will be rejected by most of the users.&lt;/p&gt;
&lt;h3&gt;Stand up and clap hands model&lt;/h3&gt;
&lt;p&gt;Sorry I forget the real name of this model. In this model, &lt;code&gt;Q&lt;/code&gt; is quality of a drama, &lt;code&gt;E&lt;/code&gt; is bias, and &lt;code&gt;T&lt;/code&gt; is threshold of satisfaction.
If &lt;code&gt;Q + E &amp;gt; T&lt;/code&gt;, people will stand up and clap hands for a drama. And if &lt;code&gt;x&lt;/code&gt; percents of people stand and clap hands, everyone will stand and clap hands.&lt;br /&gt;
&lt;code&gt;x&lt;/code&gt; is called &lt;code&gt;The Tipping Point&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;In this event, two of the most importent values are &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;. if &lt;code&gt;Q&lt;/code&gt; is too small, for example, everyone got 0.1 CNY, it will make this event meaningless and be forgotten.
And if &lt;code&gt;x&lt;/code&gt; is too small, like now, most of people won't stand up and give a applause.&lt;br /&gt;
It needs data to simulate how to give a balance between &lt;code&gt;Q&lt;/code&gt; ans &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Alibaba has enough resource and data to calculat &lt;code&gt;The Tipping Point&lt;/code&gt; with their proud big data tech. But they did not use and made the whole event a failure. Sigh.&lt;/p&gt;</summary><category term="alipay"></category></entry><entry><title>notes of ArchitectureOfDatabaseSystem</title><link href="/learning/ArchitectureOfDatabaseSystem.html" rel="alternate"></link><updated>2016-02-07T00:40:21+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-02-07:learning/ArchitectureOfDatabaseSystem.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;A Lightweight Thread Package is an application-level construct
that supports multiple threads within a single OS
process  -- page 150&lt;/p&gt;
&lt;p&gt;Each DBMS thread is
programmed to manage its own state, to perform all potentially blocking
operations (e.g., I/Os) via non-blocking, asynchronous interfaces,
and to frequently yield control to a scheduling routine that dispatches
among these tasks.
Lightweight threads are an old idea that is discussed in a retrospective
sense in [49], and are widely used in event-loop programming
for user interfaces. The concept has been revisited frequently in the
recent OS literature [31, 48, 93, 94]. This architecture provides fast
task-switching and ease of porting, at the expense of replicating a good
deal of OS logic in the DBMS (task-switching, thread state management,
scheduling, etc.) [86]. --page 160&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是在说 coroutine, 之前并不知道数据库里也有 co 的应用。
不过现在想想数据库这种 io 密集的应用，确实应该是 co 的第一个吃螃蟹的人。
co 应用必须使用 non-block io 是众所周知的，而像 innodb 这样完全使用direct io 的应用似乎正好
非常契合，因为至少在 Linux 上 aio 还是不支持buffer io 的。不过 MySQL 是用了内核线程的，大概是它比较新的缘故。&lt;br /&gt;
不过有意思的是，事情的发展往往是三十年河东三十年河西的，文章中提到其实 co 的概念是非常古老的，甚至在1990年的时候，
因为没有足够好的操作系统级别的线程，大家转而使用了 co。 而在内核线程如此成熟的今天，在学习的时候，线程模型首先进入
了我们的视角，导致很多人以为 co 是最近才发明出来的, 才不是在黑前端呢口享。&lt;br /&gt;
不过现代数据库只有MSSQLServer 提供 co 的支持，而且不是默认选项, 默认的是线程池。 co 这玩意在MS那里叫 Fibers。 话说回来，响马也
做了个 fibjs，应该是向这个名字致敬的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From the simplest to the most complex, these are: (1) process
per DBMS worker, (2) thread per DBMS worker, and (3) process pool.
Although these models are simplified, all three are in use by commercial
DBMS systems today. -- page 152&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这和以前接触到的 http 服务器的演化似乎是一样的，不过 http 服务器早就走进了 epoll 的时代，当然
也有人说 nginx 的强大中其实 epoll 只是做了一点点微小的贡献，不知道现代的数据库的模型是怎么样的了。
进程模型的好处是把很多事情扔给 os 去处理了，缺点就是内存开销大。
线程模型相对麻烦的一点就是要管理 race condition, 这点和应用开发无区别, 上古时期可能线程开发还有不好 debug 的问题。
从现代的操作系统来看，进程和线程的区别已经越来越小了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Client communication buffers: SQL is typically used in a “pull” model:
clients consume result tuples from a query cursor by repeatedly issuing
the SQL FETCH request, which retrieve one or more tuples per request.
Most DBMSs try to work ahead of the stream of FETCH requests to
enqueue results in advance of client requests.
In order to support this prefetching behavior, the DBMS worker
may use the client communications socket as a queue for the tuples
it produces. More complex approaches implement client-side cursor
caching and use the DBMS client to store results likely to be fetched
in the near future rather than relying on the OS communications
buffers. -- page 158&lt;/p&gt;
&lt;p&gt;A relational query processor takes a declarative SQL statement,
validates it, optimizes it into a procedural dataflow execution plan,
and (subject to admission control) executes that dataflow program on
behalf of a client program. The client program then fetches (“pulls”) the
result tuples, typically one at a time or in small batches -- page 176&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里其实就是 client side cursor 和 server side cursor中我曾经误解过的地方，相信很多人也曾误解过。
结果集的发送其实不是个 push 的模型，而是个 pull 的模型，只有客户端在 fetch 的时候，服务器才会把数据发送过去，
而之所以在 fetch one row 的时候，后面的 row 也存储到客户端了，其实是数据库对于这种 prefetching 行为作出的优化，
先把所有数据都发送过来，存在客户端。这也导致了 fetch 大量数据时客户端内存的爆炸。这里可以联动http://kamushin.github.io/debug/sscursor_in_mysql.html&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Non-Uniform Memory Access (NUMA) systems provide a sharedmemory
programming model over a cluster of systems with independent
memories. Each system in the cluster can access its own local memory
quickly, whereas remote memory access across the high-speed cluster
interconnect is somewhat delayed. The architecture name comes from
this non-uniformity of memory access times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NUMA架构好像在应用服务器那里还听说过，但是用在数据库这里估计比较难，内存的访问是个大问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Halloween problem arises from a
particular execution strategy for statements like “give everyone whose
salary is under $20K a 10% raise.” A na¨ıve plan for this query pipelines
an index scan iterator over the Emp.salary field into an update iterator
(the left-hand side of Figure 4.3). The pipelining provides good I/O)
locality, because it modifies tuples just after they are fetched from the
B+-tree. This pipelining, however, can also result in the index scan
“rediscovering” a previously modified tuple that moved rightward in
the tree after modification, leading to multiple raises for each employee.
In our example, all low-paid employees will receive repeated raises until
they earn more than $20K. This is not the intention of the statement --page 192&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题就是怎么解决已经更新过的值被再次更新。因为数据是以 B+ 树存储的，
意味着数据被改变后，它存放的位置是变了的，那么依次往后找，可能又找到了它。
解决的方式有两个，要么是 mvcc 下不让一个 sql 语句看到它自己导致的改变。要么用临时表来
先找出所有要改变的行，然后一起做改变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All DBMSs need some way to “point” to rows in a base table, so that
index entries can reference the rows appropriately. In many DBMSs,
this is implemented by using direct row IDs (RIDs) that are the physical
disk addresses of the rows in the base tables. This has the advantage
of being fast, but has the downside of making base table row movement
very expensive since all secondary indexes that point to this row require
updating. Both finding and updating these rows can be costly. Rows
need to move when an update changes the row size and space is unavailable
on the current page for the freshly updated row. And many rows
need to move when a B+-tree is split. -- page 195 &lt;/p&gt;
&lt;p&gt;DB2 uses a forwarding pointer
to avoid the first problem. This requires a second I/O to find a moved
page, but avoids having to update the secondary index --page 195 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 rowid 来表示存储在数据表中的位置，带来两个问题。第一个问题，数据位置改变后
rowid 就需要改变，那么所有的二级索引都要变，因为二级索引都必须持有这个 rowid 来找到数据。
第二个问题就是在更新时因为 b+树的分裂，很多行都需要改变位置.&lt;br /&gt;
在我看到这个问题的时候，我第一反应是其实没必要改变所有的二级索引，如果二级索引持有rowid 的指针而不是 rowid 的值，那么只要改变 rowid 的值就行了。
Oracle的做法是不在二级索引中加rowid，而是加主键，然后去查一个主键-rowid的 map。不过这个也会带来一个查表的开销。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to reduce locking and lock conflicts some DBMSs support
MVCC or OCC, typically as an add-on to 2PL. --page 221&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我觉得是数据库技术的精髓所在。即让多个事务同时进行的同时，让结果看上去就像他们是串行的执行一样。&lt;br /&gt;
这里我只了解 innodb。 在 rr 级别下，会用 mvcc 做隔离，在 rc 级别下会用乐观锁的 double-check 方案做隔离。
而 mvcc 并不是不加锁了，mvcc 只能让读不受到写锁的影响，而写操作还是要加锁的, 这点上 pg 好像写都没锁了，有空去看看。
double-check 就是先做操作，然后检查在事务执行期间，有没有别的事务改动过值，如果有就需要回滚重做了。
rc 模式下会产生幻读的问题，主要指的是 &lt;code&gt;select for update&lt;/code&gt; 这样的问题。 在第一次&lt;code&gt;select&lt;/code&gt; 的时候，读了 x 条
记录，然后乐观锁检查的时候发现这x 条记录没被改动过，就提交了。这里有个问题，就是如果&lt;code&gt;select&lt;/code&gt;的&lt;code&gt;where&lt;/code&gt; 语句是 range 的，
那么很可能有别的事物在这之后插入了一条记录，造成前一个事务的&lt;code&gt;select&lt;/code&gt; 和&lt;code&gt;update&lt;/code&gt; 的记录数不相等。&lt;br /&gt;
RR的要求笼统点说就是要求同一事务中两次读得到的结果要是一样的。不会因为另一个事物的提交，而产生新的结果，这里不仅包括了值一样，行数也要一样，所以要解决幻读问题。
那么对于简单的select来说，只要通过MVCC读快照的模式就可以保证两次读结果一致。通过比较版本号，永远读取版本号早于事物开始时系统版本号的快照。
但是对于update、delete来说，难道我们要去update一个快照吗？这并没有什么意义。所以我们需要对记录上X锁。然后在遇到update一个范围或者是非唯一索引、无索引的时候（也就是目标可能不止一个），需要用gap锁，把所有目标可能出现的地方都锁住，也防
止新的符合目标的记录插入。 所以说其实MVCC解决了快照读的问题，而gap lock解决的是当前读的问题。
next key lock 就是记录锁加 gap lock, 主要就是解幻读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Latches differ from locks in a number of ways --page 223 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;latch 其实就是编程意义上的一些锁，存在于内存中，比如自旋锁，互斥锁，rcu 锁等等, 其中 rcu 锁挺有那么点 mvcc 的意思。lock 就是数据库层面上为了做隔离而实现的锁，一般会持有的时间比
latch 要长，也会存下来，而不仅仅是内存中的一个变量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Database logging is an extremely complex and detail-oriented topic --page 228 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can't agree more! 数据库中的日志简直复杂，不仅种类多，而且各种数据库的实现思路也不同。
不过总体来说，数据库里日志主要做三件事情，保障事务的持久化，回滚事务以保障原子性，还有就是故障恢复。
所以日志可以看做是一切状态改变的证明，所以在一个分布式数据库中最重要的就是保证日志的一致，因为日志就是状态，
没落成日志的东西，都是可以扔掉的。
基本的实现技术就是日志先行,WAL.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在刷数据页前先刷日志&lt;/li&gt;
&lt;li&gt;日志需要是有序的&lt;/li&gt;
&lt;li&gt;事务提交前先刷日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是 WAL 的三个规则。
第一条规则保证了原子性，也就是可回滚。第二第三个规则保证了故障后可恢复。
这些知识是我本来就知道的， 接下来是这篇文章告诉我的，real world.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to maximize the speed of the fast path, most commercial
database systems operate in a mode that Haerder and Reuter call
“DIRECT, STEAL/NOT-FORCE” [34]: (a) data objects are updated
in place, (b) unpinned buffer pool frames can be “stolen” (and the modified
data pages written back to disk) even if they contain uncommitted
data, and (c) buffer pool pages need not be “forced” (flushed) to the
database before a commit request returns to the user -- page 229 &lt;/p&gt;
&lt;p&gt;Another fast-path challenge in logging is to keep log records as small
as possible, in order to increase the throughput of log I/O activity.
A natural optimization is to log logical operations (e.g., “insert (Bob,
$25000) into EMP”) rather than physical operations (e.g., the afterimages
for all byte ranges modified via the tuple insertion, including
bytes on both heap file and index blocks.)  -- page 229&lt;/p&gt;
&lt;p&gt;Rather than starting from the very first log
record, a correct result will be obtained by starting recovery at the
oldest of these two log records: (1) the log record describing the earliest
change to the oldest dirty page in the buffer pool, and (2) the log
record representing the start of the oldest transaction in the system.
The sequence number of this point is called the recovery log sequence
number (recovery LSN).) -- page 230&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一个就是说放弃一致性去保证性能。MySQL里等于把双1给去了。&lt;br /&gt;
第二个就是说记录逻辑日志而不是物理日志。
逻辑日志的有点是快和小，缺点是用来做 undo/redo 会比较麻烦。所以 
MySQL 里 binlog 也就是用来复制的 log，是逻辑日志。而 redo/transaction log 是物理日志。&lt;br /&gt;
第三个是在说 LSN，也就是 crash 的最优恢复点。这块我不太了解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Latching in B+-Trees --page 232 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这部分没怎么看懂，甚至我怀疑这里 latch 是不是写错了，应该是 lock。好吧，不过勾起了我一点回忆，就是 
以前看过的哪本书里有关于索引锁的优化的介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One manifestation of the relationship between concurrency and recovery is that writeahead
logging makes implicit assumptions about the locking protocol.
Write-ahead logging requires strict two-phase locking, and will not
operate correctly with non-strict two-phase locking --page236&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;真正有意思的来了，我看了很多书，原子性，隔离性都讲的很多，但是当原子性遇到隔离性呢？
如果要做到 WAL，那么在回滚事务的时候，可能存在一种情况是把已经修改的内容给修改回去。这就要求事务必须是
严格两阶段锁的。在一个非严格的状态下，一旦一个 x 锁被释放了，在同一事务内，是不可以再得到这个 x 锁去回滚数据的。
所以WAL的隐含前提就是，严格两阶段锁的。这段挺精彩的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perhaps the most noticeable changes in this space are
due to the rapidly dropping price of RAM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据库技术和相关论文在现在看来已经是非常成熟了，唯一值得注意的区别就是内存白菜价了。所以带来了这么多内存数据库嘛~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As should be clear from this paper, modern commercial database systems
are grounded both in academic research and in the experiences
of developing industrial-strength products for high-end customers. The
task of writing and maintaining a high-performance, fully functional
relational DBMS from scratch is an enormous investment in time and
energy. Many of the lessons of relational DBMSs, however, translate
over to new domains. Web services, network-attached storage, text and
e-mail repositories, notification services, and network monitors can all
benefit from DBMS research and experience. Data-intensive services
are at the core of computing today, and knowledge of database system
design is a skill that is broadly applicable, both inside and outside the
halls of the main database shops. These new directions raise a number
of research problems in database management as well, and point the
way to new interactions between the database community and other
areas of computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段是结语，没啥好说的，直接贴上来。&lt;br /&gt;
文章原文来自http://120.52.72.51/perspectives.mvdirona.com/c3pr90ntcsf0/content/binary/ArchitectureOfDatabaseSystem.pdf&lt;br /&gt;
看完后给我感觉是第6章值得一看，前1-3章的话说实话和数据库没太大关系，是个操作系统上的涉及 cpu 和 io 的应用都会涉及。
第4章讲 query 的，这部分其实是编译原理的知识，和数据库关系不大。第5章没什么干货。
第6章是真正数据库相关的内容，概括的比较全面，比『数据库系统基础 高级篇』要实践一点，比『MySQL技术内幕innodb存储引擎 』要理论一点。&lt;/p&gt;</summary><category term="reading"></category></entry><entry><title>Member functions in Python</title><link href="/debug/member_function_in_python.html" rel="alternate"></link><updated>2016-02-03T14:51:01+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-02-03:debug/member_function_in_python.html</id><summary type="html">&lt;p&gt;&lt;code&gt;self.func&lt;/code&gt; is a operation that bind &lt;code&gt;self&lt;/code&gt; to the function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# output: 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are 3 objects ref to &lt;code&gt;foo&lt;/code&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foo&lt;/code&gt; as a local variable, &lt;/li&gt;
&lt;li&gt;a ref in getrefcount&lt;/li&gt;
&lt;li&gt;a ref in &lt;code&gt;foo.b.cb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's more like &lt;code&gt;self.func&lt;/code&gt; is &lt;code&gt;func.self = self&lt;/code&gt;, bind &lt;code&gt;self&lt;/code&gt; to the function.&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>SSCursor in MySQL</title><link href="/debug/sscursor_in_mysql.html" rel="alternate"></link><updated>2016-01-19T14:55:49+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-01-19:debug/sscursor_in_mysql.html</id><summary type="html">&lt;p&gt;There are four kinds of cursors available in MySQL client side programming. In this article, I am going to
introduce the difference between &lt;code&gt;Cursor&lt;/code&gt; the normal one and &lt;code&gt;SSCursor&lt;/code&gt; the server side one and how to use &lt;code&gt;SSCursor&lt;/code&gt;.&lt;br /&gt;
First, let's see the definitions of those four cursors in &lt;code&gt;MySQLdb&lt;/code&gt; source code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorStoreResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorTupleRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is the standard Cursor class that returns rows as tuples&lt;/span&gt;
&lt;span class="sd"&gt;    and stores the result set in the client.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DictCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorStoreResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorDictRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a Cursor class that returns rows as dictionaries and&lt;/span&gt;
&lt;span class="sd"&gt;    stores the result set in the client.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SSCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorUseResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorTupleRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a Cursor class that returns rows as tuples and stores&lt;/span&gt;
&lt;span class="sd"&gt;    the result set in the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SSDictCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorUseResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorDictRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a Cursor class that returns rows as dictionaries and&lt;/span&gt;
&lt;span class="sd"&gt;    stores the result set in the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, there are two orthogonal features of cursors in MySQLdb. &lt;code&gt;CursorDictRowsMixIn/CursorTupleRowsMixIn&lt;/code&gt; controls result type and 
&lt;code&gt;CursorStoreResultMixIn/CursorUseResultMixIn&lt;/code&gt; which we will focus on in this article controls the result will be store in server or client.&lt;br /&gt;
With the definitions, we know that &lt;code&gt;SSCursor&lt;/code&gt; stores result in the server rather than in the client.&lt;/p&gt;
&lt;h3&gt;server side VS client side&lt;/h3&gt;
&lt;p&gt;Two simple flows show how they works.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client side&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;# mysql_store_result&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce_part_result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# find part of results that can be filled into a network package&lt;/span&gt;
    &lt;span class="n"&gt;fill_network_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_network_package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;server side&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  # mysql_use_result
  while(True):
    result = produce_part_result() # find part of results that can be filled into a network package

    wait_until_the_client_invoke_`mysql_fetch_row()`

    fill_network_package(result)
    send_network_package
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, the MySQL server will not store results in server even if a &lt;code&gt;SSCursor&lt;/code&gt; is used, it will produce the part of results before fill them into 
the network packages. So don't worry the memory use of the server when use &lt;code&gt;SSCursor&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;how to use SSCursor&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSCursor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is a trap that &lt;code&gt;commit&lt;/code&gt; should be invoked after all of the results have been sent to client. Otherwise, 
&lt;code&gt;2014, "Commands out of sync; you can't run this command now"&lt;/code&gt; error will be raised.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you get Commands out of sync; you can't run this command now in your client code, you are calling client functions in the wrong order.
This can happen, for example, if you are using mysql_use_result() and try to execute a new query before you have called mysql_free_result(). It can also happen if you try to execute two queries that return data without calling mysql_use_result() or mysql_store_result() in between.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;commit&lt;/code&gt; is also a query, or we can say request, so the program should read all of the results then invoke &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;advantages and disadvantages of using SSCursor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Less memory use in the client.&lt;/li&gt;
&lt;li&gt;Get the first row more quickly.&lt;/li&gt;
&lt;li&gt;The whole results sending will be slower.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="MySQL"></category><category term="Python"></category></entry><entry><title>2015年终总结</title><link href="/talk/2015_all.html" rel="alternate"></link><updated>2016-01-02T00:41:47+08:00</updated><author><name>Kamushin</name></author><id>tag:,2016-01-02:talk/2015_all.html</id><summary type="html">&lt;h3&gt;笔记&lt;/h3&gt;
&lt;p&gt;2015年共记录和收集了295条笔记，涉及了支持向量机，数据库理论，理财，读书，Python，Java，Js，Docker，Vim，Coroutine，Paxos。 &lt;br /&gt;
第一篇于2015-1-1，支持向量机&lt;br /&gt;
最后一篇于2015-12-31，ovrelayfs &lt;br /&gt;
值得庆幸的是即使上班后，我也保持着对未知的渴望，令人可惜的是，这些知识并没有在我手上发挥多少作用。     &lt;/p&gt;
&lt;h3&gt;读书&lt;/h3&gt;
&lt;p&gt;现在读的书不多了，因为太想接受短平快的知识。书看不进。今年寥寥几本。完成度也各有不同   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;effective cpp 100% 讲 cpp 的好书，虽然我现在并不用 cpp&lt;/li&gt;
&lt;li&gt;深入 cpp 对象内存模型 30% 同学推荐的好书，满足了我的猎奇心理。&lt;/li&gt;
&lt;li&gt;做空 30% 这是本经济学大师写的小说，读起来还算有趣。可惜我不懂股市，所以对其中的一些东西并没什么感触。&lt;/li&gt;
&lt;li&gt;阴兽 100% 这是江户川的中篇推理小说集。收录了几部变格推理作品。这几篇都和男女有关，杀人方式也相当变态，有种怪谈小说的感觉。&lt;/li&gt;
&lt;li&gt;边锋 80% 一本讲诉音乐、电影、体育等文娱巨星的传记策。&lt;/li&gt;
&lt;li&gt;解忧杂货铺 70% 东野圭吾的，不是侦探小说，不过也算有意思。&lt;/li&gt;
&lt;li&gt;MySQL技术内幕innodb存储引擎 100% 非常赞的技术书，手不释卷。&lt;/li&gt;
&lt;li&gt;数据库系统基础 高级篇 英文注释本 60% 略偏理论，不过很多地方让我茅塞顿开。&lt;/li&gt;
&lt;li&gt;奥巴马演讲中英文对照 50% 看奥巴马的演讲稿简直是享受&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;游历&lt;/h3&gt;
&lt;p&gt;工作后就没出去玩过...工作前4月份去了趟 nz， 印象最深的几个地方是皇后镇，fox glacier， matamata。 虽然没钱住 hotel，
住的是 backpacker，但是环境完全碾压国内的快捷酒店。不过被冰川风一吹就感冒了，感叹自己体质太差。虽然今年有立志锻炼身体
却也没坚持多久，希望来年能多坚持几天吧。  &lt;/p&gt;
&lt;h3&gt;博客&lt;/h3&gt;
&lt;p&gt;偶尔翻看自己大二时在 csdn 上写的博客，有些知识我都不记得原来我曾学过，于是下决心要重拾博客。现在用的是 pelican 在 github.io 上写
博客，总计写了18篇，有长篇大论也有灵感的乍现，当然也有啥都不是的一坨..渐渐逼自己养成用英语写博客的习惯，虽然还是naïve。&lt;br /&gt;
一年多前写了一篇分析 tornado 源码的文章，今年年末突然又有了看它的兴趣，才发现当时自己的理解实在是不到位，于是又重写了一篇。算是给自己一个交代。  &lt;/p&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;第一年的工作，技术上没遇到什么挑战，挑战主要还是来自为人处事上。可能是习惯了大学里混的熟的大家都是同类人，在工作时难免遇到一些我不习惯的事情。
比如大学里大家的目的不是做事，而是学习，所以我们会就一个技术问题纠缠不休，会互相介绍新学到的东西。 可这一切在公司是不一样的，公司里更多的人 focus 在
做事情上，怎么把事情做完，而不是通过技术手段漂亮干净利落的做事，当然更遑论新知识了。&lt;br /&gt;
我自己也有很多想反省的地方，有时候话说的太直太不给情面，当我以为我们在讨论技术的时候可能别人只是想快点把手头的事情搞完。人与人是不同的，我不能要求每个技术岗位
的人都有着对技术的热爱，我应该学习的是如何听懂别人的request，并提供给别人尽可能恰当的 response。&lt;br /&gt;
当然很多问题可以归约为心态问题，希望来年的自己能有个更好的心态吧。&lt;/p&gt;
&lt;h3&gt;剁手&lt;/h3&gt;
&lt;p&gt;今年买的最值的东西当属 qc20i，其次是 duck 2087s。&lt;br /&gt;
买的最不值的当然还是各种衣服。。。&lt;/p&gt;
&lt;h3&gt;音乐&lt;/h3&gt;
&lt;p&gt;作为一个五音不全的人，我都不知道为什么我会有这个总结，大概是忽然迷上了陈粒，以及玩起了 ukulele，但是热情来得快去的也快，我已经忘记把琴扔在哪里了。。&lt;/p&gt;
&lt;h3&gt;总结的总结&lt;/h3&gt;
&lt;p&gt;居然有个总结的总结，就像Python，Ruby 里的 metaclass 一样。 总结的总结只有一句话，又老了一岁，却依然迷茫。&lt;/p&gt;</summary><category term="talk"></category></entry><entry><title>coroutine in Python Tornado and NodeJs</title><link href="/learning/coroutine_in_Python_and_Js.html" rel="alternate"></link><updated>2015-12-30T15:39:07+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-30:learning/coroutine_in_Python_and_Js.html</id><summary type="html">&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;generator&lt;/code&gt; will be the front knowledge of this article. And you should also have some sense of &lt;code&gt;epoll/kqueue&lt;/code&gt; and &lt;code&gt;callback style&lt;/code&gt;.&lt;br /&gt;
Let's enjoy the source code of the implement of coroutine.   &lt;/p&gt;
&lt;h3&gt;Python Tornado&lt;/h3&gt;
&lt;p&gt;A simple async fetch function used by a coroutine in Python, exception handle removed   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TracebackFuture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# TracebackFuture == Future&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# This is a async function&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;future&lt;/code&gt; -- an instance of &lt;code&gt;Future&lt;/code&gt; -- is an object that used to collect and send result to &lt;code&gt;generator&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;A coroutine that uses above &lt;code&gt;fetch&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we all know &lt;code&gt;@gen.coroutine&lt;/code&gt; is a syntax sugar of   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;coroutine&lt;/code&gt; wrapper function, also exception handle removed &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make_coroutine_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace_callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TracebackFuture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# result is a generator if the function is a generator function&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeneratorType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;# if the function is a generator function&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;yielded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# generator.next() will run the code above and right hand of the generator, for our example request here, http.fetch(uri) will run and return yielded(a instance of Future).&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;Runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_yielded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yielded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Runner is like the co lib in Js written by TJ, Runner use a While True rather than recursive, because recursive is slower in Python.&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# or the function is jsut a normal function&lt;/span&gt;
              &lt;span class="k"&gt;pass&lt;/span&gt; 
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the Tornado usage we can learn that the function after &lt;code&gt;yield&lt;/code&gt; can be either a &lt;code&gt;coroutine&lt;/code&gt; or a normal function.   &lt;br /&gt;
Both of them returns a &lt;code&gt;Future&lt;/code&gt;. You can write &lt;code&gt;return Future&lt;/code&gt; by yourself or use &lt;code&gt;@coroutine&lt;/code&gt;. But make sure your normal function is an async function.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Runner.run&lt;/code&gt; function, exception handle removed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_yielded&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;# init of Runner&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c"&gt;# some attrs bind&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_yielded&lt;/span&gt; &lt;span class="c"&gt;# removed some complex logic, just show the basic logic of running the `request` generator.&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c"&gt;# io_loop is a epoll based loop, the second function is a callback function when future is finished.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Starts or resumes the generator, running until it reaches a&lt;/span&gt;
&lt;span class="sd"&gt;yield point that is not ready.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;yielded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yielded&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Runner is like the &lt;code&gt;co&lt;/code&gt; lib in Js written by TJ, Runner use a While True rather than recursive, because recursive is slower in Python.  Both of them do the same thing, that is executing the generator unitl it's done.&lt;/p&gt;
&lt;p&gt;First of all, Runner add the future, or we can say the async function &lt;code&gt;fetch&lt;/code&gt; to &lt;code&gt;io_loop&lt;/code&gt;. If &lt;code&gt;fetch&lt;/code&gt; is finish, itself will invoke the callback function &lt;code&gt;handle_response&lt;/code&gt; to set data to &lt;code&gt;future&lt;/code&gt;. And the &lt;code&gt;io_loop&lt;/code&gt; will invoke another callback function &lt;code&gt;lambda f: self.run()&lt;/code&gt; to run the function &lt;code&gt;run&lt;/code&gt; to get the &lt;code&gt;result&lt;/code&gt; from &lt;code&gt;future&lt;/code&gt; by &lt;code&gt;value = future.result()&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; to the generator by &lt;code&gt;yield = gen.send(value)&lt;/code&gt; and start the next block of the generator function if exists until the whole function is stoped and return a &lt;code&gt;StopIteration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let us figure out the effect of each object: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generator function: a function with yield statement&lt;/li&gt;
&lt;li&gt;generator: invoke a generator function will return a generator&lt;/li&gt;
&lt;li&gt;coroutine: a wrapper function to wrapper a generator function. It will create a runner to run the generator.&lt;/li&gt;
&lt;li&gt;Future: used to collect and get result, it's a result container.&lt;/li&gt;
&lt;li&gt;Runner: it will register the future to &lt;code&gt;io_loop&lt;/code&gt; and send result back to generator, and repeats unitl generator is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;</summary><category term="coroutine"></category></entry><entry><title>Python开发经验--从问题入手</title><link href="/learning/python_pro_zh_cn.html" rel="alternate"></link><updated>2015-12-23T10:49:26+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-23:learning/python_pro_zh_cn.html</id><summary type="html">&lt;h3&gt;上下文管理&lt;/h3&gt;
&lt;p&gt;如果你要做一件事情&lt;code&gt;do_sth()&lt;/code&gt;，在这之前，需要连接数据库，需要持有文件锁。那么你很可能这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;getfilelock&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;do_sth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;releasefilelock&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果&lt;code&gt;do_sth&lt;/code&gt;在 N 个地方出现呢？如果我策略修改了，不再需要&lt;code&gt;filelock&lt;/code&gt; 了呢？是不是需要去改这 N 个地方？&lt;br /&gt;
花了一下午去修改了 N 个地方，测试了几次终于没有遗漏后，你发现这个做法多么低效，于是你终于想起来用一个函数去做这件事情。&lt;br /&gt;
你把代码写成了这样  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;do_sth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;do_sth&lt;/code&gt;所在的 N 个地方，都写满了 &lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; 这一系列和业务逻辑无关的代码, 这使得我们的代码变得冗长。
即使你不在乎自己过了两个月后是否还愿意看这段代码，至少你要照顾下帮你 review 代码的人，一个函数写了500行还能 review 吗？
我认为一个程序员写代码的过程，就是从复杂的逻辑中进行抽象的过程，如果不进行抽象，那么就不是写代码，而是在做翻译。我们来看看这里有什么可以抽象的。&lt;br /&gt;
&lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; 这些是在做什么？是在预备和释放一个可以&lt;code&gt;do_sth&lt;/code&gt;的环境，也就是我们常说的上下文管理。&lt;br /&gt;
Python 提供了&lt;code&gt;with&lt;/code&gt;语句来帮助我们管理上下文。代码变成了这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_sth&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
        &lt;span class="n"&gt;getfilelock&lt;/span&gt;()
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;() &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在帮你 review 代码的人，只会在那 N 个&lt;code&gt;do_sth&lt;/code&gt; 存在的地方，看到  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  with A() as a:
    a.do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很显示的使用了上下文进行管理，分离了业务逻辑和具体实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.
  Simple is better than complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个常见的做法是使用&lt;code&gt;__del__&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
        &lt;span class="n"&gt;getfilelock&lt;/span&gt;()

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__del__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
        &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
        &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

&lt;span class="n"&gt;a&lt;/span&gt; =  &lt;span class="n"&gt;A&lt;/span&gt;()
&lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个做法的优点是不需要写&lt;code&gt;with&lt;/code&gt; 语句，缺点是这不是明显的上下文管理，对于 Python/Java 这种带
&lt;code&gt;GC&lt;/code&gt; 的语言来说，是不能手动调用一个对象的析构函数的，即使对象离开了作用域，它依然会因为还没有被&lt;code&gt;GC&lt;/code&gt;而存活。&lt;br /&gt;
所以对于锁这样的，我们需要很快去释放的资源，使用&lt;code&gt;with&lt;/code&gt; 更加的可控。
可能会有人去对比 C++ 中的&lt;code&gt;RAII&lt;/code&gt; 规则，Python中是做不到 &lt;code&gt;RAII&lt;/code&gt; 的, 因为以上原因。&lt;/p&gt;
&lt;h3&gt;生成器&lt;/h3&gt;
&lt;p&gt;一个函数如果在代码段中有 &lt;code&gt;yield&lt;/code&gt; 那么它就从一个函数变成了一个 &lt;code&gt;generator&lt;/code&gt;。生成器的好处是保留了一个上下文在需要时去运算。&lt;br /&gt;
同样从一个实际例子出发：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in range(100000):
    do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码，在什么都没做之前，就产生了一个1-100000这些数字的数组，占用了内存。&lt;br /&gt;
而&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in xrange(100000):
    do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这才是我们知道的C++中的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for(int i = 0; i &amp;lt; 100000; i++) {
    do_sth()
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行一次 &lt;code&gt;do_sth&lt;/code&gt;，再生成一次 i 值。 &lt;br /&gt;
所以&lt;code&gt;xrange&lt;/code&gt;会比&lt;code&gt;range&lt;/code&gt;更省内存。（在 Py2 是这样。Py3中，&lt;code&gt;range&lt;/code&gt; 就是 Py2 的 &lt;code&gt;xrange&lt;/code&gt;。 另外据我所知，不存在 xrange 是 C 实现这么一回事)。
再来一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def fetchmany(self, *args, **kwargs):
    &amp;#39;&amp;#39;&amp;#39;
       A generator to fetch data.
       prams: numRows -&amp;gt; the number of rows to fetch.
    &amp;#39;&amp;#39;&amp;#39;
    cur = self._conn.cursor()  
    numRows = 200
    try:
        cur.execute(*args, **kwargs)
        self._conn.commit()
    except Exception as e:
        self.logger.error(str(e))
        self._conn.rollback()
        return
    while True:
        rows = cur.fetchmany(numRows)
        if rows:
            yield rows
        else:
            cur.close()
            return

for rows in fetchmany(sql):
  do_sth_with_rows(rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这就实现了每次取出200条，消费完再取200条。而不是一次性取到内存中。同时也封装了&lt;code&gt;commit&lt;/code&gt;，&lt;code&gt;rollback&lt;/code&gt;等操作。&lt;/p&gt;
&lt;p&gt;生成器也可以用来构造对称式协程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return 3 random integers between 0 and 9&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Displays a running average across lists of integers sent to it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The running average is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_items_seen&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Produces a set of values and forwards them to the pre-defined consumer&lt;/span&gt;
&lt;span class="sd"&gt;    function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Produced {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Producing...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中， 不需要队列，就做到了一个一对一的生产与消费。当然这个1对1的并没有什么实际意义。对于协程和生成器的作用，如果感兴趣，可以看看&lt;code&gt;Tornado&lt;/code&gt;的实现。&lt;/p&gt;
&lt;h3&gt;Exception&lt;/h3&gt;
&lt;p&gt;这块Python和其他语言没什么不同的，拿出来讲是因为看到很多代码里充满了魔数。&lt;br /&gt;
比如 &lt;code&gt;return 'unknown'&lt;/code&gt;. 既然是&lt;code&gt;unknown&lt;/code&gt;就应该抛出异常。而不是用一堆的常量字符串在各个函数直接传来传去。&lt;br /&gt;
类似的例子还有&lt;code&gt;return 'ok'&lt;/code&gt;, &lt;code&gt;return 'mysql'&lt;/code&gt;, &lt;code&gt;return 2&lt;/code&gt;. &lt;br /&gt;
另外尽可能抛出和接收特定的异常。&lt;/p&gt;
&lt;h3&gt;Functional Programming&lt;/h3&gt;
&lt;p&gt;Python 其实是不怎么 FP 的，不过一些基本的 FP 支持还是有的。&lt;br /&gt;
比如高阶函数，&lt;code&gt;map reduce filter&lt;/code&gt;。&lt;br /&gt;
用&lt;code&gt;map reduce filter&lt;/code&gt; 可以更好的做抽象。&lt;br /&gt;
&lt;code&gt;reduce(lambda x, y: x + y, query_res)&lt;/code&gt;&lt;br /&gt;
很简单就能看出，虽然我不知道具体 &lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; 是什么，但是我知道，这是把 &lt;code&gt;query_res&lt;/code&gt; 中的每个值加到一起。&lt;br /&gt;
不用去管&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;的类型，只需要他们支持&lt;code&gt;+&lt;/code&gt;操作。这种编程思维可以再次把业务逻辑和实现分开。&lt;/p&gt;
&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;装饰器算是 Python 的一大亮点。看下面这个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  begin = time.time()
  do_sth()
  end = time.time()
  print &amp;#39;do sth used %s second&amp;#39; % (end-begin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;业务逻辑里混杂着统计时间的逻辑。添加要加三行，什么时候不要了，又要删三行。
如果用上装饰器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def logtime(func):
    @wraps(func)
    def wrapper(*args, **kwds):
        start_time = time.time()
        ret = func(*args, **kwds)
        use_time = time.time() - start_time
        if use_time &amp;gt; 1.0:
            logging.info(&amp;quot;%s use %s s&amp;quot;, func.__name__, use_time)
        return ret
    return wrapper

@logtime
def do_sth():
  ...



do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码被调用的时候，不需要知道做了时间的统计，也不需要把统计代码混杂在业务逻辑中。 &lt;br /&gt;
考虑下面的代码，用 Java 应该怎么实现？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def make_spin(spin_style=Default, words=&amp;quot;&amp;quot;):
    spinner = Spinner(spin_style)
    queue = Queue()

    def add_queue(func):
        @wraps(func)
        def wrapper():
            func()
            queue.put_nowait(1)
        return wrapper

    def decorator(func):
        @wraps(func)
        def wrapper():
            process = Process(target=add_queue(func))
            process.start()
            while queue.empty():
                print(text_type(&amp;quot;\r{0}    {1}&amp;quot;).format(spinner.next(), words),
                      end=&amp;quot;&amp;quot;)
                sys.stdout.flush()
                time.sleep(0.1)
            print(&amp;#39;&amp;#39;)
        return wrapper
    return decorator
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Java中同样也有&lt;code&gt;@&lt;/code&gt;字符的运用，不同的是，Java中那个叫&lt;code&gt;annotation&lt;/code&gt;, 也就是注解。 
注解是编译期的，它是用来做反射的，也就是提供给外部一些关于我本身信息的。和 Python 的用法没有关系。  &lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;下面直接用一些例子来显示 Python2中的 Unicode 和 Str 的关系。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;我&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;我&amp;#39;.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; b
u&amp;#39;\u6211&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;utf-8&amp;#39;)
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;gbk&amp;#39;)
&amp;#39;\xce\xd2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很明显可以看出，Python2中，str 类型其实是 byte 字节流。而 Unicode 类型则是表示了 Unicode 字符号。&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Compare assert exception in should(JavaScript) and unittest(Python)</title><link href="/learning/compare_assert_exception.html" rel="alternate"></link><updated>2015-12-22T15:16:23+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-22:learning/compare_assert_exception.html</id><summary type="html">&lt;h3&gt;should&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;should&lt;/code&gt;, exception is asserted like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should throw when n isnt Number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n should be a Number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This library adds an attribute &lt;code&gt;should&lt;/code&gt; to  &lt;code&gt;Object&lt;/code&gt;. The &lt;code&gt;should&lt;/code&gt; attribute includes a bunch of assert functions. With this, you can do
&lt;code&gt;(5).should.above(3)&lt;/code&gt;. It will be even harder in Python, because types defined in C cannot be monkeypatched.
The implement of &lt;code&gt;should.throw&lt;/code&gt; is a simple &lt;code&gt;try/catch&lt;/code&gt;.  &lt;/p&gt;
&lt;h3&gt;unittest&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;assertRaises&lt;/code&gt; in &lt;code&gt;unittest&lt;/code&gt;, exception is asserted like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaisesRegexp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;literal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;XYZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's much more simple than another way, because we don't need to pass test function as an argument to the assert function, no matter the argument called &lt;code&gt;this&lt;/code&gt; lol.&lt;br /&gt;
Exception is not catched by a &lt;code&gt;try/except&lt;/code&gt; statement, but in &lt;code&gt;__exit__&lt;/code&gt; context manager.&lt;/p&gt;</summary><category term="unittest"></category></entry><entry><title>Write Python like a Pro</title><link href="/learning/python_pro.html" rel="alternate"></link><updated>2015-12-21T17:26:57+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-21:learning/python_pro.html</id><summary type="html">&lt;h3&gt;Context Managers&lt;/h3&gt;
&lt;p&gt;If you have a function &lt;code&gt;do_sth()&lt;/code&gt;, before invoking this method, it needs connect to Database and get filelock. And code maybe like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    db.connect()
    getfilelock()
    do_sth()
  except:
    ...
  finally:
    releasefilelock()
    db.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if &lt;code&gt;do_sth&lt;/code&gt; be called at many palces? If filelock is now don't need, code should be rewrited at each palce when &lt;code&gt;do_sth&lt;/code&gt; is called. &lt;br /&gt;
After wasting a whole afternoon rewriting the code, you find it's useful to have a function to do this. Then code will be:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    prepare()
    do_sth()
  except:
    ...
  finally:
    close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each palce &lt;code&gt;do_sth&lt;/code&gt; invoked is full of &lt;code&gt;prepare/close&lt;/code&gt;. And both of them has no relation with bussiness logic. It makes the code longer and longer.&lt;br /&gt;
Although you don't care about the cofusion you may have when you see these code after 2 months(because the only one line of bussiness logic code is hidden in seven lines of non-business code),
you should be friendly to those who review your code. A funciton more than 500 lines is horrible. I think writing code is an action to get abstraction from complex logic, if there is no 
abstraction in code, it's not coding but translating.
What &lt;code&gt;prepare/close&lt;/code&gt; doed indeed? They are preapre or release an environment to &lt;code&gt;do_sth&lt;/code&gt;, that is context.&lt;br /&gt;
Python use &lt;code&gt;with&lt;/code&gt; statement to manage context.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_sth&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
      &lt;span class="n"&gt;getfilelock&lt;/span&gt;()
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;() &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the reviewer will only see&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  with A() as a:
    a.do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Context manager is uesd explictly. Bussiness logic and impelement are splited.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.
  Simple is better than complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anthor common way is using &lt;code&gt;__del__&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
      &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
          &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
          &lt;span class="n"&gt;getfilelock&lt;/span&gt;()

      &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__del__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
          &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
          &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;a&lt;/span&gt; =  &lt;span class="n"&gt;A&lt;/span&gt;()
  &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The good part of this way is no need of wiring &lt;code&gt;with&lt;/code&gt;. But it's not a explicit context manager.
To &lt;code&gt;GC&lt;/code&gt; languages like Python or Java, there is no way to invoke a destructor method.
Although object has leaved the scope, if it was not cleaned by &lt;code&gt;GC&lt;/code&gt;, the resource it takes will not be released.&lt;br /&gt;
If the resource is database connect, close lately is acceptable, but to resource like &lt;code&gt;mutex&lt;/code&gt;, we need &lt;code&gt;with&lt;/code&gt; statement to release it immediately.&lt;/p&gt;
&lt;h3&gt;Generation&lt;/h3&gt;
&lt;p&gt;A function with &lt;code&gt;yield&lt;/code&gt; is a generator. Generation maintains a context to eval result when it is need.
For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in range(100000):
      do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It creates an array of 1-100000 before &lt;code&gt;do_sth&lt;/code&gt; which will make a waste of memory. 
Another loop with &lt;code&gt;xrange&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in xrange(100000):
      do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is what we know in C++, &lt;code&gt;do_sth&lt;/code&gt; once and then &lt;code&gt;i++&lt;/code&gt;, loops. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for(int i = 0; i &amp;lt; 100000; i++) {
      do_sth()
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So &lt;code&gt;xrange&lt;/code&gt; will use less memory than &lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def fetchmany(self, *args, **kwargs):
        &amp;#39;&amp;#39;&amp;#39;
           A generator to fetch data.
        &amp;#39;&amp;#39;&amp;#39;
        cur = self._conn.cursor()  
        numRows = 200
        try:
            cur.execute(*args, **kwargs)
            self._conn.commit()
        except Exception as e:
            self.logger.error(str(e))
            self._conn.rollback()
            return
        while True:
            rows = cur.fetchmany(numRows)
            if rows:
                yield rows
            else:
                cur.close()
                return

for rows in fetchmany(sql):
    do_sth_with_rows(rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;fetchmany&lt;/code&gt; is a generator, and a generator is iteratable. Only 200 rows will be taken in a patch, not all of the results.  &lt;/p&gt;
&lt;p&gt;Generator can also be used to make a co-routine.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return 3 random integers between 0 and 9&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Displays a running average across lists of integers sent to it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The running average is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_items_seen&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Produces a set of values and forwards them to the pre-defined consumer&lt;/span&gt;
&lt;span class="sd"&gt;    function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Produced {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Producing...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More useful cases in &lt;code&gt;Tornado&lt;/code&gt;.  &lt;/p&gt;
&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;Decorator is a useful syntax sugar to split implement detail.
For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  begin = time.time()
  do_sth()
  end = time.time()
  print &amp;#39;do sth used %s second&amp;#39; % (end-begin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In above code, profile code is mixed in logic code.&lt;br /&gt;
By decorator  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def logtime(func):
    @wraps(func)
    def wrapper(*args, **kwds):
        start_time = time.time()
        ret = func(*args, **kwds)
        use_time = time.time() - start_time
        if use_time &amp;gt; 1.0:
            logging.info(&amp;quot;%s use %s s&amp;quot;, func.__name__, use_time)
        return ret
    return wrapper

@logtime
def do_sth():
  ...



do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When &lt;code&gt;do_sth&lt;/code&gt; be invoked, the caller don't need to know about &lt;code&gt;logtime&lt;/code&gt;.
There is also a &lt;code&gt;@&lt;/code&gt; used in Java. But that is a &lt;code&gt;annotation&lt;/code&gt;, it's not run-time but a complie time reflect.&lt;br /&gt;
That has no relation with decorator in Python.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Here are some code to show the relation with &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;我&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;我&amp;#39;.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; b
u&amp;#39;\u6211&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;utf-8&amp;#39;)
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;gbk&amp;#39;)
&amp;#39;\xce\xd2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python2, &lt;code&gt;str&lt;/code&gt; is byte array and &lt;code&gt;unicode&lt;/code&gt; is charset code of the character.&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>New fxg for me</title><link href="/tool/fxg_new.html" rel="alternate"></link><updated>2015-12-09T09:39:29+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-09:tool/fxg_new.html</id><summary type="html">&lt;p&gt;&lt;a href="http://kamushin.github.io/tool/fxg.html"&gt;previos article about fxg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fxg&lt;/code&gt; means &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; then &lt;code&gt;grep&lt;/code&gt;. It has a insufferable performace, so &lt;br /&gt;
I use &lt;code&gt;ag&lt;/code&gt; to instead, after forking some tools made by &lt;a href="https://github.com/lilydjwg/search-and-view"&gt;lilydjwg&lt;/a&gt;
The tool chain is used for finding pattern in files and opening file by vim.
I rewrite a simple version of &lt;code&gt;vv&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/fxg.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;file_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;
            &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Insert of writing regex pattern to match the complex colored output, I call ag the second time to gen a un-colored output to log file.
And I also add a &lt;code&gt;-G&lt;/code&gt; for file pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color $2 | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup $2 | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Update: 15-12-9&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ag&lt;/code&gt; on my MacOSX has an unstable sorting result. It makes the twice call of &lt;code&gt;Ag&lt;/code&gt; return different order.&lt;br /&gt;
So I add &lt;code&gt;sort&lt;/code&gt; to this command. 
&lt;code&gt;-0&lt;/code&gt; or &lt;code&gt;-print0&lt;/code&gt; will take &lt;code&gt;space&lt;/code&gt; in filename as a special character.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color -0 $2 | sort | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup -0 $2 | sort | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Ag"></category><category term="Linux"></category></entry><entry><title>Do not use LOB in Oracle(OLTP) -- record an optimization experience</title><link href="/debug/Do-not-use-lob.html" rel="alternate"></link><updated>2015-12-08T01:52:18+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-08:debug/Do-not-use-lob.html</id><summary type="html">&lt;h2&gt;Front knowledge&lt;/h2&gt;
&lt;h3&gt;LOB in Oracle&lt;/h3&gt;
&lt;p&gt;LOB is used in Oracle to store text logger than 4000.  &lt;br /&gt;
We don't use Oracle in a OLTP system. &lt;br /&gt;
Conside of RT and IO, we choose some other ways to provide log text. For example, CDN.&lt;/p&gt;
&lt;h3&gt;LOB in cx_Oracle&lt;/h3&gt;
&lt;p&gt;As mentioned in &lt;a href="http://kamushin.github.io/learning/python_oracle.html"&gt;Some tricks when using cx_Oracle&lt;/a&gt;, we must convert LOB to string for each line we fetched.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  self._cursor.execute(sql, *args)
    def fix_lob(row):
        def convert(col):
            if isinstance(col, cx_Oracle.LOB):
                return str(col)
            else:
                return col

        return [convert(c) for c in row]

  return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it will bring out a significant cost of CPU time in Python, which you chould see later.&lt;/p&gt;
&lt;h2&gt;Profile&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;CProfile&lt;/code&gt; to profile my Python code. It's very easy to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;CProfile&lt;/span&gt;
  &lt;span class="n"&gt;CProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unittest....&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is part of my profile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="nx"&gt;ncalls&lt;/span&gt;  &lt;span class="nx"&gt;tottime&lt;/span&gt;  &lt;span class="nx"&gt;percall&lt;/span&gt;  &lt;span class="nx"&gt;cumtime&lt;/span&gt;  &lt;span class="nx"&gt;percall&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;209391&lt;/span&gt; &lt;span class="mf"&gt;1286.084&lt;/span&gt;  &lt;span class="mf"&gt;0.006&lt;/span&gt; &lt;span class="mf"&gt;1286.559&lt;/span&gt;    &lt;span class="mf"&gt;0.006&lt;/span&gt;   &lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4630&lt;/span&gt;   &lt;span class="mf"&gt;346.679&lt;/span&gt;   &lt;span class="mf"&gt;0.075&lt;/span&gt;  &lt;span class="mf"&gt;346.679&lt;/span&gt;    &lt;span class="mf"&gt;0.075&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;executemany&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cx_Oracle.Cursor&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="mi"&gt;4654&lt;/span&gt;   &lt;span class="mf"&gt;90.788&lt;/span&gt;    &lt;span class="mf"&gt;0.020&lt;/span&gt;   &lt;span class="mf"&gt;90.788&lt;/span&gt;    &lt;span class="mf"&gt;0.020&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cx_Oracle.Connection&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;200k times call of &lt;code&gt;convert&lt;/code&gt; cost 2000+ sec. Is't because Python &lt;code&gt;LOB=&amp;gt;str&lt;/code&gt; is very slow.  &lt;br /&gt;
4k times of &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;executemany&lt;/code&gt; because of the lag between two servers.&lt;/p&gt;</summary><category term="Oracle"></category><category term="Python"></category></entry><entry><title>Difference between ArrayList and Arrays.asList() in Java</title><link href="/learning/java-arrayList.html" rel="alternate"></link><updated>2015-12-01T14:17:02+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-01:learning/java-arrayList.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Arrays.asList&lt;/code&gt; does not return an &lt;code&gt;ArrayList&lt;/code&gt; instance which has an &lt;code&gt;add&lt;/code&gt; method implemented correctly. &lt;br /&gt;
It returns a List that is a "view" onto the array - a wrapper that makes the array look like a list&lt;br /&gt;
Changes to the returned list &lt;code&gt;write through&lt;/code&gt; to the array&lt;br /&gt;
Since the returned instance is a fixed-size array, the &lt;code&gt;add&lt;/code&gt; method always throw an UnsupporedOperationException.&lt;br /&gt;
If want to use &lt;code&gt;add&lt;/code&gt; method  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  new ArrayList(Arrays.asList(myArray)); //copies the content of the array to a new ArrayList 
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Java"></category></entry><entry><title>Some tricks when using cx_Oracle</title><link href="/learning/python_oracle.html" rel="alternate"></link><updated>2015-11-27T16:01:57+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-11-27:learning/python_oracle.html</id><summary type="html">&lt;p&gt;cx_Oracle is a Python module that enables access to Oracle databases.&lt;br /&gt;
However, users may have confusion due to some fetures of this module.&lt;/p&gt;
&lt;h4&gt;Thread safe&lt;/h4&gt;
&lt;p&gt;The default setting of cx_Oracle is not thread-safe.  &lt;br /&gt;
So if user have multiple threads, make sure that specifying &lt;code&gt;threaded=True&lt;/code&gt; when creating the connection.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;conn = cx_Oracle.connect(user + '/' + passwd + "@" + host + "/" + db, threaded=True)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;Otherwise, the program will crash with error message like    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ORA-24550: signal received: [si_signo=11] [si_errno=0] [si_code=2] [si_addr=0000000000000000]&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Fetch LOB column&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Internally, Oracle uses LOB locators which are allocated based on the cursor array size. Thus, it is important that the data in the LOB object be manipulated before another internal fetch takes place. The safest way to do this is to use the cursor as an iterator. In particular, do not use the fetchall() method. The exception “LOB variable no longer valid after subsequent fetch” will be raised if an attempt to access a LOB variable after a subsequent fetch is detected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use curosr as an iterator rather than use &lt;code&gt;fetchall()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;self._cursor.execute(sql, *args)
def fix_lob(row):
    def convert(col):
        if isinstance(col, cx_Oracle.LOB):
            return str(col)
        else:
            return col

    return [convert(c) for c in row]

return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category></entry><entry><title>Use webpack together with browser-sync</title><link href="/tool/webpack_and_browser-sync.html" rel="alternate"></link><updated>2015-10-28T16:56:48+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-28:tool/webpack_and_browser-sync.html</id><summary type="html">&lt;p&gt;Here are some tips about using &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;Browsersync&lt;/code&gt; to improve working speed.&lt;/p&gt;
&lt;h3&gt;Browsersync&lt;/h3&gt;
&lt;p&gt;Browsersync makes your browser testing workflow faster by synchronising URLs, interactions and code changes across multiple devices. &lt;br /&gt;
&lt;code&gt;npm install browser-sync@2.7.1 -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Proxy&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;browser-sync start --proxy localhost:8888 --port 4000 --files index.html --files src/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Used to proxy ajax request to back-end server.&lt;/p&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;
&lt;p&gt;With webpack, don't need &lt;code&gt;require.js&lt;/code&gt; and &lt;code&gt;require-react-plugin&lt;/code&gt; loading in &lt;code&gt;index.html&lt;/code&gt;. Very useful to me. &lt;br /&gt;
&lt;code&gt;npm install webpack -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Work together&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;npm install -g browser-sync-webpack-plugin&lt;/code&gt;
And config &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var BrowserSyncPlugin = require(&amp;#39;browser-sync-webpack-plugin&amp;#39;);
module.exports = {
entry: &amp;#39;./src/js/index.js&amp;#39;,
output: {
    publicPath: &amp;#39;./dist/&amp;#39;,
    path: &amp;#39;./dist/&amp;#39;,
    filename: &amp;#39;bundle.js&amp;#39;,
    pathinfo: true
},
resolve: {
    root: &amp;#39;.&amp;#39;
},
module: {
    loaders: [
    {test: /\.js/, loader: &amp;#39;jsx-loader?harmony&amp;#39;}
    ]
},
plugins: [
    new BrowserSyncPlugin({
    host: &amp;#39;localhost&amp;#39;,
    port: 4000,
    proxy: &amp;#39;localhost:8888&amp;#39;,
    files: &amp;#39;src/*&amp;#39;,
    files: &amp;#39;index.html&amp;#39;
})  
]
};
&lt;/pre&gt;&lt;/div&gt;</summary><category term="front-end"></category></entry><entry><title>MySQL 优化学习之路</title><link href="/learning/mysql_opti.html" rel="alternate"></link><updated>2015-10-25T22:56:42+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-25:learning/mysql_opti.html</id><summary type="html">&lt;h3&gt;Overview&lt;/h3&gt;
&lt;h4&gt;DB Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;table structure: column data type | table with few or many columns&lt;/li&gt;
&lt;li&gt;right indexs&lt;/li&gt;
&lt;li&gt;storage engine&lt;/li&gt;
&lt;li&gt;data format: compression or not&lt;/li&gt;
&lt;li&gt;locking strategy&lt;/li&gt;
&lt;li&gt;caching size&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Hardware Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Disk seeks 10ms&lt;/li&gt;
&lt;li&gt;Disk reading and writing. easier to optimize than disk seeks&lt;/li&gt;
&lt;li&gt;CPU cycles large tables compared to the amount of memory ???&lt;/li&gt;
&lt;li&gt;Memory bandwith when CPU needs more data to fit in CPU cache ???&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use explain&lt;/li&gt;
&lt;li&gt;indexs&lt;/li&gt;
&lt;li&gt;avoid full table scan&lt;/li&gt;
&lt;li&gt;analyze table periodically&lt;/li&gt;
&lt;li&gt;read-only transactions 5.6.4+ // had read an article on ATA about this&lt;/li&gt;
&lt;li&gt;avoid transforming query hard to read, optimizer will do this&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SELECT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cover index: In some cases, MySQL can read rows from the index without even consulting the data file. If all columns used from the index are numeric, only the index tree is used to resolve the query. // need numeric ? TODO&lt;/li&gt;
&lt;li&gt;range index&lt;ul&gt;
&lt;li&gt;MySQL does not support merging ranges， use union&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; To permit use of index dives for comparisons of up to N equality ranges, set &lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; to N + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index extensions: add pk after each secondary index  5.6.9&lt;/li&gt;
&lt;li&gt;two kinds of filesort&lt;/li&gt;
&lt;li&gt;group by: loose index scan vs tight index scan, depends on distribution of column(cardinality).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;INSERT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use INSERT statements with multiple VALUES lists to insert several rows at a time will be faster than using separate single-row INSERT statements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bulk_insert_buffer_size&lt;/code&gt; for large INSERT&lt;/li&gt;
&lt;li&gt;insert values explicitly only when the value to be inserted differs from the default.&lt;/li&gt;
&lt;li&gt;Bulk insert speed up (https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-bulk-data-loading.html)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;same with INSERT&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DELETE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;truncate&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Optimizing INFORMATION_SCHEMA Queries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Try to use constant lookup values for database and table names in the WHERE clause&lt;/li&gt;
&lt;li&gt;Write queries that minimize the number of table files that must be opened (???)&lt;/li&gt;
&lt;li&gt;Use EXPLAIN to determine whether the server can use INFORMATION_SCHEMA optimizations for a query&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Index&lt;/h3&gt;
&lt;p&gt;Index can improve the speed of determining rows which match where statements. But useless indexs are waste of space and time for db to determinie whcih index to use and need more time to create indexs when insert.&lt;/p&gt;
&lt;h4&gt;How MySQL use index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the most seletive indexs&lt;/li&gt;
&lt;li&gt;leftmost prefix of the index&lt;/li&gt;
&lt;li&gt;join: &lt;ul&gt;
&lt;li&gt;use same data type will be faster // varchar and char are the same if their size equal.&lt;/li&gt;
&lt;li&gt;must use the same character set when compare string columns&lt;/li&gt;
&lt;li&gt;comparison of dissimilar column may prevent use of indexs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIN() MAX() of column &lt;code&gt;key_col&lt;/code&gt; will be O(1) if all &lt;code&gt;key_part_N&lt;/code&gt; before &lt;code&gt;key_col&lt;/code&gt; in where statement is constant.&lt;/li&gt;
&lt;li&gt;cover index // here not mention numeric&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Primary Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use numeric pk&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Foreign Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;split low-frequently data into separate table&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Column Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;prefix index &lt;/li&gt;
&lt;li&gt;fulltext for char varchar and text&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Statistic&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expr1 = expr2 is not true when expr1 or expr2 (or both) are NULL&lt;/li&gt;
&lt;/ul&gt;</summary><category term="MySQL"></category></entry><entry><title>Pip 无网络环境安装包</title><link href="/tool/2015-10-20.html" rel="alternate"></link><updated>2015-10-20T22:28:48+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-20:tool/2015-10-20.html</id><summary type="html">&lt;p&gt;在内网部署 Python 的时候, 因为不能用连接到 &lt;code&gt;pip&lt;/code&gt; 源所以仅仅靠 requirement.txt 是不够的.&lt;br /&gt;
我们需要 wheel 这个工具帮我们把需要的依赖先打成本地包.&lt;br /&gt;
&lt;code&gt;pip wheel --wheel-dir=/tmp/wheelhouse tornado&lt;/code&gt;&lt;br /&gt;
这样 tornado 的依赖包就全在 wheelhouse 里了 &lt;br /&gt;
我们面对一个更悲剧的情况, 线上连 &lt;code&gt;pip&lt;/code&gt; 都没, 那么只能先在线下先给装好包.&lt;br /&gt;
&lt;code&gt;pip install --use-wheel --no-index --find-links=/tmp/wheelhouse -t  /tmp/wheelhouse/code tornado&lt;/code&gt;&lt;br /&gt;
这样包就全在 code 里了, 可以直接复制到线上. &lt;strong&gt;要注意编译环境一致和 so 库&lt;/strong&gt;   &lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>当我们在谈论异常时我们在谈论什么?</title><link href="/learning/2015-10-19-2.html" rel="alternate"></link><updated>2015-10-19T23:40:31+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:learning/2015-10-19-2.html</id><summary type="html">&lt;h3&gt;异常是什么&lt;/h3&gt;
&lt;p&gt;异常是一种用来分离程序运行中那1%会走进的&lt;strong&gt;岔路&lt;/strong&gt;的分支控制手段.&lt;/p&gt;
&lt;h3&gt;语言是如何实现它的&lt;/h3&gt;
&lt;p&gt;曾经, 大概在我大三末大四初的时候, 有幸读了本 C 接口与实现, 书里用 &lt;code&gt;setjump &amp;amp; longjmp&lt;/code&gt; 和宏的方式向我展现了如何在 C 语言中实现它.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception is a beautiful goto. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然, sjlj 只是实现异常的一种, 还有基于 table 的方式等等, 更加高效, 在不进入异常时不产生副作用.&lt;/p&gt;</summary><category term="exception"></category></entry><entry><title>把Capslock重定向为Ctrl</title><link href="/nix/Change_caplocks.html" rel="alternate"></link><updated>2015-10-19T23:16:22+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:nix/Change_caplocks.html</id><summary type="html">&lt;p&gt;Capslock这键平时没多大用，而Ctrl则用的非常多，所以把Capslock换成Ctrl也算是个比较常见的需求。&lt;/p&gt;
&lt;p&gt;以前我是把xmodmap里swap脚本小改一下，也算在Arch上能用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最近换了deepin后，这脚本会让Capslock啥也不做。于是找了个更加合理的脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比较一下， 就是少了一行对Control的设置，我猜之前出错的原因是Control_L不能被绑到两个keysym上&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>Mac上遇到了一个Chrome和Safari被劫持的问题</title><link href="/nix/Chrome_be_hijacked.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:nix/Chrome_be_hijacked.html</id><summary type="html">&lt;p&gt;大概是因为下载了恶意的软件, 导致Chrome和Safari打开各种网站都出现广告. 检查过DNS
也更改过DNS, 无效. 目前没找到原因, 只能将就这用FireFox和Chromium, 这俩货没被劫持&lt;/p&gt;</summary><category term="杂事"></category></entry><entry><title>Pelican上增加评论和自动删除文章的一些坑</title><link href="/nix/Pelican.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:nix/Pelican.html</id><summary type="html">&lt;h3&gt;增加评论功能&lt;/h3&gt;
&lt;p&gt;这个网上有很多描述，主要是去disqus注册下，然后设置下配置文件&lt;a href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html"&gt;example&lt;/a&gt;坑主要在于Pelican的默认主题是没有disqus的模板的，所以虽然看到了对disqus的请求，却看不到评论区。需要自己下个比较全的主题。&lt;/p&gt;
&lt;h3&gt;自动删除文件&lt;/h3&gt;
&lt;p&gt;在content里删除了md文件，重新&lt;code&gt;make html&lt;/code&gt;后在output中依然会看到那个md文件生成的html文件。&lt;/p&gt;
&lt;p&gt;一个方法是加入配置&lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;来每次清空output，但是这带来了两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动日期没了 目前无法解决&lt;/li&gt;
&lt;li&gt;版本控制没了，可以通过加入&lt;code&gt;OUTPUT_RETENTION = [".hg", ".git", ".bzr"]&lt;/code&gt;来解决&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pelican"></category></entry><entry><title>用正则来解决grep时行过长的问题</title><link href="/tool/fxg.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:tool/fxg.html</id><summary type="html">&lt;p&gt;之前自己写了个函数用来查找文件中匹配关键字的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg_old(){
    find . -type f -name $1 | xargs grep $2 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是今天在用的时候，发现如果匹配到的行过长的话，输出很难看，而且也不知道哪里匹配到了。&lt;/p&gt;
&lt;p&gt;所以就想能不能对行的长度做限制，但是grep里并没有这个参数选项。于是想到了用正则去控制匹配串。在so上找到了这样的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; fxg(){
    find . -type f -name $1 | xargs grep -oE &amp;quot;.{0,20}$2.{0,20}&amp;quot;
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-o 只输出匹配的部分。 如果只加这个选项，那么就输出N行的$2。&lt;/p&gt;
&lt;p&gt;-E 使用扩展的正则(有人提到用-P，Perl正则，但是在我这里出现错误)&lt;/p&gt;
&lt;p&gt;后面的正则表达式用来匹配前后20个字符。&lt;/p&gt;
&lt;p&gt;这样就满足了我的需求&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>TCP自连接</title><link href="/learning/tcp-self-connect.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:learning/tcp-self-connect.html</id><summary type="html">&lt;p&gt;陈硕的第8节视频介绍了TCP自连接这个特性。&lt;/p&gt;
&lt;p&gt;程序代码类似于:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for i in range(65536):
    try:
        sock = socket.create_connection((&amp;#39;localhost&amp;#39;, port))
        time.sleep(60*60)
    except:
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要是这样的一个逻辑:  &lt;/p&gt;
&lt;p&gt;首先在循环中每次尝试创建连接的时候，TCP会分配一个IP给客户端，这个IP不是每次都随机的而是会自增。在最多尝试了65536或更少次后，一定会恰好和我们输入的port参数重合(如果port没有被占用)，那么就产生了一个客户端连接到自己的现象。要避免这个现象，可以在网络库中进行判断。&lt;/p&gt;</summary><category term="网络编程"></category></entry><entry><title>开始学习陈硕的网络编程课程</title><link href="/learning/test.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:learning/test.html</id><summary type="html">&lt;p&gt;很久前就关注了陈硕的这门课，等着他结课后一次性看完，截止到现在他已经更新了40多节了，
就要结束了，所以开始刷这门课。&lt;/p&gt;</summary><category term="网络编程"></category></entry></feed>