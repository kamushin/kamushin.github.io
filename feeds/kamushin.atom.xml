<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kamushin's blog</title><link href="/" rel="alternate"></link><link href="/feeds/kamushin.atom.xml" rel="self"></link><id>/</id><updated>2015-12-21T17:26:57+08:00</updated><entry><title>Write Python like a Pro</title><link href="/learning/python_pro.html" rel="alternate"></link><updated>2015-12-21T17:26:57+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-21:learning/python_pro.html</id><summary type="html">&lt;h3&gt;Context Managers&lt;/h3&gt;
&lt;p&gt;If you have a function &lt;code&gt;do_sth()&lt;/code&gt;, before invoking this method, it needs connect to Database and get filelock. And code maybe like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    db.connect()
    getfilelock()
    do_sth()
  except:
    ...
  finally:
    releasefilelock()
    db.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if &lt;code&gt;do_sth&lt;/code&gt; be called at many palces? If filelock is now don't need, code should be rewrited at each palce when &lt;code&gt;do_sth&lt;/code&gt; is called. &lt;br /&gt;
After wasting a whole afternoon rewriting the code, you find it's useful to have a function to do this. Then code will be:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    prepare()
    do_sth()
  except:
    ...
  finally:
    close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each palce &lt;code&gt;do_sth&lt;/code&gt; invoked is full of &lt;code&gt;prepare/close&lt;/code&gt;. And both of them has no relation with bussiness logic. It makes the code longer and longer.&lt;br /&gt;
Although you don't care about the cofusion you may have when you see these code after 2 months(because the only one line of bussiness logic code is hidden in seven lines of non-business code),
you should be friendly to those who review your code. A funciton more than 500 lines is horrible. I think writing code is an action to get abstraction from complex logic, if there is no 
abstraction in code, it's not coding but translating.
What &lt;code&gt;prepare/close&lt;/code&gt; doed indeed? They are preapre or release an environment to &lt;code&gt;do_sth&lt;/code&gt;, that is context.&lt;br /&gt;
Python use &lt;code&gt;with&lt;/code&gt; statement to manage context.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_sth&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
      &lt;span class="n"&gt;getfilelock&lt;/span&gt;()
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;() &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the reviewer will only see&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  with A() as a:
    a.do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Context manager is uesd explictly. Bussiness logic and impelement are splited.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.
  Simple is better than complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anthor common way is using &lt;code&gt;__del__&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
      &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
          &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
          &lt;span class="n"&gt;getfilelock&lt;/span&gt;()

      &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__del__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
          &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
          &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;a&lt;/span&gt; =  &lt;span class="n"&gt;A&lt;/span&gt;()
  &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The good part of this way is no need of wiring &lt;code&gt;with&lt;/code&gt;. But it's not a explicit context manager.
To &lt;code&gt;GC&lt;/code&gt; languages like Python or Java, there is no way to invoke a destructor method.
Although object has leaved the scope, if it was not cleaned by &lt;code&gt;GC&lt;/code&gt;, the resource it takes will not be released.&lt;br /&gt;
If the resource is database connect, close lately is acceptable, but to resource like &lt;code&gt;mutex&lt;/code&gt;, we need &lt;code&gt;with&lt;/code&gt; statement to release it immediately.&lt;/p&gt;
&lt;h3&gt;Generation&lt;/h3&gt;
&lt;p&gt;A function with &lt;code&gt;yield&lt;/code&gt; is a generator. Generation maintains a context to eval result when it is need.
For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in range(100000):
      do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It creates an array of 1-100000 before &lt;code&gt;do_sth&lt;/code&gt; which will make a waste of memory. 
Another loop with &lt;code&gt;xrange&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in xrange(100000):
      do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is what we know in C++, &lt;code&gt;do_sth&lt;/code&gt; once and then &lt;code&gt;i++&lt;/code&gt;, loops. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for(int i = 0; i &amp;lt; 100000; i++) {
      do_sth()
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So &lt;code&gt;xrange&lt;/code&gt; will use less memory than &lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def fetchmany(self, *args, **kwargs):
        &amp;#39;&amp;#39;&amp;#39;
           A generator to fetch data.
        &amp;#39;&amp;#39;&amp;#39;
        cur = self._conn.cursor()  
        numRows = 200
        try:
            cur.execute(*args, **kwargs)
            self._conn.commit()
        except Exception as e:
            self.logger.error(str(e))
            self._conn.rollback()
            return
        while True:
            rows = cur.fetchmany(numRows)
            if rows:
                yield rows
            else:
                cur.close()
                return

for rows in fetchmany(sql):
    do_sth_with_rows(rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;fetchmany&lt;/code&gt; is a generator, and a generator is iteratable. Only 200 rows will be taken in a patch, not all of the results.  &lt;/p&gt;
&lt;p&gt;Generator can also be used to make a co-routine.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return 3 random integers between 0 and 9&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Displays a running average across lists of integers sent to it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The running average is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_items_seen&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Produces a set of values and forwards them to the pre-defined consumer&lt;/span&gt;
&lt;span class="sd"&gt;    function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Produced {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Producing...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More useful cases in &lt;code&gt;Tornado&lt;/code&gt;.  &lt;/p&gt;
&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;Decorator is a useful syntax sugar to split implement detail.
For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  begin = time.time()
  do_sth()
  end = time.time()
  print &amp;#39;do sth used %s second&amp;#39; % (end-begin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In above code, profile code is mixed in logic code.&lt;br /&gt;
By decorator  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def logtime(func):
    @wraps(func)
    def wrapper(*args, **kwds):
        start_time = time.time()
        ret = func(*args, **kwds)
        use_time = time.time() - start_time
        if use_time &amp;gt; 1.0:
            logging.info(&amp;quot;%s use %s s&amp;quot;, func.__name__, use_time)
        return ret
    return wrapper

@logtime
def do_sth():
  ...



do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When &lt;code&gt;do_sth&lt;/code&gt; be invoked, the caller don't need to know about &lt;code&gt;logtime&lt;/code&gt;.
There is also a &lt;code&gt;@&lt;/code&gt; used in Java. But that is a &lt;code&gt;annotation&lt;/code&gt;, it's not run-time but a complie time reflect.&lt;br /&gt;
That has no relation with decorator in Python.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Here are some code to show the relation with &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;我&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;我&amp;#39;.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; b
u&amp;#39;\u6211&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;utf-8&amp;#39;)
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;gbk&amp;#39;)
&amp;#39;\xce\xd2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python2, &lt;code&gt;str&lt;/code&gt; is byte array and &lt;code&gt;unicode&lt;/code&gt; is charset code of the character.&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Python开发经验--从问题入手</title><link href="/learning/python_pro_zh_cn.html" rel="alternate"></link><updated>2015-12-21T15:56:37+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-21:learning/python_pro_zh_cn.html</id><summary type="html">&lt;h3&gt;上下文管理&lt;/h3&gt;
&lt;p&gt;如果你要做一件事情&lt;code&gt;do_sth()&lt;/code&gt;，在这之前，需要连接数据库，需要持有文件锁。那么你很可能这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    db.connect()
    getfilelock()
    do_sth()
  except:
    ...
  finally:
    releasefilelock()
    db.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果&lt;code&gt;do_sth&lt;/code&gt;在 N 个地方出现呢？如果我策略修改了，不再需要&lt;code&gt;filelock&lt;/code&gt; 了呢？是不是需要去改这 N 个地方？&lt;br /&gt;
花了一下午去修改了 N 个地方，测试了几次终于没有遗漏后，你发现这个做法多么低效，于是你终于想起来用一个函数去做这件事情。&lt;br /&gt;
你把代码写成了这样  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    prepare()
    do_sth()
  except:
    ...
  finally:
    close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;do_sth&lt;/code&gt;所在的 N 个地方，都写满了 &lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; 这一系列和业务逻辑无关的代码, 这使得我们的代码变得冗长。
即使你不在乎自己过了两个月后是否还愿意看这段代码，至少你要照顾下帮你 review 代码的人，一个函数写了500行还能 review 吗？
我认为一个程序员写代码的过程，就是从复杂的逻辑中进行抽象的过程，如果不进行抽象，那么就不是写代码，而是在做翻译。我们来看看这里有什么可以抽象的。&lt;br /&gt;
&lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; 这些是在做什么？是在预备和释放一个可以&lt;code&gt;do_sth&lt;/code&gt;的环境，也就是我们常说的上下文管理。&lt;br /&gt;
Python 提供了&lt;code&gt;with&lt;/code&gt;语句来帮助我们管理上下文。代码变成了这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_sth&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
      &lt;span class="n"&gt;getfilelock&lt;/span&gt;()
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;() &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在帮你 review 代码的人，只会在那 N 个&lt;code&gt;do_sth&lt;/code&gt; 存在的地方，看到  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  with A() as a:
    a.do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很显示的使用了上下文进行管理，分离了业务逻辑和具体实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.
  Simple is better than complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个常见的做法是使用&lt;code&gt;__del__&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
      &lt;span class="n"&gt;getfilelock&lt;/span&gt;()

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__del__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

    &lt;span class="n"&gt;a&lt;/span&gt; =  &lt;span class="n"&gt;A&lt;/span&gt;()
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个做法的优点是不需要写&lt;code&gt;with&lt;/code&gt; 语句，缺点是这不是明显的上下文管理，对于 Python/Java 这种带
&lt;code&gt;GC&lt;/code&gt; 的语言来说，是不能手动调用一个对象的析构函数的，即使对象离开了作用域，它依然会因为还没有被&lt;code&gt;GC&lt;/code&gt;而存活。&lt;br /&gt;
所以对于锁这样的，我们需要很快去释放的资源，使用&lt;code&gt;with&lt;/code&gt; 更加的可控。
可能会有人去对比 C++ 中的&lt;code&gt;RAII&lt;/code&gt; 规则，Python中是做不到 &lt;code&gt;RAII&lt;/code&gt; 的, 因为以上原因。&lt;/p&gt;
&lt;h3&gt;生成器&lt;/h3&gt;
&lt;p&gt;一个函数如果在代码段中有 &lt;code&gt;yield&lt;/code&gt; 那么它就从一个函数变成了一个 &lt;code&gt;generator&lt;/code&gt;。生成器的好处是保留了一个上下文在需要时去运算。&lt;br /&gt;
同样从一个实际例子出发：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in range(100000):
    do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码，在什么都没做之前，就产生了一个1-100000这些数字的数组，占用了内存。&lt;br /&gt;
而&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in xrange(100000):
    do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这才是我们知道的C++中的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for(int i = 0; i &amp;lt; 100000; i++) {
    do_sth()
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行一次 &lt;code&gt;do_sth&lt;/code&gt;，再生成一次 i 值。 &lt;br /&gt;
所以&lt;code&gt;xrange&lt;/code&gt;会比&lt;code&gt;range&lt;/code&gt;更省内存。（在 Py2 是这样。Py3中，&lt;code&gt;range&lt;/code&gt; 就是 Py2 的 &lt;code&gt;xrange&lt;/code&gt;。 另外据我所知，不存在 xrange 是 C 实现这么一回事)。
再来一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def fetchmany(self, *args, **kwargs):
        &amp;#39;&amp;#39;&amp;#39;
           A generator to fetch data.
           prams: numRows -&amp;gt; the number of rows to fetch.
        &amp;#39;&amp;#39;&amp;#39;
        cur = self._conn.cursor()  
        numRows = 200
        try:
            cur.execute(*args, **kwargs)
            self._conn.commit()
        except Exception as e:
            self.logger.error(str(e))
            self._conn.rollback()
            return
        while True:
            rows = cur.fetchmany(numRows)
            if rows:
                yield rows
            else:
                cur.close()
                return

for rows in fetchmany(sql):
  do_sth_with_rows(rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这就实现了每次取出200条，消费完再取200条。而不是一次性取到内存中。同时也封装了&lt;code&gt;commit&lt;/code&gt;，&lt;code&gt;rollback&lt;/code&gt;等操作。&lt;/p&gt;
&lt;p&gt;生成器也可以用来构造对称式协程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return 3 random integers between 0 and 9&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Displays a running average across lists of integers sent to it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The running average is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_items_seen&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Produces a set of values and forwards them to the pre-defined consumer&lt;/span&gt;
&lt;span class="sd"&gt;    function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Produced {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Producing...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中， 不需要队列，就做到了一个一对一的生产与消费。当然这个1对1的并没有什么实际意义。对于协程和生成器的作用，如果感兴趣，可以看看&lt;code&gt;Tornado&lt;/code&gt;的实现。&lt;/p&gt;
&lt;h3&gt;Exception&lt;/h3&gt;
&lt;p&gt;这块Python和其他语言没什么不同的，拿出来讲是因为看到很多代码里充满了魔数。&lt;br /&gt;
比如 &lt;code&gt;return 'unknown'&lt;/code&gt;. 既然是&lt;code&gt;unknown&lt;/code&gt;就应该抛出异常。而不是用一堆的常量字符串在各个函数直接传来传去。&lt;br /&gt;
类似的例子还有&lt;code&gt;return 'ok'&lt;/code&gt;, &lt;code&gt;return 'mysql'&lt;/code&gt;, &lt;code&gt;return 2&lt;/code&gt;. &lt;br /&gt;
另外尽可能抛出和接收特定的异常。&lt;/p&gt;
&lt;h3&gt;Functional Programming&lt;/h3&gt;
&lt;p&gt;Python 其实是不怎么 FP 的，不过一些基本的 FP 支持还是有的。&lt;br /&gt;
比如高阶函数，&lt;code&gt;map reduce filter&lt;/code&gt;。&lt;br /&gt;
用&lt;code&gt;map reduce filter&lt;/code&gt; 可以更好的做抽象。&lt;br /&gt;
&lt;code&gt;reduce(lambda x, y: x + y, query_res)&lt;/code&gt;&lt;br /&gt;
很简单就能看出，虽然我不知道具体 &lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; 是什么，但是我知道，这是把 &lt;code&gt;query_res&lt;/code&gt; 中的每个值加到一起。&lt;br /&gt;
不用去管&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;的类型，只需要他们支持&lt;code&gt;+&lt;/code&gt;操作。这种编程思维可以再次把业务逻辑和实现分开。&lt;/p&gt;
&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;装饰器算是 Python 的一大亮点。看下面这个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  begin = time.time()
  do_sth()
  end = time.time()
  print &amp;#39;do sth used %s second&amp;#39; % (end-begin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;业务逻辑里混杂着统计时间的逻辑。添加要加三行，什么时候不要了，又要删三行。
如果用上装饰器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def logtime(func):
    @wraps(func)
    def wrapper(*args, **kwds):
        start_time = time.time()
        ret = func(*args, **kwds)
        use_time = time.time() - start_time
        if use_time &amp;gt; 1.0:
            logging.info(&amp;quot;%s use %s s&amp;quot;, func.__name__, use_time)
        return ret
    return wrapper

@logtime
def do_sth():
  ...



do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码被调用的时候，不需要知道做了时间的统计，也不需要把统计代码混杂在业务逻辑中。 &lt;br /&gt;
Java中同样也有&lt;code&gt;@&lt;/code&gt;字符的运用，不同的是，Java中那个叫&lt;code&gt;annotation&lt;/code&gt;, 也就是注解。 
注解是编译期的，它是用来做反射的，也就是提供给外部一些关于我本身信息的。和 Python 的用法没有关系。  &lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;下面直接用一些例子来显示 Python2中的 Unicode 和 Str 的关系。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;我&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;我&amp;#39;.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; b
u&amp;#39;\u6211&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;utf-8&amp;#39;)
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;gbk&amp;#39;)
&amp;#39;\xce\xd2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很明显可以看出，Python2中，str 类型其实是 byte 字节流。而 Unicode 类型则是表示了 Unicode 字符号。&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>New fxg for me</title><link href="/tool/fxg_new.html" rel="alternate"></link><updated>2015-12-09T09:39:29+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-09:tool/fxg_new.html</id><summary type="html">&lt;p&gt;&lt;a href="http://kamushin.github.io/tool/fxg.html"&gt;previos article about fxg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fxg&lt;/code&gt; means &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; then &lt;code&gt;grep&lt;/code&gt;. It has a insufferable performace, so &lt;br /&gt;
I use &lt;code&gt;ag&lt;/code&gt; to instead, after forking some tools made by &lt;a href="https://github.com/lilydjwg/search-and-view"&gt;lilydjwg&lt;/a&gt;
The tool chain is used for finding pattern in files and opening file by vim.
I rewrite a simple version of &lt;code&gt;vv&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/fxg.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;file_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;
            &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Insert of writing regex pattern to match the complex colored output, I call ag the second time to gen a un-colored output to log file.
And I also add a &lt;code&gt;-G&lt;/code&gt; for file pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color $2 | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup $2 | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Update: 15-12-9&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ag&lt;/code&gt; on my MacOSX has an unstable sorting result. It makes the twice call of &lt;code&gt;Ag&lt;/code&gt; return different order.&lt;br /&gt;
So I add &lt;code&gt;sort&lt;/code&gt; to this command. 
&lt;code&gt;-0&lt;/code&gt; or &lt;code&gt;-print0&lt;/code&gt; will take &lt;code&gt;space&lt;/code&gt; in filename as a special character.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color -0 $2 | sort | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup -0 $2 | sort | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Ag"></category><category term="Linux"></category></entry><entry><title>Do not use LOB in Oracle(OLTP) -- record an optimization experience</title><link href="/debug/Do-not-use-lob.html" rel="alternate"></link><updated>2015-12-08T01:52:18+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-08:debug/Do-not-use-lob.html</id><summary type="html">&lt;h2&gt;Front knowledge&lt;/h2&gt;
&lt;h3&gt;LOB in Oracle&lt;/h3&gt;
&lt;p&gt;LOB is used in Oracle to store text logger than 4000.  &lt;br /&gt;
We don't use Oracle in a OLTP system. &lt;br /&gt;
Conside of RT and IO, we choose some other ways to provide log text. For example, CDN.&lt;/p&gt;
&lt;h3&gt;LOB in cx_Oracle&lt;/h3&gt;
&lt;p&gt;As mentioned in &lt;a href="http://kamushin.github.io/learning/python_oracle.html"&gt;Some tricks when using cx_Oracle&lt;/a&gt;, we must convert LOB to string for each line we fetched.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  self._cursor.execute(sql, *args)
    def fix_lob(row):
        def convert(col):
            if isinstance(col, cx_Oracle.LOB):
                return str(col)
            else:
                return col

        return [convert(c) for c in row]

  return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it will bring out a significant cost of CPU time in Python, which you chould see later.&lt;/p&gt;
&lt;h2&gt;Profile&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;CProfile&lt;/code&gt; to profile my Python code. It's very easy to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;CProfile&lt;/span&gt;
  &lt;span class="n"&gt;CProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unittest....&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is part of my profile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="nx"&gt;ncalls&lt;/span&gt;  &lt;span class="nx"&gt;tottime&lt;/span&gt;  &lt;span class="nx"&gt;percall&lt;/span&gt;  &lt;span class="nx"&gt;cumtime&lt;/span&gt;  &lt;span class="nx"&gt;percall&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;209391&lt;/span&gt; &lt;span class="mf"&gt;1286.084&lt;/span&gt;  &lt;span class="mf"&gt;0.006&lt;/span&gt; &lt;span class="mf"&gt;1286.559&lt;/span&gt;    &lt;span class="mf"&gt;0.006&lt;/span&gt;   &lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4630&lt;/span&gt;   &lt;span class="mf"&gt;346.679&lt;/span&gt;   &lt;span class="mf"&gt;0.075&lt;/span&gt;  &lt;span class="mf"&gt;346.679&lt;/span&gt;    &lt;span class="mf"&gt;0.075&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;executemany&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cx_Oracle.Cursor&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="mi"&gt;4654&lt;/span&gt;   &lt;span class="mf"&gt;90.788&lt;/span&gt;    &lt;span class="mf"&gt;0.020&lt;/span&gt;   &lt;span class="mf"&gt;90.788&lt;/span&gt;    &lt;span class="mf"&gt;0.020&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cx_Oracle.Connection&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;200k times call of &lt;code&gt;convert&lt;/code&gt; cost 2000+ sec. Is't because Python &lt;code&gt;LOB=&amp;gt;str&lt;/code&gt; is very slow.  &lt;br /&gt;
4k times of &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;executemany&lt;/code&gt; because of the lag between two servers.&lt;/p&gt;</summary><category term="Oracle"></category><category term="Python"></category></entry><entry><title>Difference between ArrayList and Arrays.asList() in Java</title><link href="/learning/java-arrayList.html" rel="alternate"></link><updated>2015-12-01T14:17:02+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-12-01:learning/java-arrayList.html</id><summary type="html">&lt;p&gt;&lt;code&gt;Arrays.asList&lt;/code&gt; does not return an &lt;code&gt;ArrayList&lt;/code&gt; instance which has an &lt;code&gt;add&lt;/code&gt; method implemented correctly. &lt;br /&gt;
It returns a List that is a "view" onto the array - a wrapper that makes the array look like a list&lt;br /&gt;
Changes to the returned list &lt;code&gt;write through&lt;/code&gt; to the array&lt;br /&gt;
Since the returned instance is a fixed-size array, the &lt;code&gt;add&lt;/code&gt; method always throw an UnsupporedOperationException.&lt;br /&gt;
If want to use &lt;code&gt;add&lt;/code&gt; method  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  new ArrayList(Arrays.asList(myArray)); //copies the content of the array to a new ArrayList 
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Java"></category></entry><entry><title>Some tricks when using cx_Oracle</title><link href="/learning/python_oracle.html" rel="alternate"></link><updated>2015-11-27T16:01:57+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-11-27:learning/python_oracle.html</id><summary type="html">&lt;p&gt;cx_Oracle is a Python module that enables access to Oracle databases.&lt;br /&gt;
However, users may have confusion due to some fetures of this module.&lt;/p&gt;
&lt;h4&gt;Thread safe&lt;/h4&gt;
&lt;p&gt;The default setting of cx_Oracle is not thread-safe.  &lt;br /&gt;
So if user have multiple threads, make sure that specifying &lt;code&gt;threaded=True&lt;/code&gt; when creating the connection.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;conn = cx_Oracle.connect(user + '/' + passwd + "@" + host + "/" + db, threaded=True)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;Otherwise, the program will crash with error message like    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ORA-24550: signal received: [si_signo=11] [si_errno=0] [si_code=2] [si_addr=0000000000000000]&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Fetch LOB column&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Internally, Oracle uses LOB locators which are allocated based on the cursor array size. Thus, it is important that the data in the LOB object be manipulated before another internal fetch takes place. The safest way to do this is to use the cursor as an iterator. In particular, do not use the fetchall() method. The exception “LOB variable no longer valid after subsequent fetch” will be raised if an attempt to access a LOB variable after a subsequent fetch is detected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use curosr as an iterator rather than use &lt;code&gt;fetchall()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;self._cursor.execute(sql, *args)
def fix_lob(row):
    def convert(col):
        if isinstance(col, cx_Oracle.LOB):
            return str(col)
        else:
            return col

    return [convert(c) for c in row]

return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Python"></category></entry><entry><title>Use webpack together with browser-sync</title><link href="/tool/webpack_and_browser-sync.html" rel="alternate"></link><updated>2015-10-28T16:56:48+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-28:tool/webpack_and_browser-sync.html</id><summary type="html">&lt;p&gt;Here are some tips about using &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;Browsersync&lt;/code&gt; to improve working speed.&lt;/p&gt;
&lt;h3&gt;Browsersync&lt;/h3&gt;
&lt;p&gt;Browsersync makes your browser testing workflow faster by synchronising URLs, interactions and code changes across multiple devices. &lt;br /&gt;
&lt;code&gt;npm install browser-sync@2.7.1 -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Proxy&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;browser-sync start --proxy localhost:8888 --port 4000 --files index.html --files src/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Used to proxy ajax request to back-end server.&lt;/p&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;
&lt;p&gt;With webpack, don't need &lt;code&gt;require.js&lt;/code&gt; and &lt;code&gt;require-react-plugin&lt;/code&gt; loading in &lt;code&gt;index.html&lt;/code&gt;. Very useful to me. &lt;br /&gt;
&lt;code&gt;npm install webpack -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Work together&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;npm install -g browser-sync-webpack-plugin&lt;/code&gt;
And config &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var BrowserSyncPlugin = require(&amp;#39;browser-sync-webpack-plugin&amp;#39;);
module.exports = {
entry: &amp;#39;./src/js/index.js&amp;#39;,
output: {
    publicPath: &amp;#39;./dist/&amp;#39;,
    path: &amp;#39;./dist/&amp;#39;,
    filename: &amp;#39;bundle.js&amp;#39;,
    pathinfo: true
},
resolve: {
    root: &amp;#39;.&amp;#39;
},
module: {
    loaders: [
    {test: /\.js/, loader: &amp;#39;jsx-loader?harmony&amp;#39;}
    ]
},
plugins: [
    new BrowserSyncPlugin({
    host: &amp;#39;localhost&amp;#39;,
    port: 4000,
    proxy: &amp;#39;localhost:8888&amp;#39;,
    files: &amp;#39;src/*&amp;#39;,
    files: &amp;#39;index.html&amp;#39;
})  
]
};
&lt;/pre&gt;&lt;/div&gt;</summary><category term="front-end"></category></entry><entry><title>MySQL 优化学习之路</title><link href="/learning/mysql_opti.html" rel="alternate"></link><updated>2015-10-25T22:56:42+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-25:learning/mysql_opti.html</id><summary type="html">&lt;h3&gt;Overview&lt;/h3&gt;
&lt;h4&gt;DB Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;table structure: column data type | table with few or many columns&lt;/li&gt;
&lt;li&gt;right indexs&lt;/li&gt;
&lt;li&gt;storage engine&lt;/li&gt;
&lt;li&gt;data format: compression or not&lt;/li&gt;
&lt;li&gt;locking strategy&lt;/li&gt;
&lt;li&gt;caching size&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Hardware Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Disk seeks 10ms&lt;/li&gt;
&lt;li&gt;Disk reading and writing. easier to optimize than disk seeks&lt;/li&gt;
&lt;li&gt;CPU cycles large tables compared to the amount of memory ???&lt;/li&gt;
&lt;li&gt;Memory bandwith when CPU needs more data to fit in CPU cache ???&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use explain&lt;/li&gt;
&lt;li&gt;indexs&lt;/li&gt;
&lt;li&gt;avoid full table scan&lt;/li&gt;
&lt;li&gt;analyze table periodically&lt;/li&gt;
&lt;li&gt;read-only transactions 5.6.4+ // had read an article on ATA about this&lt;/li&gt;
&lt;li&gt;avoid transforming query hard to read, optimizer will do this&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SELECT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cover index: In some cases, MySQL can read rows from the index without even consulting the data file. If all columns used from the index are numeric, only the index tree is used to resolve the query. // need numeric ? TODO&lt;/li&gt;
&lt;li&gt;range index&lt;ul&gt;
&lt;li&gt;MySQL does not support merging ranges， use union&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; To permit use of index dives for comparisons of up to N equality ranges, set &lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; to N + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index extensions: add pk after each secondary index  5.6.9&lt;/li&gt;
&lt;li&gt;two kinds of filesort&lt;/li&gt;
&lt;li&gt;group by: loose index scan vs tight index scan, depends on distribution of column(cardinality).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;INSERT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use INSERT statements with multiple VALUES lists to insert several rows at a time will be faster than using separate single-row INSERT statements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bulk_insert_buffer_size&lt;/code&gt; for large INSERT&lt;/li&gt;
&lt;li&gt;insert values explicitly only when the value to be inserted differs from the default.&lt;/li&gt;
&lt;li&gt;Bulk insert speed up (https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-bulk-data-loading.html)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;same with INSERT&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DELETE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;truncate&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Optimizing INFORMATION_SCHEMA Queries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Try to use constant lookup values for database and table names in the WHERE clause&lt;/li&gt;
&lt;li&gt;Write queries that minimize the number of table files that must be opened (???)&lt;/li&gt;
&lt;li&gt;Use EXPLAIN to determine whether the server can use INFORMATION_SCHEMA optimizations for a query&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Index&lt;/h3&gt;
&lt;p&gt;Index can improve the speed of determining rows which match where statements. But useless indexs are waste of space and time for db to determinie whcih index to use and need more time to create indexs when insert.&lt;/p&gt;
&lt;h4&gt;How MySQL use index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the most seletive indexs&lt;/li&gt;
&lt;li&gt;leftmost prefix of the index&lt;/li&gt;
&lt;li&gt;join: &lt;ul&gt;
&lt;li&gt;use same data type will be faster // varchar and char are the same if their size equal.&lt;/li&gt;
&lt;li&gt;must use the same character set when compare string columns&lt;/li&gt;
&lt;li&gt;comparison of dissimilar column may prevent use of indexs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIN() MAX() of column &lt;code&gt;key_col&lt;/code&gt; will be O(1) if all &lt;code&gt;key_part_N&lt;/code&gt; before &lt;code&gt;key_col&lt;/code&gt; in where statement is constant.&lt;/li&gt;
&lt;li&gt;cover index // here not mention numeric&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Primary Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use numeric pk&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Foreign Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;split low-frequently data into separate table&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Column Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;prefix index &lt;/li&gt;
&lt;li&gt;fulltext for char varchar and text&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Statistic&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expr1 = expr2 is not true when expr1 or expr2 (or both) are NULL&lt;/li&gt;
&lt;/ul&gt;</summary><category term="MySQL"></category></entry><entry><title>Pip 无网络环境安装包</title><link href="/tool/2015-10-20.html" rel="alternate"></link><updated>2015-10-20T22:28:48+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-20:tool/2015-10-20.html</id><summary type="html">&lt;p&gt;在内网部署 Python 的时候, 因为不能用连接到 &lt;code&gt;pip&lt;/code&gt; 源所以仅仅靠 requirement.txt 是不够的.&lt;br /&gt;
我们需要 wheel 这个工具帮我们把需要的依赖先打成本地包.&lt;br /&gt;
&lt;code&gt;pip wheel --wheel-dir=/tmp/wheelhouse tornado&lt;/code&gt;&lt;br /&gt;
这样 tornado 的依赖包就全在 wheelhouse 里了 &lt;br /&gt;
我们面对一个更悲剧的情况, 线上连 &lt;code&gt;pip&lt;/code&gt; 都没, 那么只能先在线下先给装好包.&lt;br /&gt;
&lt;code&gt;pip install --use-wheel --no-index --find-links=/tmp/wheelhouse -t  /tmp/wheelhouse/code tornado&lt;/code&gt;&lt;br /&gt;
这样包就全在 code 里了, 可以直接复制到线上. &lt;strong&gt;要注意编译环境一致和 so 库&lt;/strong&gt;   &lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>当我们在谈论异常时我们在谈论什么?</title><link href="/learning/2015-10-19-2.html" rel="alternate"></link><updated>2015-10-19T23:40:31+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:learning/2015-10-19-2.html</id><summary type="html">&lt;h3&gt;异常是什么&lt;/h3&gt;
&lt;p&gt;异常是一种用来分离程序运行中那1%会走进的&lt;strong&gt;岔路&lt;/strong&gt;的分支控制手段.&lt;/p&gt;
&lt;h3&gt;语言是如何实现它的&lt;/h3&gt;
&lt;p&gt;曾经, 大概在我大三末大四初的时候, 有幸读了本 C 接口与实现, 书里用 &lt;code&gt;setjump &amp;amp; longjmp&lt;/code&gt; 和宏的方式向我展现了如何在 C 语言中实现它.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception is a beautiful goto. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然, sjlj 只是实现异常的一种, 还有基于 table 的方式等等, 更加高效, 在不进入异常时不产生副作用.&lt;/p&gt;</summary><category term="exception"></category></entry><entry><title>把Capslock重定向为Ctrl</title><link href="/nix/Change_caplocks.html" rel="alternate"></link><updated>2015-10-19T23:16:22+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:nix/Change_caplocks.html</id><summary type="html">&lt;p&gt;Capslock这键平时没多大用，而Ctrl则用的非常多，所以把Capslock换成Ctrl也算是个比较常见的需求。&lt;/p&gt;
&lt;p&gt;以前我是把xmodmap里swap脚本小改一下，也算在Arch上能用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最近换了deepin后，这脚本会让Capslock啥也不做。于是找了个更加合理的脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比较一下， 就是少了一行对Control的设置，我猜之前出错的原因是Control_L不能被绑到两个keysym上&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>Mac上遇到了一个Chrome和Safari被劫持的问题</title><link href="/nix/Chrome_be_hijacked.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:nix/Chrome_be_hijacked.html</id><summary type="html">&lt;p&gt;大概是因为下载了恶意的软件, 导致Chrome和Safari打开各种网站都出现广告. 检查过DNS
也更改过DNS, 无效. 目前没找到原因, 只能将就这用FireFox和Chromium, 这俩货没被劫持&lt;/p&gt;</summary><category term="杂事"></category></entry><entry><title>Pelican上增加评论和自动删除文章的一些坑</title><link href="/nix/Pelican.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:nix/Pelican.html</id><summary type="html">&lt;h3&gt;增加评论功能&lt;/h3&gt;
&lt;p&gt;这个网上有很多描述，主要是去disqus注册下，然后设置下配置文件&lt;a href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html"&gt;example&lt;/a&gt;坑主要在于Pelican的默认主题是没有disqus的模板的，所以虽然看到了对disqus的请求，却看不到评论区。需要自己下个比较全的主题。&lt;/p&gt;
&lt;h3&gt;自动删除文件&lt;/h3&gt;
&lt;p&gt;在content里删除了md文件，重新&lt;code&gt;make html&lt;/code&gt;后在output中依然会看到那个md文件生成的html文件。&lt;/p&gt;
&lt;p&gt;一个方法是加入配置&lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;来每次清空output，但是这带来了两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动日期没了 目前无法解决&lt;/li&gt;
&lt;li&gt;版本控制没了，可以通过加入&lt;code&gt;OUTPUT_RETENTION = [".hg", ".git", ".bzr"]&lt;/code&gt;来解决&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pelican"></category></entry><entry><title>用正则来解决grep时行过长的问题</title><link href="/tool/fxg.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:tool/fxg.html</id><summary type="html">&lt;p&gt;之前自己写了个函数用来查找文件中匹配关键字的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg_old(){
    find . -type f -name $1 | xargs grep $2 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是今天在用的时候，发现如果匹配到的行过长的话，输出很难看，而且也不知道哪里匹配到了。&lt;/p&gt;
&lt;p&gt;所以就想能不能对行的长度做限制，但是grep里并没有这个参数选项。于是想到了用正则去控制匹配串。在so上找到了这样的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; fxg(){
    find . -type f -name $1 | xargs grep -oE &amp;quot;.{0,20}$2.{0,20}&amp;quot;
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-o 只输出匹配的部分。 如果只加这个选项，那么就输出N行的$2。&lt;/p&gt;
&lt;p&gt;-E 使用扩展的正则(有人提到用-P，Perl正则，但是在我这里出现错误)&lt;/p&gt;
&lt;p&gt;后面的正则表达式用来匹配前后20个字符。&lt;/p&gt;
&lt;p&gt;这样就满足了我的需求&lt;/p&gt;</summary><category term="Linux"></category></entry><entry><title>TCP自连接</title><link href="/learning/tcp-self-connect.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:learning/tcp-self-connect.html</id><summary type="html">&lt;p&gt;陈硕的第8节视频介绍了TCP自连接这个特性。&lt;/p&gt;
&lt;p&gt;程序代码类似于:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for i in range(65536):
    try:
        sock = socket.create_connection((&amp;#39;localhost&amp;#39;, port))
        time.sleep(60*60)
    except:
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要是这样的一个逻辑:  &lt;/p&gt;
&lt;p&gt;首先在循环中每次尝试创建连接的时候，TCP会分配一个IP给客户端，这个IP不是每次都随机的而是会自增。在最多尝试了65536或更少次后，一定会恰好和我们输入的port参数重合(如果port没有被占用)，那么就产生了一个客户端连接到自己的现象。要避免这个现象，可以在网络库中进行判断。&lt;/p&gt;</summary><category term="网络编程"></category></entry><entry><title>开始学习陈硕的网络编程课程</title><link href="/learning/test.html" rel="alternate"></link><updated>2015-10-19T21:37:24+08:00</updated><author><name>Kamushin</name></author><id>tag:,2015-10-19:learning/test.html</id><summary type="html">&lt;p&gt;很久前就关注了陈硕的这门课，等着他结课后一次性看完，截止到现在他已经更新了40多节了，
就要结束了，所以开始刷这门课。&lt;/p&gt;</summary><category term="网络编程"></category></entry></feed>