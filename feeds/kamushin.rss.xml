<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kamushin's blog</title><link>/</link><description></description><atom:link href="/feeds/kamushin.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 06 Apr 2016 20:39:27 +0800</lastBuildDate><item><title>Alter dataSource in Spring By AOP And Annotation</title><link>/debug/aop_proxy.html</link><description>&lt;p&gt;Here is an article of how to use AOP and Annotation mechanism to alter dataSource elegantly.&lt;br /&gt;
First, I want make sure that everyone knows how to build multiple dataSource. Please check this article &lt;a href="https://spring.io/blog/2007/01/23/dynamic-datasource-routing/"&gt;Dynamic-DataSource-Routing&lt;/a&gt;&lt;br /&gt;
After this, we will have a &lt;code&gt;DataSourceHolder&lt;/code&gt; class, in the case above, it is called &lt;code&gt;CustomerContextHolder&lt;/code&gt;.&lt;br /&gt;
Let's remove the customer logic and make &lt;code&gt;Holder&lt;/code&gt; purer.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSourceHolder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;ThreadLocal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;contextHolder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ThreadLocal&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getCurrentDataSource&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setDefaultDataSource&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;clearCustomerType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;contextHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;   
    &lt;span class="o"&gt;}&lt;/span&gt;  

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;When should we call &lt;code&gt;setDataSource&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In the project I take charge of, they invoke &lt;code&gt;setDataSource&lt;/code&gt; in each &lt;code&gt;controller&lt;/code&gt;. IMHO, I don't think it's an 
elegant way. I think &lt;code&gt;dataSource&lt;/code&gt; should be an attribute of a &lt;code&gt;DAO&lt;/code&gt; method or a &lt;code&gt;Service&lt;/code&gt; method. And since
&lt;code&gt;transactionManager&lt;/code&gt; is a &lt;code&gt;advice&lt;/code&gt; to &lt;code&gt;Service&lt;/code&gt; method in this project, &lt;code&gt;dataSource&lt;/code&gt; must be an attribute of a &lt;code&gt;Service&lt;/code&gt; method.&lt;/p&gt;
&lt;h3&gt;Use Annotation to describe a Service method&lt;/h3&gt;
&lt;p&gt;First, we should define a runtime annotation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface DataSource {
    String name() default DataSource.DEFAULT;

    public final static String DEFAULT     = &amp;quot;foo&amp;quot;;

    public final static String BAR           = &amp;quot;bar&amp;quot;;

    public final static String BAZ           = &amp;quot;baz&amp;quot;;

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we use the annotation to describe a &lt;code&gt;Service&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    @Override
    @DataSource(name=DataSource.BAR)
    public Object getSomething() {
        return dao.getSomething();
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use AOP to invoke setDataSource&lt;/h3&gt;
&lt;p&gt;First, define a &lt;code&gt;pointcut&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &amp;lt;aop:pointcut id=&amp;quot;serviceWithAnnotation&amp;quot;
    expression=&amp;quot;@annotation(com.yourpackageName.DataSource)&amp;quot; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second, define a &lt;code&gt;advisor&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &amp;lt;aop:advisor advice-ref=&amp;quot;dataSourceExchange&amp;quot; pointcut-ref=&amp;quot;serviceWithAnnotation&amp;quot; order=&amp;quot;1&amp;quot;/&amp;gt;
    &amp;lt;bean id=&amp;quot;dataSourceExchange&amp;quot; class=&amp;quot;com.yourpackageName.DataSourceExchange&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the AOP mechanism will make sure that some methods of &lt;code&gt;DataSourceExchange&lt;/code&gt; will run if Service method which &lt;code&gt;DataSource&lt;/code&gt; annotation decorated is invoked.&lt;/p&gt;
&lt;p&gt;Last, define &lt;code&gt;DataSourceExchange&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSourceExchange&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;MethodInterceptor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;             &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoggerFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogger&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSourceExchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Method name : &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Method arguments : &amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getArguments&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dataSource in invocation is null&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;dbnameString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DataSourceHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbnameString&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;DataSourceHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDefaultDataSource&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//TODO&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The hardest part in this bunch of code is how should us impl the &lt;code&gt;getDataSource&lt;/code&gt; method.
I spent several hours of this method.
First, I've seen some code online, which tell me it's quite simple to do this. Just like the code below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getAnnotation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it won't work, because &lt;code&gt;invocation.getMethod()&lt;/code&gt; will not return the method you defined above, it will
return a &lt;code&gt;proxy&lt;/code&gt; method. It's a mechanism called &lt;code&gt;Proxy&lt;/code&gt; in Spring framework.&lt;br /&gt;
So we should find out the real method.&lt;br /&gt;
Again I searched stackoverflow.com, some answers tell me &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; will be useful to me.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt; &lt;span class="nf"&gt;getDataSource&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MethodInvocation&lt;/span&gt; &lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;AnnotationUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAnnotation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMethod&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; will recursively find the super class of the proxy method, to find the annotation decorated on the real method you defined above.&lt;br /&gt;
But it's &lt;strong&gt;not&lt;/strong&gt; the complete answer. &lt;br /&gt;
Let's see the source code of &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    /**
     * Get a single {@link Annotation} of &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;annotationType&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; from the supplied {@link Method},
     * traversing its super methods if no annotation can be found on the given method itself.
     * &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Annotations on methods are not inherited by default, so we need to handle this explicitly.
     * @param method the method to look for annotations on
     * @param annotationType the annotation class to look for
     * @return the annotation found, or &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;null&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; if none found
     */
    public static &lt;span class="nt"&gt;&amp;lt;A&lt;/span&gt; &lt;span class="err"&gt;extends&lt;/span&gt; &lt;span class="err"&gt;Annotation&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; A findAnnotation(Method method, Class&lt;span class="nt"&gt;&amp;lt;A&amp;gt;&lt;/span&gt; annotationType) {
        A annotation = getAnnotation(method, annotationType);
        Class&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDeclaringClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchOnInterfaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInterfaces&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSuperclass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="nx"&gt;equivalentMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDeclaredMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameterTypes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAnnotation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;equivalentMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotationType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;searchOnInterfaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;annotationType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInterfaces&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NoSuchMethodException&lt;/span&gt; &lt;span class="nx"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// We&amp;#39;re done...&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a precondition to let &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; works, that is the &lt;code&gt;Proxy&lt;/code&gt; mechanism is implemented by &lt;code&gt;inherit&lt;/code&gt;.
There are two ways of &lt;code&gt;proxy&lt;/code&gt; in Spring. &lt;a href="http://stackoverflow.com/questions/10664182/what-is-the-difference-between-jdk-dynamic-proxy-and-cglib"&gt;What is the difference between JDK dynamic proxy and CGLib&lt;/a&gt;. &lt;code&gt;CGLib&lt;/code&gt; is implemented by &lt;code&gt;inherit&lt;/code&gt; but &lt;code&gt;JDK dynamic proxy&lt;/code&gt; is not.&lt;br /&gt;
So &lt;code&gt;AnnotationUtils.findAnnotation&lt;/code&gt; won't work for &lt;code&gt;JDK dynamic proxy&lt;/code&gt;. We should write some more code to deal with this situation.
Here is my final solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    private DataSource getDataSource(MethodInvocation invocation) throws Throwable {
        DataSource dataSource = AnnotationUtils.findAnnotation(invocation.getMethod(), DataSource.class);
        if(dataSource != null) {
            return dataSource; // if use CGlib proxy
        }

        Method proxyedMethod = invocation.getMethod(); // or use jdk proxy
        Method realMethod = invocation.getThis().getClass().getDeclaredMethod(proxyedMethod.getName(), proxyedMethod.getParameterTypes());
        dataSource =  AnnotationUtils.findAnnotation(realMethod, DataSource.class);
        return dataSource;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;In this case, I learnt
- how to use AOP and annotation
- there is a mechanism called proxy used by Spring
- there are two implements of proxy mechanism, they are different
- how to use reflection in Java&lt;/p&gt;
&lt;p&gt;I hope it would help u.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 06 Apr 2016 20:39:27 +0800</pubDate><guid>tag:,2016-04-06:debug/aop_proxy.html</guid><category>aop java</category></item><item><title>hashHistory and browserHistory in React-Router</title><link>/learning/react_route.html</link><description>&lt;p&gt;&lt;code&gt;hashHistory&lt;/code&gt; and &lt;code&gt;browserHistory&lt;/code&gt; are two kinds of common React-Router &lt;code&gt;Histories&lt;/code&gt; implementations.&lt;br /&gt;
When I was using React-Router v1.0, I read the doc in github and wrote the code like this  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;react-router&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; 
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found something in url like &lt;code&gt;#/home/k=ckuvupr&lt;/code&gt;. What the hell is this?&lt;br /&gt;
I went back to the doc and changed the code with &lt;code&gt;browserHistory&lt;/code&gt;. With the doc, I knew the default implementation is &lt;code&gt;hashHistory&lt;/code&gt;, 
which will make a &lt;code&gt;#&lt;/code&gt; -- hash in url.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;browserHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;react-router&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt; 
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;browserHistory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, it would not effect in v1.0, it's the way in v2.0. So I didn't see anything changed. And just for a while, 
I forgot to deal with this, and went to write other codes.  &lt;/p&gt;
&lt;p&gt;Today when I c&amp;amp;p this chunk of code to my new project, using some new tools. The build tool automatically install
react-router v2.0 for me. While the hash tag is gone, and url looks like the &lt;strong&gt;real&lt;/strong&gt; url.
But it cause another problem, that is when the url is like the &lt;strong&gt;real&lt;/strong&gt; url, it means that I should set the server side route to &lt;code&gt;/* -&amp;gt; index.html&lt;/code&gt; rather than &lt;code&gt;/ -&amp;gt; index.html&lt;/code&gt;.&lt;br /&gt;
Otherwise, it will get a 404 error when the url &lt;code&gt;/home&lt;/code&gt; is re-flushed. And the problem will not raise while using &lt;code&gt;hashHistory&lt;/code&gt;, because the url is like &lt;code&gt;/#/home&lt;/code&gt; and it is still &lt;code&gt;/&lt;/code&gt;, the string after hash tag is not in the route rule.
&lt;a href="https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md"&gt;Docs about them.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;I havn't find the correct way to set the server side route, because I am using a &lt;code&gt;webpack-dev-server&lt;/code&gt;-like tool, I don't know how to change the route.&lt;br /&gt;
So I go back to use the ugly &lt;code&gt;hashHistory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It seems a waste of time, my fault is reading doc but not paid attention to version, but I still hate the doc because the difference between v1.0 and v2.0 is not heightlighted.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Thu, 17 Mar 2016 23:09:38 +0800</pubDate><guid>tag:,2016-03-17:learning/react_route.html</guid><category>react</category></item><item><title>Why Alipay lottery failed</title><link>/think/alipay-lottery.html</link><description>&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Here I use the word &lt;em&gt;lottery&lt;/em&gt; rather than red packet, because only about 1% of the users get the final rewards. &lt;br /&gt;
After the last round of lottery, most of the users started to question whether it's a deception.&lt;br /&gt;
Here comes a very interesting question, how many percents of people should Alipay choose to win the lottery 
will be satisfied ? Does it really a magic number or can be calculated and proved to be the most satisfied number?&lt;br /&gt;
Here are two models to simulate the group of people.  &lt;/p&gt;
&lt;h3&gt;Granovettor model&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Granovetter has done research on a model of how fads are created. Consider a hypothetical mob assuming that each person's decision whether to riot or not is dependent on what everyone else is doing. Instigators will begin rioting even if no one else is, while others need to see a critical number of trouble makers before they riot, too. This threshold is assumed to be distributed to some probability distribution. The outcomes may diverge largely although the initial condition of threshold may only differ very slightly. This threshold model of social behavior was proposed previously by Thomas Schelling and later popularized by Malcolm Gladwell's book The Tipping Point. via wiki&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a threshold model that is to say there is a threshold to decide if Alipay lottery will be rejected by most of the users.&lt;/p&gt;
&lt;h3&gt;Stand up and clap hands model&lt;/h3&gt;
&lt;p&gt;Sorry I forget the real name of this model. In this model, &lt;code&gt;Q&lt;/code&gt; is quality of a drama, &lt;code&gt;E&lt;/code&gt; is bias, and &lt;code&gt;T&lt;/code&gt; is threshold of satisfaction.
If &lt;code&gt;Q + E &amp;gt; T&lt;/code&gt;, people will stand up and clap hands for a drama. And if &lt;code&gt;x&lt;/code&gt; percents of people stand and clap hands, everyone will stand and clap hands.&lt;br /&gt;
&lt;code&gt;x&lt;/code&gt; is called &lt;code&gt;The Tipping Point&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;In this event, two of the most importent values are &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;. if &lt;code&gt;Q&lt;/code&gt; is too small, for example, everyone got 0.1 CNY, it will make this event meaningless and be forgotten.
And if &lt;code&gt;x&lt;/code&gt; is too small, like now, most of people won't stand up and give a applause.&lt;br /&gt;
It needs data to simulate how to give a balance between &lt;code&gt;Q&lt;/code&gt; ans &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Alibaba has enough resource and data to calculat &lt;code&gt;The Tipping Point&lt;/code&gt; with their proud big data tech. But they did not use and made the whole event a failure. Sigh.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 08 Feb 2016 02:13:37 +0800</pubDate><guid>tag:,2016-02-08:think/alipay-lottery.html</guid><category>alipay</category></item><item><title>notes of ArchitectureOfDatabaseSystem</title><link>/learning/ArchitectureOfDatabaseSystem.html</link><description>&lt;blockquote&gt;
&lt;p&gt;A Lightweight Thread Package is an application-level construct
that supports multiple threads within a single OS
process  -- page 150&lt;/p&gt;
&lt;p&gt;Each DBMS thread is
programmed to manage its own state, to perform all potentially blocking
operations (e.g., I/Os) via non-blocking, asynchronous interfaces,
and to frequently yield control to a scheduling routine that dispatches
among these tasks.
Lightweight threads are an old idea that is discussed in a retrospective
sense in [49], and are widely used in event-loop programming
for user interfaces. The concept has been revisited frequently in the
recent OS literature [31, 48, 93, 94]. This architecture provides fast
task-switching and ease of porting, at the expense of replicating a good
deal of OS logic in the DBMS (task-switching, thread state management,
scheduling, etc.) [86]. --page 160&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是在说 coroutine, 之前并不知道数据库里也有 co 的应用。
不过现在想想数据库这种 io 密集的应用，确实应该是 co 的第一个吃螃蟹的人。
co 应用必须使用 non-block io 是众所周知的，而像 innodb 这样完全使用direct io 的应用似乎正好
非常契合，因为至少在 Linux 上 aio 还是不支持buffer io 的。不过 MySQL 是用了内核线程的，大概是它比较新的缘故。&lt;br /&gt;
不过有意思的是，事情的发展往往是三十年河东三十年河西的，文章中提到其实 co 的概念是非常古老的，甚至在1990年的时候，
因为没有足够好的操作系统级别的线程，大家转而使用了 co。 而在内核线程如此成熟的今天，在学习的时候，线程模型首先进入
了我们的视角，导致很多人以为 co 是最近才发明出来的, 才不是在黑前端呢口享。&lt;br /&gt;
不过现代数据库只有MSSQLServer 提供 co 的支持，而且不是默认选项, 默认的是线程池。 co 这玩意在MS那里叫 Fibers。 话说回来，响马也
做了个 fibjs，应该是向这个名字致敬的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From the simplest to the most complex, these are: (1) process
per DBMS worker, (2) thread per DBMS worker, and (3) process pool.
Although these models are simplified, all three are in use by commercial
DBMS systems today. -- page 152&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这和以前接触到的 http 服务器的演化似乎是一样的，不过 http 服务器早就走进了 epoll 的时代，当然
也有人说 nginx 的强大中其实 epoll 只是做了一点点微小的贡献，不知道现代的数据库的模型是怎么样的了。
进程模型的好处是把很多事情扔给 os 去处理了，缺点就是内存开销大。
线程模型相对麻烦的一点就是要管理 race condition, 这点和应用开发无区别, 上古时期可能线程开发还有不好 debug 的问题。
从现代的操作系统来看，进程和线程的区别已经越来越小了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Client communication buffers: SQL is typically used in a “pull” model:
clients consume result tuples from a query cursor by repeatedly issuing
the SQL FETCH request, which retrieve one or more tuples per request.
Most DBMSs try to work ahead of the stream of FETCH requests to
enqueue results in advance of client requests.
In order to support this prefetching behavior, the DBMS worker
may use the client communications socket as a queue for the tuples
it produces. More complex approaches implement client-side cursor
caching and use the DBMS client to store results likely to be fetched
in the near future rather than relying on the OS communications
buffers. -- page 158&lt;/p&gt;
&lt;p&gt;A relational query processor takes a declarative SQL statement,
validates it, optimizes it into a procedural dataflow execution plan,
and (subject to admission control) executes that dataflow program on
behalf of a client program. The client program then fetches (“pulls”) the
result tuples, typically one at a time or in small batches -- page 176&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里其实就是 client side cursor 和 server side cursor中我曾经误解过的地方，相信很多人也曾误解过。
结果集的发送其实不是个 push 的模型，而是个 pull 的模型，只有客户端在 fetch 的时候，服务器才会把数据发送过去，
而之所以在 fetch one row 的时候，后面的 row 也存储到客户端了，其实是数据库对于这种 prefetching 行为作出的优化，
先把所有数据都发送过来，存在客户端。这也导致了 fetch 大量数据时客户端内存的爆炸。这里可以联动http://kamushin.github.io/debug/sscursor_in_mysql.html&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Non-Uniform Memory Access (NUMA) systems provide a sharedmemory
programming model over a cluster of systems with independent
memories. Each system in the cluster can access its own local memory
quickly, whereas remote memory access across the high-speed cluster
interconnect is somewhat delayed. The architecture name comes from
this non-uniformity of memory access times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NUMA架构好像在应用服务器那里还听说过，但是用在数据库这里估计比较难，内存的访问是个大问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Halloween problem arises from a
particular execution strategy for statements like “give everyone whose
salary is under $20K a 10% raise.” A na¨ıve plan for this query pipelines
an index scan iterator over the Emp.salary field into an update iterator
(the left-hand side of Figure 4.3). The pipelining provides good I/O)
locality, because it modifies tuples just after they are fetched from the
B+-tree. This pipelining, however, can also result in the index scan
“rediscovering” a previously modified tuple that moved rightward in
the tree after modification, leading to multiple raises for each employee.
In our example, all low-paid employees will receive repeated raises until
they earn more than $20K. This is not the intention of the statement --page 192&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题就是怎么解决已经更新过的值被再次更新。因为数据是以 B+ 树存储的，
意味着数据被改变后，它存放的位置是变了的，那么依次往后找，可能又找到了它。
解决的方式有两个，要么是 mvcc 下不让一个 sql 语句看到它自己导致的改变。要么用临时表来
先找出所有要改变的行，然后一起做改变。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All DBMSs need some way to “point” to rows in a base table, so that
index entries can reference the rows appropriately. In many DBMSs,
this is implemented by using direct row IDs (RIDs) that are the physical
disk addresses of the rows in the base tables. This has the advantage
of being fast, but has the downside of making base table row movement
very expensive since all secondary indexes that point to this row require
updating. Both finding and updating these rows can be costly. Rows
need to move when an update changes the row size and space is unavailable
on the current page for the freshly updated row. And many rows
need to move when a B+-tree is split. -- page 195 &lt;/p&gt;
&lt;p&gt;DB2 uses a forwarding pointer
to avoid the first problem. This requires a second I/O to find a moved
page, but avoids having to update the secondary index --page 195 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 rowid 来表示存储在数据表中的位置，带来两个问题。第一个问题，数据位置改变后
rowid 就需要改变，那么所有的二级索引都要变，因为二级索引都必须持有这个 rowid 来找到数据。
第二个问题就是在更新时因为 b+树的分裂，很多行都需要改变位置.&lt;br /&gt;
在我看到这个问题的时候，我第一反应是其实没必要改变所有的二级索引，如果二级索引持有rowid 的指针而不是 rowid 的值，那么只要改变 rowid 的值就行了。
Oracle的做法是不在二级索引中加rowid，而是加主键，然后去查一个主键-rowid的 map。不过这个也会带来一个查表的开销。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to reduce locking and lock conflicts some DBMSs support
MVCC or OCC, typically as an add-on to 2PL. --page 221&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我觉得是数据库技术的精髓所在。即让多个事务同时进行的同时，让结果看上去就像他们是串行的执行一样。&lt;br /&gt;
这里我只了解 innodb。 在 rr 级别下，会用 mvcc 做隔离，在 rc 级别下会用乐观锁的 double-check 方案做隔离。
而 mvcc 并不是不加锁了，mvcc 只能让读不受到写锁的影响，而写操作还是要加锁的, 这点上 pg 好像写都没锁了，有空去看看。
double-check 就是先做操作，然后检查在事务执行期间，有没有别的事务改动过值，如果有就需要回滚重做了。
rc 模式下会产生幻读的问题，主要指的是 &lt;code&gt;select for update&lt;/code&gt; 这样的问题。 在第一次&lt;code&gt;select&lt;/code&gt; 的时候，读了 x 条
记录，然后乐观锁检查的时候发现这x 条记录没被改动过，就提交了。这里有个问题，就是如果&lt;code&gt;select&lt;/code&gt;的&lt;code&gt;where&lt;/code&gt; 语句是 range 的，
那么很可能有别的事物在这之后插入了一条记录，造成前一个事务的&lt;code&gt;select&lt;/code&gt; 和&lt;code&gt;update&lt;/code&gt; 的记录数不相等。&lt;br /&gt;
RR的要求笼统点说就是要求同一事务中两次读得到的结果要是一样的。不会因为另一个事物的提交，而产生新的结果，这里不仅包括了值一样，行数也要一样，所以要解决幻读问题。
那么对于简单的select来说，只要通过MVCC读快照的模式就可以保证两次读结果一致。通过比较版本号，永远读取版本号早于事物开始时系统版本号的快照。
但是对于update、delete来说，难道我们要去update一个快照吗？这并没有什么意义。所以我们需要对记录上X锁。然后在遇到update一个范围或者是非唯一索引、无索引的时候（也就是目标可能不止一个），需要用gap锁，把所有目标可能出现的地方都锁住，也防
止新的符合目标的记录插入。 所以说其实MVCC解决了快照读的问题，而gap lock解决的是当前读的问题。
next key lock 就是记录锁加 gap lock, 主要就是解幻读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Latches differ from locks in a number of ways --page 223 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;latch 其实就是编程意义上的一些锁，存在于内存中，比如自旋锁，互斥锁，rcu 锁等等, 其中 rcu 锁挺有那么点 mvcc 的意思。lock 就是数据库层面上为了做隔离而实现的锁，一般会持有的时间比
latch 要长，也会存下来，而不仅仅是内存中的一个变量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Database logging is an extremely complex and detail-oriented topic --page 228 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Can't agree more! 数据库中的日志简直复杂，不仅种类多，而且各种数据库的实现思路也不同。
不过总体来说，数据库里日志主要做三件事情，保障事务的持久化，回滚事务以保障原子性，还有就是故障恢复。
所以日志可以看做是一切状态改变的证明，所以在一个分布式数据库中最重要的就是保证日志的一致，因为日志就是状态，
没落成日志的东西，都是可以扔掉的。
基本的实现技术就是日志先行,WAL.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在刷数据页前先刷日志&lt;/li&gt;
&lt;li&gt;日志需要是有序的&lt;/li&gt;
&lt;li&gt;事务提交前先刷日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是 WAL 的三个规则。
第一条规则保证了原子性，也就是可回滚。第二第三个规则保证了故障后可恢复。
这些知识是我本来就知道的， 接下来是这篇文章告诉我的，real world.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to maximize the speed of the fast path, most commercial
database systems operate in a mode that Haerder and Reuter call
“DIRECT, STEAL/NOT-FORCE” [34]: (a) data objects are updated
in place, (b) unpinned buffer pool frames can be “stolen” (and the modified
data pages written back to disk) even if they contain uncommitted
data, and (c) buffer pool pages need not be “forced” (flushed) to the
database before a commit request returns to the user -- page 229 &lt;/p&gt;
&lt;p&gt;Another fast-path challenge in logging is to keep log records as small
as possible, in order to increase the throughput of log I/O activity.
A natural optimization is to log logical operations (e.g., “insert (Bob,
$25000) into EMP”) rather than physical operations (e.g., the afterimages
for all byte ranges modified via the tuple insertion, including
bytes on both heap file and index blocks.)  -- page 229&lt;/p&gt;
&lt;p&gt;Rather than starting from the very first log
record, a correct result will be obtained by starting recovery at the
oldest of these two log records: (1) the log record describing the earliest
change to the oldest dirty page in the buffer pool, and (2) the log
record representing the start of the oldest transaction in the system.
The sequence number of this point is called the recovery log sequence
number (recovery LSN).) -- page 230&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一个就是说放弃一致性去保证性能。MySQL里等于把双1给去了。&lt;br /&gt;
第二个就是说记录逻辑日志而不是物理日志。
逻辑日志的有点是快和小，缺点是用来做 undo/redo 会比较麻烦。所以 
MySQL 里 binlog 也就是用来复制的 log，是逻辑日志。而 redo/transaction log 是物理日志。&lt;br /&gt;
第三个是在说 LSN，也就是 crash 的最优恢复点。这块我不太了解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Latching in B+-Trees --page 232 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这部分没怎么看懂，甚至我怀疑这里 latch 是不是写错了，应该是 lock。好吧，不过勾起了我一点回忆，就是 
以前看过的哪本书里有关于索引锁的优化的介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One manifestation of the relationship between concurrency and recovery is that writeahead
logging makes implicit assumptions about the locking protocol.
Write-ahead logging requires strict two-phase locking, and will not
operate correctly with non-strict two-phase locking --page236&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;真正有意思的来了，我看了很多书，原子性，隔离性都讲的很多，但是当原子性遇到隔离性呢？
如果要做到 WAL，那么在回滚事务的时候，可能存在一种情况是把已经修改的内容给修改回去。这就要求事务必须是
严格两阶段锁的。在一个非严格的状态下，一旦一个 x 锁被释放了，在同一事务内，是不可以再得到这个 x 锁去回滚数据的。
所以WAL的隐含前提就是，严格两阶段锁的。这段挺精彩的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perhaps the most noticeable changes in this space are
due to the rapidly dropping price of RAM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据库技术和相关论文在现在看来已经是非常成熟了，唯一值得注意的区别就是内存白菜价了。所以带来了这么多内存数据库嘛~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As should be clear from this paper, modern commercial database systems
are grounded both in academic research and in the experiences
of developing industrial-strength products for high-end customers. The
task of writing and maintaining a high-performance, fully functional
relational DBMS from scratch is an enormous investment in time and
energy. Many of the lessons of relational DBMSs, however, translate
over to new domains. Web services, network-attached storage, text and
e-mail repositories, notification services, and network monitors can all
benefit from DBMS research and experience. Data-intensive services
are at the core of computing today, and knowledge of database system
design is a skill that is broadly applicable, both inside and outside the
halls of the main database shops. These new directions raise a number
of research problems in database management as well, and point the
way to new interactions between the database community and other
areas of computing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段是结语，没啥好说的，直接贴上来。&lt;br /&gt;
文章原文来自http://120.52.72.51/perspectives.mvdirona.com/c3pr90ntcsf0/content/binary/ArchitectureOfDatabaseSystem.pdf&lt;br /&gt;
看完后给我感觉是第6章值得一看，前1-3章的话说实话和数据库没太大关系，是个操作系统上的涉及 cpu 和 io 的应用都会涉及。
第4章讲 query 的，这部分其实是编译原理的知识，和数据库关系不大。第5章没什么干货。
第6章是真正数据库相关的内容，概括的比较全面，比『数据库系统基础 高级篇』要实践一点，比『MySQL技术内幕innodb存储引擎 』要理论一点。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Sun, 07 Feb 2016 00:40:21 +0800</pubDate><guid>tag:,2016-02-07:learning/ArchitectureOfDatabaseSystem.html</guid><category>reading</category></item><item><title>Member functions in Python</title><link>/debug/member_function_in_python.html</link><description>&lt;p&gt;&lt;code&gt;self.func&lt;/code&gt; is a operation that bind &lt;code&gt;self&lt;/code&gt; to the function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getrefcount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# output: 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are 3 objects ref to &lt;code&gt;foo&lt;/code&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;foo&lt;/code&gt; as a local variable, &lt;/li&gt;
&lt;li&gt;a ref in getrefcount&lt;/li&gt;
&lt;li&gt;a ref in &lt;code&gt;foo.b.cb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's more like &lt;code&gt;self.func&lt;/code&gt; is &lt;code&gt;func.self = self&lt;/code&gt;, bind &lt;code&gt;self&lt;/code&gt; to the function.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 03 Feb 2016 14:51:01 +0800</pubDate><guid>tag:,2016-02-03:debug/member_function_in_python.html</guid><category>Python</category></item><item><title>loggers and loggers manager in Python</title><link>/debug/logger_in_python.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return a logger with the specified name, creating it if necessary.&lt;/span&gt;

&lt;span class="sd"&gt;    If no name is specified, return the root logger.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Manager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Get a logger with the specified name (channel name), creating it&lt;/span&gt;
&lt;span class="sd"&gt;        if it doesn&amp;#39;t yet exist. This name is a dot-separated hierarchical&lt;/span&gt;
&lt;span class="sd"&gt;        name, such as &amp;quot;a&amp;quot;, &amp;quot;a.b&amp;quot;, &amp;quot;a.b.c&amp;quot; or similar.&lt;/span&gt;

&lt;span class="sd"&gt;        If a PlaceHolder existed for the specified name [i.e. the logger&lt;/span&gt;
&lt;span class="sd"&gt;        didn&amp;#39;t exist but a child of it did], replace it with the created&lt;/span&gt;
&lt;span class="sd"&gt;        logger and fix up the parent/child references which pointed to the&lt;/span&gt;
&lt;span class="sd"&gt;        placeholder to now point to the logger.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;basestring&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A logger name must be string or Unicode&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;_acquireLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PlaceHolder&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;ph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
                    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerClass&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;_loggerClass&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fixupChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fixupParents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerClass&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;_loggerClass&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loggerDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fixupParents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;_releaseLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Loggers&lt;/code&gt; in Python are stored in &lt;code&gt;Logger.manager&lt;/code&gt; with a specified name. If create a logger with a task rather than a file, loggers stored in manager will increase and never be deleted.&lt;br /&gt;
It becomes even worse when the logger has a handler, eg. write logs to database. It may cause a connections leak.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Thu, 21 Jan 2016 14:16:48 +0800</pubDate><guid>tag:,2016-01-21:debug/logger_in_python.html</guid><category>Python</category></item><item><title>SSCursor in MySQL</title><link>/debug/sscursor_in_mysql.html</link><description>&lt;p&gt;There are four kinds of cursors available in MySQL client side programming. In this article, I am going to
introduce the difference between &lt;code&gt;Cursor&lt;/code&gt; the normal one and &lt;code&gt;SSCursor&lt;/code&gt; the server side one and how to use &lt;code&gt;SSCursor&lt;/code&gt;.&lt;br /&gt;
First, let's see the definitions of those four cursors in &lt;code&gt;MySQLdb&lt;/code&gt; source code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorStoreResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorTupleRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is the standard Cursor class that returns rows as tuples&lt;/span&gt;
&lt;span class="sd"&gt;    and stores the result set in the client.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DictCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorStoreResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorDictRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

     &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a Cursor class that returns rows as dictionaries and&lt;/span&gt;
&lt;span class="sd"&gt;    stores the result set in the client.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SSCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorUseResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorTupleRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a Cursor class that returns rows as tuples and stores&lt;/span&gt;
&lt;span class="sd"&gt;    the result set in the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SSDictCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CursorUseResultMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CursorDictRowsMixIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;BaseCursor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This is a Cursor class that returns rows as dictionaries and&lt;/span&gt;
&lt;span class="sd"&gt;    stores the result set in the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, there are two orthogonal features of cursors in MySQLdb. &lt;code&gt;CursorDictRowsMixIn/CursorTupleRowsMixIn&lt;/code&gt; controls result type and 
&lt;code&gt;CursorStoreResultMixIn/CursorUseResultMixIn&lt;/code&gt; which we will focus on in this article controls the result will be store in server or client.&lt;br /&gt;
With the definitions, we know that &lt;code&gt;SSCursor&lt;/code&gt; stores result in the server rather than in the client.&lt;/p&gt;
&lt;h3&gt;server side VS client side&lt;/h3&gt;
&lt;p&gt;Two simple flows show how they works.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client side&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="c"&gt;# mysql_store_result&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce_part_result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# find part of results that can be filled into a network package&lt;/span&gt;
    &lt;span class="n"&gt;fill_network_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_network_package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;server side&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  # mysql_use_result
  while(True):
    result = produce_part_result() # find part of results that can be filled into a network package

    wait_until_the_client_invoke_`mysql_fetch_row()`

    fill_network_package(result)
    send_network_package
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact, the MySQL server will not store results in server even if a &lt;code&gt;SSCursor&lt;/code&gt; is used, it will produce the part of results before fill them into 
the network packages. So don't worry the memory use of the server when use &lt;code&gt;SSCursor&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;how to use SSCursor&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSCursor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is a trap that &lt;code&gt;commit&lt;/code&gt; should be invoked after all of the results have been sent to client. Otherwise, 
&lt;code&gt;2014, "Commands out of sync; you can't run this command now"&lt;/code&gt; error will be raised.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you get Commands out of sync; you can't run this command now in your client code, you are calling client functions in the wrong order.
This can happen, for example, if you are using mysql_use_result() and try to execute a new query before you have called mysql_free_result(). It can also happen if you try to execute two queries that return data without calling mysql_use_result() or mysql_store_result() in between.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;commit&lt;/code&gt; is also a query, or we can say request, so the program should read all of the results then invoke &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;advantages and disadvantages of using SSCursor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Less memory use in the client.&lt;/li&gt;
&lt;li&gt;Get the first row more quickly.&lt;/li&gt;
&lt;li&gt;The whole results sending will be slower.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Tue, 19 Jan 2016 14:55:49 +0800</pubDate><guid>tag:,2016-01-19:debug/sscursor_in_mysql.html</guid><category>MySQL</category><category>Python</category></item><item><title>2015年终总结</title><link>/talk/2015_all.html</link><description>&lt;h3&gt;笔记&lt;/h3&gt;
&lt;p&gt;2015年共记录和收集了295条笔记，涉及了支持向量机，数据库理论，理财，读书，Python，Java，Js，Docker，Vim，Coroutine，Paxos。 &lt;br /&gt;
第一篇于2015-1-1，支持向量机&lt;br /&gt;
最后一篇于2015-12-31，ovrelayfs &lt;br /&gt;
值得庆幸的是即使上班后，我也保持着对未知的渴望，令人可惜的是，这些知识并没有在我手上发挥多少作用。     &lt;/p&gt;
&lt;h3&gt;读书&lt;/h3&gt;
&lt;p&gt;现在读的书不多了，因为太想接受短平快的知识。书看不进。今年寥寥几本。完成度也各有不同   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;effective cpp 100% 讲 cpp 的好书，虽然我现在并不用 cpp&lt;/li&gt;
&lt;li&gt;深入 cpp 对象内存模型 30% 同学推荐的好书，满足了我的猎奇心理。&lt;/li&gt;
&lt;li&gt;做空 30% 这是本经济学大师写的小说，读起来还算有趣。可惜我不懂股市，所以对其中的一些东西并没什么感触。&lt;/li&gt;
&lt;li&gt;阴兽 100% 这是江户川的中篇推理小说集。收录了几部变格推理作品。这几篇都和男女有关，杀人方式也相当变态，有种怪谈小说的感觉。&lt;/li&gt;
&lt;li&gt;边锋 80% 一本讲诉音乐、电影、体育等文娱巨星的传记策。&lt;/li&gt;
&lt;li&gt;解忧杂货铺 70% 东野圭吾的，不是侦探小说，不过也算有意思。&lt;/li&gt;
&lt;li&gt;MySQL技术内幕innodb存储引擎 100% 非常赞的技术书，手不释卷。&lt;/li&gt;
&lt;li&gt;数据库系统基础 高级篇 英文注释本 60% 略偏理论，不过很多地方让我茅塞顿开。&lt;/li&gt;
&lt;li&gt;奥巴马演讲中英文对照 50% 看奥巴马的演讲稿简直是享受&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;游历&lt;/h3&gt;
&lt;p&gt;工作后就没出去玩过...工作前4月份去了趟 nz， 印象最深的几个地方是皇后镇，fox glacier， matamata。 虽然没钱住 hotel，
住的是 backpacker，但是环境完全碾压国内的快捷酒店。不过被冰川风一吹就感冒了，感叹自己体质太差。虽然今年有立志锻炼身体
却也没坚持多久，希望来年能多坚持几天吧。  &lt;/p&gt;
&lt;h3&gt;博客&lt;/h3&gt;
&lt;p&gt;偶尔翻看自己大二时在 csdn 上写的博客，有些知识我都不记得原来我曾学过，于是下决心要重拾博客。现在用的是 pelican 在 github.io 上写
博客，总计写了18篇，有长篇大论也有灵感的乍现，当然也有啥都不是的一坨..渐渐逼自己养成用英语写博客的习惯，虽然还是naïve。&lt;br /&gt;
一年多前写了一篇分析 tornado 源码的文章，今年年末突然又有了看它的兴趣，才发现当时自己的理解实在是不到位，于是又重写了一篇。算是给自己一个交代。  &lt;/p&gt;
&lt;h3&gt;工作&lt;/h3&gt;
&lt;p&gt;第一年的工作，技术上没遇到什么挑战，挑战主要还是来自为人处事上。可能是习惯了大学里混的熟的大家都是同类人，在工作时难免遇到一些我不习惯的事情。
比如大学里大家的目的不是做事，而是学习，所以我们会就一个技术问题纠缠不休，会互相介绍新学到的东西。 可这一切在公司是不一样的，公司里更多的人 focus 在
做事情上，怎么把事情做完，而不是通过技术手段漂亮干净利落的做事，当然更遑论新知识了。&lt;br /&gt;
我自己也有很多想反省的地方，有时候话说的太直太不给情面，当我以为我们在讨论技术的时候可能别人只是想快点把手头的事情搞完。人与人是不同的，我不能要求每个技术岗位
的人都有着对技术的热爱，我应该学习的是如何听懂别人的request，并提供给别人尽可能恰当的 response。&lt;br /&gt;
当然很多问题可以归约为心态问题，希望来年的自己能有个更好的心态吧。&lt;/p&gt;
&lt;h3&gt;剁手&lt;/h3&gt;
&lt;p&gt;今年买的最值的东西当属 qc20i，其次是 duck 2087s。&lt;br /&gt;
买的最不值的当然还是各种衣服。。。&lt;/p&gt;
&lt;h3&gt;音乐&lt;/h3&gt;
&lt;p&gt;作为一个五音不全的人，我都不知道为什么我会有这个总结，大概是忽然迷上了陈粒，以及玩起了 ukulele，但是热情来得快去的也快，我已经忘记把琴扔在哪里了。。&lt;/p&gt;
&lt;h3&gt;总结的总结&lt;/h3&gt;
&lt;p&gt;居然有个总结的总结，就像Python，Ruby 里的 metaclass 一样。 总结的总结只有一句话，又老了一岁，却依然迷茫。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Sat, 02 Jan 2016 00:41:47 +0800</pubDate><guid>tag:,2016-01-02:talk/2015_all.html</guid><category>talk</category></item><item><title>coroutine in Python Tornado and NodeJs</title><link>/learning/coroutine_in_Python_and_Js.html</link><description>&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; and &lt;code&gt;generator&lt;/code&gt; will be the front knowledge of this article. And you should also have some sense of &lt;code&gt;epoll/kqueue&lt;/code&gt; and &lt;code&gt;callback style&lt;/code&gt;.&lt;br /&gt;
Let's enjoy the source code of the implement of coroutine.   &lt;/p&gt;
&lt;h3&gt;Python Tornado&lt;/h3&gt;
&lt;p&gt;A simple async fetch function used by a coroutine in Python, exception handle removed   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TracebackFuture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# TracebackFuture == Future&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# This is a async function&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;future&lt;/code&gt; -- an instance of &lt;code&gt;Future&lt;/code&gt; -- is an object that used to collect and send result to &lt;code&gt;generator&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;A coroutine that uses above &lt;code&gt;fetch&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@gen.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we all know &lt;code&gt;@gen.coroutine&lt;/code&gt; is a syntax sugar of   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;coroutine&lt;/code&gt; wrapper function, also exception handle removed &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_make_coroutine_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace_callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TracebackFuture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# result is a generator if the function is a generator function&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GeneratorType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;# if the function is a generator function&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;yielded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# generator.next() will run the code above and right hand of the generator, for our example request here, http.fetch(uri) will run and return yielded(a instance of Future).&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;Runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_yielded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yielded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Runner is like the co lib in Js written by TJ, Runner use a While True rather than recursive, because recursive is slower in Python.&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# or the function is jsut a normal function&lt;/span&gt;
              &lt;span class="k"&gt;pass&lt;/span&gt; 
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the Tornado usage we can learn that the function after &lt;code&gt;yield&lt;/code&gt; can be either a &lt;code&gt;coroutine&lt;/code&gt; or a normal function.   &lt;br /&gt;
Both of them returns a &lt;code&gt;Future&lt;/code&gt;. You can write &lt;code&gt;return Future&lt;/code&gt; by yourself or use &lt;code&gt;@coroutine&lt;/code&gt;. But make sure your normal function is an async function.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Runner.run&lt;/code&gt; function, exception handle removed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result_future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first_yielded&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;# init of Runner&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c"&gt;# some attrs bind&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_yielded&lt;/span&gt; &lt;span class="c"&gt;# removed some complex logic, just show the basic logic of running the `request` generator.&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c"&gt;# io_loop is a epoll based loop, the second function is a callback function when future is finished.&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Starts or resumes the generator, running until it reaches a&lt;/span&gt;
&lt;span class="sd"&gt;yield point that is not ready.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;yielded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handle_yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yielded&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Runner is like the &lt;code&gt;co&lt;/code&gt; lib in Js written by TJ, Runner use a While True rather than recursive, because recursive is slower in Python.  Both of them do the same thing, that is executing the generator unitl it's done.&lt;/p&gt;
&lt;p&gt;First of all, Runner add the future, or we can say the async function &lt;code&gt;fetch&lt;/code&gt; to &lt;code&gt;io_loop&lt;/code&gt;. If &lt;code&gt;fetch&lt;/code&gt; is finish, itself will invoke the callback function &lt;code&gt;handle_response&lt;/code&gt; to set data to &lt;code&gt;future&lt;/code&gt;. And the &lt;code&gt;io_loop&lt;/code&gt; will invoke another callback function &lt;code&gt;lambda f: self.run()&lt;/code&gt; to run the function &lt;code&gt;run&lt;/code&gt; to get the &lt;code&gt;result&lt;/code&gt; from &lt;code&gt;future&lt;/code&gt; by &lt;code&gt;value = future.result()&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; to the generator by &lt;code&gt;yield = gen.send(value)&lt;/code&gt; and start the next block of the generator function if exists until the whole function is stoped and return a &lt;code&gt;StopIteration&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let us figure out the effect of each object: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generator function: a function with yield statement&lt;/li&gt;
&lt;li&gt;generator: invoke a generator function will return a generator&lt;/li&gt;
&lt;li&gt;coroutine: a wrapper function to wrapper a generator function. It will create a runner to run the generator.&lt;/li&gt;
&lt;li&gt;Future: used to collect and get result, it's a result container.&lt;/li&gt;
&lt;li&gt;Runner: it will register the future to &lt;code&gt;io_loop&lt;/code&gt; and send result back to generator, and repeats unitl generator is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 30 Dec 2015 15:39:07 +0800</pubDate><guid>tag:,2015-12-30:learning/coroutine_in_Python_and_Js.html</guid><category>coroutine</category></item><item><title>Python开发经验--从问题入手</title><link>/learning/python_pro_zh_cn.html</link><description>&lt;h3&gt;上下文管理&lt;/h3&gt;
&lt;p&gt;如果你要做一件事情&lt;code&gt;do_sth()&lt;/code&gt;，在这之前，需要连接数据库，需要持有文件锁。那么你很可能这么写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;getfilelock&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;do_sth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;releasefilelock&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果&lt;code&gt;do_sth&lt;/code&gt;在 N 个地方出现呢？如果我策略修改了，不再需要&lt;code&gt;filelock&lt;/code&gt; 了呢？是不是需要去改这 N 个地方？&lt;br /&gt;
花了一下午去修改了 N 个地方，测试了几次终于没有遗漏后，你发现这个做法多么低效，于是你终于想起来用一个函数去做这件事情。&lt;br /&gt;
你把代码写成了这样  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;prepare&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;do_sth&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;do_sth&lt;/code&gt;所在的 N 个地方，都写满了 &lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; 这一系列和业务逻辑无关的代码, 这使得我们的代码变得冗长。
即使你不在乎自己过了两个月后是否还愿意看这段代码，至少你要照顾下帮你 review 代码的人，一个函数写了500行还能 review 吗？
我认为一个程序员写代码的过程，就是从复杂的逻辑中进行抽象的过程，如果不进行抽象，那么就不是写代码，而是在做翻译。我们来看看这里有什么可以抽象的。&lt;br /&gt;
&lt;code&gt;prepare&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt; 这些是在做什么？是在预备和释放一个可以&lt;code&gt;do_sth&lt;/code&gt;的环境，也就是我们常说的上下文管理。&lt;br /&gt;
Python 提供了&lt;code&gt;with&lt;/code&gt;语句来帮助我们管理上下文。代码变成了这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_sth&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
        &lt;span class="n"&gt;getfilelock&lt;/span&gt;()
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;() &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在帮你 review 代码的人，只会在那 N 个&lt;code&gt;do_sth&lt;/code&gt; 存在的地方，看到  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  with A() as a:
    a.do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很显示的使用了上下文进行管理，分离了业务逻辑和具体实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.
  Simple is better than complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个常见的做法是使用&lt;code&gt;__del__&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
        &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
        &lt;span class="n"&gt;getfilelock&lt;/span&gt;()

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__del__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
        &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
        &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

&lt;span class="n"&gt;a&lt;/span&gt; =  &lt;span class="n"&gt;A&lt;/span&gt;()
&lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个做法的优点是不需要写&lt;code&gt;with&lt;/code&gt; 语句，缺点是这不是明显的上下文管理，对于 Python/Java 这种带
&lt;code&gt;GC&lt;/code&gt; 的语言来说，是不能手动调用一个对象的析构函数的，即使对象离开了作用域，它依然会因为还没有被&lt;code&gt;GC&lt;/code&gt;而存活。&lt;br /&gt;
所以对于锁这样的，我们需要很快去释放的资源，使用&lt;code&gt;with&lt;/code&gt; 更加的可控。
可能会有人去对比 C++ 中的&lt;code&gt;RAII&lt;/code&gt; 规则，Python中是做不到 &lt;code&gt;RAII&lt;/code&gt; 的, 因为以上原因。&lt;/p&gt;
&lt;h3&gt;生成器&lt;/h3&gt;
&lt;p&gt;一个函数如果在代码段中有 &lt;code&gt;yield&lt;/code&gt; 那么它就从一个函数变成了一个 &lt;code&gt;generator&lt;/code&gt;。生成器的好处是保留了一个上下文在需要时去运算。&lt;br /&gt;
同样从一个实际例子出发：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in range(100000):
    do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码，在什么都没做之前，就产生了一个1-100000这些数字的数组，占用了内存。&lt;br /&gt;
而&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in xrange(100000):
    do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这才是我们知道的C++中的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for(int i = 0; i &amp;lt; 100000; i++) {
    do_sth()
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行一次 &lt;code&gt;do_sth&lt;/code&gt;，再生成一次 i 值。 &lt;br /&gt;
所以&lt;code&gt;xrange&lt;/code&gt;会比&lt;code&gt;range&lt;/code&gt;更省内存。（在 Py2 是这样。Py3中，&lt;code&gt;range&lt;/code&gt; 就是 Py2 的 &lt;code&gt;xrange&lt;/code&gt;。 另外据我所知，不存在 xrange 是 C 实现这么一回事)。
再来一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def fetchmany(self, *args, **kwargs):
    &amp;#39;&amp;#39;&amp;#39;
       A generator to fetch data.
       prams: numRows -&amp;gt; the number of rows to fetch.
    &amp;#39;&amp;#39;&amp;#39;
    cur = self._conn.cursor()  
    numRows = 200
    try:
        cur.execute(*args, **kwargs)
        self._conn.commit()
    except Exception as e:
        self.logger.error(str(e))
        self._conn.rollback()
        return
    while True:
        rows = cur.fetchmany(numRows)
        if rows:
            yield rows
        else:
            cur.close()
            return

for rows in fetchmany(sql):
  do_sth_with_rows(rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这就实现了每次取出200条，消费完再取200条。而不是一次性取到内存中。同时也封装了&lt;code&gt;commit&lt;/code&gt;，&lt;code&gt;rollback&lt;/code&gt;等操作。&lt;/p&gt;
&lt;p&gt;生成器也可以用来构造对称式协程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return 3 random integers between 0 and 9&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Displays a running average across lists of integers sent to it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The running average is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_items_seen&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Produces a set of values and forwards them to the pre-defined consumer&lt;/span&gt;
&lt;span class="sd"&gt;    function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Produced {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Producing...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个例子中， 不需要队列，就做到了一个一对一的生产与消费。当然这个1对1的并没有什么实际意义。对于协程和生成器的作用，如果感兴趣，可以看看&lt;code&gt;Tornado&lt;/code&gt;的实现。&lt;/p&gt;
&lt;h3&gt;Exception&lt;/h3&gt;
&lt;p&gt;这块Python和其他语言没什么不同的，拿出来讲是因为看到很多代码里充满了魔数。&lt;br /&gt;
比如 &lt;code&gt;return 'unknown'&lt;/code&gt;. 既然是&lt;code&gt;unknown&lt;/code&gt;就应该抛出异常。而不是用一堆的常量字符串在各个函数直接传来传去。&lt;br /&gt;
类似的例子还有&lt;code&gt;return 'ok'&lt;/code&gt;, &lt;code&gt;return 'mysql'&lt;/code&gt;, &lt;code&gt;return 2&lt;/code&gt;. &lt;br /&gt;
另外尽可能抛出和接收特定的异常。&lt;/p&gt;
&lt;h3&gt;Functional Programming&lt;/h3&gt;
&lt;p&gt;Python 其实是不怎么 FP 的，不过一些基本的 FP 支持还是有的。&lt;br /&gt;
比如高阶函数，&lt;code&gt;map reduce filter&lt;/code&gt;。&lt;br /&gt;
用&lt;code&gt;map reduce filter&lt;/code&gt; 可以更好的做抽象。&lt;br /&gt;
&lt;code&gt;reduce(lambda x, y: x + y, query_res)&lt;/code&gt;&lt;br /&gt;
很简单就能看出，虽然我不知道具体 &lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; 是什么，但是我知道，这是把 &lt;code&gt;query_res&lt;/code&gt; 中的每个值加到一起。&lt;br /&gt;
不用去管&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;的类型，只需要他们支持&lt;code&gt;+&lt;/code&gt;操作。这种编程思维可以再次把业务逻辑和实现分开。&lt;/p&gt;
&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;装饰器算是 Python 的一大亮点。看下面这个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  begin = time.time()
  do_sth()
  end = time.time()
  print &amp;#39;do sth used %s second&amp;#39; % (end-begin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;业务逻辑里混杂着统计时间的逻辑。添加要加三行，什么时候不要了，又要删三行。
如果用上装饰器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def logtime(func):
    @wraps(func)
    def wrapper(*args, **kwds):
        start_time = time.time()
        ret = func(*args, **kwds)
        use_time = time.time() - start_time
        if use_time &amp;gt; 1.0:
            logging.info(&amp;quot;%s use %s s&amp;quot;, func.__name__, use_time)
        return ret
    return wrapper

@logtime
def do_sth():
  ...



do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码被调用的时候，不需要知道做了时间的统计，也不需要把统计代码混杂在业务逻辑中。 &lt;br /&gt;
考虑下面的代码，用 Java 应该怎么实现？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def make_spin(spin_style=Default, words=&amp;quot;&amp;quot;):
    spinner = Spinner(spin_style)
    queue = Queue()

    def add_queue(func):
        @wraps(func)
        def wrapper():
            func()
            queue.put_nowait(1)
        return wrapper

    def decorator(func):
        @wraps(func)
        def wrapper():
            process = Process(target=add_queue(func))
            process.start()
            while queue.empty():
                print(text_type(&amp;quot;\r{0}    {1}&amp;quot;).format(spinner.next(), words),
                      end=&amp;quot;&amp;quot;)
                sys.stdout.flush()
                time.sleep(0.1)
            print(&amp;#39;&amp;#39;)
        return wrapper
    return decorator
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Java中同样也有&lt;code&gt;@&lt;/code&gt;字符的运用，不同的是，Java中那个叫&lt;code&gt;annotation&lt;/code&gt;, 也就是注解。 
注解是编译期的，它是用来做反射的，也就是提供给外部一些关于我本身信息的。和 Python 的用法没有关系。  &lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;下面直接用一些例子来显示 Python2中的 Unicode 和 Str 的关系。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;我&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;我&amp;#39;.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; b
u&amp;#39;\u6211&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;utf-8&amp;#39;)
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;gbk&amp;#39;)
&amp;#39;\xce\xd2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很明显可以看出，Python2中，str 类型其实是 byte 字节流。而 Unicode 类型则是表示了 Unicode 字符号。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 23 Dec 2015 10:49:26 +0800</pubDate><guid>tag:,2015-12-23:learning/python_pro_zh_cn.html</guid><category>Python</category></item><item><title>Compare assert exception in should(JavaScript) and unittest(Python)</title><link>/learning/compare_assert_exception.html</link><description>&lt;h3&gt;should&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;should&lt;/code&gt;, exception is asserted like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;should throw when n isnt Number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abcd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n should be a Number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This library adds an attribute &lt;code&gt;should&lt;/code&gt; to  &lt;code&gt;Object&lt;/code&gt;. The &lt;code&gt;should&lt;/code&gt; attribute includes a bunch of assert functions. With this, you can do
&lt;code&gt;(5).should.above(3)&lt;/code&gt;. It will be even harder in Python, because types defined in C cannot be monkeypatched.
The implement of &lt;code&gt;should.throw&lt;/code&gt; is a simple &lt;code&gt;try/catch&lt;/code&gt;.  &lt;/p&gt;
&lt;h3&gt;unittest&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;assertRaises&lt;/code&gt; in &lt;code&gt;unittest&lt;/code&gt;, exception is asserted like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaisesRegexp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;literal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;XYZ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's much more simple than another way, because we don't need to pass test function as an argument to the assert function, no matter the argument called &lt;code&gt;this&lt;/code&gt; lol.&lt;br /&gt;
Exception is not catched by a &lt;code&gt;try/except&lt;/code&gt; statement, but in &lt;code&gt;__exit__&lt;/code&gt; context manager.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Tue, 22 Dec 2015 15:16:23 +0800</pubDate><guid>tag:,2015-12-22:learning/compare_assert_exception.html</guid><category>unittest</category></item><item><title>Write Python like a Pro</title><link>/learning/python_pro.html</link><description>&lt;h3&gt;Context Managers&lt;/h3&gt;
&lt;p&gt;If you have a function &lt;code&gt;do_sth()&lt;/code&gt;, before invoking this method, it needs connect to Database and get filelock. And code maybe like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    db.connect()
    getfilelock()
    do_sth()
  except:
    ...
  finally:
    releasefilelock()
    db.close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if &lt;code&gt;do_sth&lt;/code&gt; be called at many palces? If filelock is now don't need, code should be rewrited at each palce when &lt;code&gt;do_sth&lt;/code&gt; is called. &lt;br /&gt;
After wasting a whole afternoon rewriting the code, you find it's useful to have a function to do this. Then code will be:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  try:
    prepare()
    do_sth()
  except:
    ...
  finally:
    close()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each palce &lt;code&gt;do_sth&lt;/code&gt; invoked is full of &lt;code&gt;prepare/close&lt;/code&gt;. And both of them has no relation with bussiness logic. It makes the code longer and longer.&lt;br /&gt;
Although you don't care about the cofusion you may have when you see these code after 2 months(because the only one line of bussiness logic code is hidden in seven lines of non-business code),
you should be friendly to those who review your code. A funciton more than 500 lines is horrible. I think writing code is an action to get abstraction from complex logic, if there is no 
abstraction in code, it's not coding but translating.
What &lt;code&gt;prepare/close&lt;/code&gt; doed indeed? They are preapre or release an environment to &lt;code&gt;do_sth&lt;/code&gt;, that is context.&lt;br /&gt;
Python use &lt;code&gt;with&lt;/code&gt; statement to manage context.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_sth&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="nb"&gt;pass&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
      &lt;span class="n"&gt;getfilelock&lt;/span&gt;()
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
      &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
      &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;() &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;a:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the reviewer will only see&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  with A() as a:
    a.do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Context manager is uesd explictly. Bussiness logic and impelement are splited.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.
  Simple is better than complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anthor common way is using &lt;code&gt;__del__&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;():
      &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):
          &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;connect&lt;/span&gt;()
          &lt;span class="n"&gt;getfilelock&lt;/span&gt;()

      &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__del__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;type&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):
          &lt;span class="n"&gt;releasefilelock&lt;/span&gt;()
          &lt;span class="n"&gt;db&lt;/span&gt;.&lt;span class="nb"&gt;close&lt;/span&gt;()

  &lt;span class="n"&gt;a&lt;/span&gt; =  &lt;span class="n"&gt;A&lt;/span&gt;()
  &lt;span class="n"&gt;a&lt;/span&gt;.&lt;span class="n"&gt;do_sth&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The good part of this way is no need of wiring &lt;code&gt;with&lt;/code&gt;. But it's not a explicit context manager.
To &lt;code&gt;GC&lt;/code&gt; languages like Python or Java, there is no way to invoke a destructor method.
Although object has leaved the scope, if it was not cleaned by &lt;code&gt;GC&lt;/code&gt;, the resource it takes will not be released.&lt;br /&gt;
If the resource is database connect, close lately is acceptable, but to resource like &lt;code&gt;mutex&lt;/code&gt;, we need &lt;code&gt;with&lt;/code&gt; statement to release it immediately.&lt;/p&gt;
&lt;h3&gt;Generation&lt;/h3&gt;
&lt;p&gt;A function with &lt;code&gt;yield&lt;/code&gt; is a generator. Generation maintains a context to eval result when it is need.
For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in range(100000):
      do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It creates an array of 1-100000 before &lt;code&gt;do_sth&lt;/code&gt; which will make a waste of memory. 
Another loop with &lt;code&gt;xrange&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for i in xrange(100000):
      do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is what we know in C++, &lt;code&gt;do_sth&lt;/code&gt; once and then &lt;code&gt;i++&lt;/code&gt;, loops. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  for(int i = 0; i &amp;lt; 100000; i++) {
      do_sth()
  }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So &lt;code&gt;xrange&lt;/code&gt; will use less memory than &lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    def fetchmany(self, *args, **kwargs):
        &amp;#39;&amp;#39;&amp;#39;
           A generator to fetch data.
        &amp;#39;&amp;#39;&amp;#39;
        cur = self._conn.cursor()  
        numRows = 200
        try:
            cur.execute(*args, **kwargs)
            self._conn.commit()
        except Exception as e:
            self.logger.error(str(e))
            self._conn.rollback()
            return
        while True:
            rows = cur.fetchmany(numRows)
            if rows:
                yield rows
            else:
                cur.close()
                return

for rows in fetchmany(sql):
    do_sth_with_rows(rows)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;fetchmany&lt;/code&gt; is a generator, and a generator is iteratable. Only 200 rows will be taken in a patch, not all of the results.  &lt;/p&gt;
&lt;p&gt;Generator can also be used to make a co-routine.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return 3 random integers between 0 and 9&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Displays a running average across lists of integers sent to it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;data_items_seen&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The running average is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;running_sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_items_seen&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Produces a set of values and forwards them to the pre-defined consumer&lt;/span&gt;
&lt;span class="sd"&gt;    function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Produced {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;consume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;producer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;produce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Producing...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;producer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More useful cases in &lt;code&gt;Tornado&lt;/code&gt;.  &lt;/p&gt;
&lt;h3&gt;Decorator&lt;/h3&gt;
&lt;p&gt;Decorator is a useful syntax sugar to split implement detail.
For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  begin = time.time()
  do_sth()
  end = time.time()
  print &amp;#39;do sth used %s second&amp;#39; % (end-begin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In above code, profile code is mixed in logic code.&lt;br /&gt;
By decorator  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def logtime(func):
    @wraps(func)
    def wrapper(*args, **kwds):
        start_time = time.time()
        ret = func(*args, **kwds)
        use_time = time.time() - start_time
        if use_time &amp;gt; 1.0:
            logging.info(&amp;quot;%s use %s s&amp;quot;, func.__name__, use_time)
        return ret
    return wrapper

@logtime
def do_sth():
  ...



do_sth()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When &lt;code&gt;do_sth&lt;/code&gt; be invoked, the caller don't need to know about &lt;code&gt;logtime&lt;/code&gt;.
There is also a &lt;code&gt;@&lt;/code&gt; used in Java. But that is a &lt;code&gt;annotation&lt;/code&gt;, it's not run-time but a complie time reflect.&lt;br /&gt;
That has no relation with decorator in Python.&lt;/p&gt;
&lt;h3&gt;Unicode&lt;/h3&gt;
&lt;p&gt;Here are some code to show the relation with &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; a = &amp;#39;我&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(a)
&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b = &amp;#39;我&amp;#39;.decode(&amp;#39;utf-8&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; b
u&amp;#39;\u6211&amp;#39;
&amp;gt;&amp;gt;&amp;gt; type(b)
&amp;lt;type &amp;#39;unicode&amp;#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;utf-8&amp;#39;)
&amp;#39;\xe6\x88\x91&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b.encode(&amp;#39;gbk&amp;#39;)
&amp;#39;\xce\xd2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Python2, &lt;code&gt;str&lt;/code&gt; is byte array and &lt;code&gt;unicode&lt;/code&gt; is charset code of the character.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 21 Dec 2015 17:26:57 +0800</pubDate><guid>tag:,2015-12-21:learning/python_pro.html</guid><category>Python</category></item><item><title>New fxg for me</title><link>/tool/fxg_new.html</link><description>&lt;p&gt;&lt;a href="http://kamushin.github.io/tool/fxg.html"&gt;previos article about fxg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fxg&lt;/code&gt; means &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; then &lt;code&gt;grep&lt;/code&gt;. It has a insufferable performace, so &lt;br /&gt;
I use &lt;code&gt;ag&lt;/code&gt; to instead, after forking some tools made by &lt;a href="https://github.com/lilydjwg/search-and-view"&gt;lilydjwg&lt;/a&gt;
The tool chain is used for finding pattern in files and opening file by vim.
I rewrite a simple version of &lt;code&gt;vv&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/fxg.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;file_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;
            &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Insert of writing regex pattern to match the complex colored output, I call ag the second time to gen a un-colored output to log file.
And I also add a &lt;code&gt;-G&lt;/code&gt; for file pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color $2 | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup $2 | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Update: 15-12-9&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ag&lt;/code&gt; on my MacOSX has an unstable sorting result. It makes the twice call of &lt;code&gt;Ag&lt;/code&gt; return different order.&lt;br /&gt;
So I add &lt;code&gt;sort&lt;/code&gt; to this command. 
&lt;code&gt;-0&lt;/code&gt; or &lt;code&gt;-print0&lt;/code&gt; will take &lt;code&gt;space&lt;/code&gt; in filename as a special character.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color -0 $2 | sort | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup -0 $2 | sort | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 09 Dec 2015 09:39:29 +0800</pubDate><guid>tag:,2015-12-09:tool/fxg_new.html</guid><category>Ag</category><category>Linux</category></item><item><title>Do not use LOB in Oracle(OLTP) -- record an optimization experience</title><link>/debug/Do-not-use-lob.html</link><description>&lt;h2&gt;Front knowledge&lt;/h2&gt;
&lt;h3&gt;LOB in Oracle&lt;/h3&gt;
&lt;p&gt;LOB is used in Oracle to store text logger than 4000.  &lt;br /&gt;
We don't use Oracle in a OLTP system. &lt;br /&gt;
Conside of RT and IO, we choose some other ways to provide log text. For example, CDN.&lt;/p&gt;
&lt;h3&gt;LOB in cx_Oracle&lt;/h3&gt;
&lt;p&gt;As mentioned in &lt;a href="http://kamushin.github.io/learning/python_oracle.html"&gt;Some tricks when using cx_Oracle&lt;/a&gt;, we must convert LOB to string for each line we fetched.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  self._cursor.execute(sql, *args)
    def fix_lob(row):
        def convert(col):
            if isinstance(col, cx_Oracle.LOB):
                return str(col)
            else:
                return col

        return [convert(c) for c in row]

  return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it will bring out a significant cost of CPU time in Python, which you chould see later.&lt;/p&gt;
&lt;h2&gt;Profile&lt;/h2&gt;
&lt;p&gt;I use &lt;code&gt;CProfile&lt;/code&gt; to profile my Python code. It's very easy to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;CProfile&lt;/span&gt;
  &lt;span class="n"&gt;CProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unittest....&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is part of my profile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="nx"&gt;ncalls&lt;/span&gt;  &lt;span class="nx"&gt;tottime&lt;/span&gt;  &lt;span class="nx"&gt;percall&lt;/span&gt;  &lt;span class="nx"&gt;cumtime&lt;/span&gt;  &lt;span class="nx"&gt;percall&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;209391&lt;/span&gt; &lt;span class="mf"&gt;1286.084&lt;/span&gt;  &lt;span class="mf"&gt;0.006&lt;/span&gt; &lt;span class="mf"&gt;1286.559&lt;/span&gt;    &lt;span class="mf"&gt;0.006&lt;/span&gt;   &lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;116&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="mi"&gt;4630&lt;/span&gt;   &lt;span class="mf"&gt;346.679&lt;/span&gt;   &lt;span class="mf"&gt;0.075&lt;/span&gt;  &lt;span class="mf"&gt;346.679&lt;/span&gt;    &lt;span class="mf"&gt;0.075&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;executemany&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cx_Oracle.Cursor&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="mi"&gt;4654&lt;/span&gt;   &lt;span class="mf"&gt;90.788&lt;/span&gt;    &lt;span class="mf"&gt;0.020&lt;/span&gt;   &lt;span class="mf"&gt;90.788&lt;/span&gt;    &lt;span class="mf"&gt;0.020&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commit&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cx_Oracle.Connection&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;200k times call of &lt;code&gt;convert&lt;/code&gt; cost 2000+ sec. Is't because Python &lt;code&gt;LOB=&amp;gt;str&lt;/code&gt; is very slow.  &lt;br /&gt;
4k times of &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;executemany&lt;/code&gt; because of the lag between two servers.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Tue, 08 Dec 2015 01:52:18 +0800</pubDate><guid>tag:,2015-12-08:debug/Do-not-use-lob.html</guid><category>Oracle</category><category>Python</category></item><item><title>Difference between ArrayList and Arrays.asList() in Java</title><link>/learning/java-arrayList.html</link><description>&lt;p&gt;&lt;code&gt;Arrays.asList&lt;/code&gt; does not return an &lt;code&gt;ArrayList&lt;/code&gt; instance which has an &lt;code&gt;add&lt;/code&gt; method implemented correctly. &lt;br /&gt;
It returns a List that is a "view" onto the array - a wrapper that makes the array look like a list&lt;br /&gt;
Changes to the returned list &lt;code&gt;write through&lt;/code&gt; to the array&lt;br /&gt;
Since the returned instance is a fixed-size array, the &lt;code&gt;add&lt;/code&gt; method always throw an UnsupporedOperationException.&lt;br /&gt;
If want to use &lt;code&gt;add&lt;/code&gt; method  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  new ArrayList(Arrays.asList(myArray)); //copies the content of the array to a new ArrayList 
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Tue, 01 Dec 2015 14:17:02 +0800</pubDate><guid>tag:,2015-12-01:learning/java-arrayList.html</guid><category>Java</category></item><item><title>Some tricks when using cx_Oracle</title><link>/learning/python_oracle.html</link><description>&lt;p&gt;cx_Oracle is a Python module that enables access to Oracle databases.&lt;br /&gt;
However, users may have confusion due to some fetures of this module.&lt;/p&gt;
&lt;h4&gt;Thread safe&lt;/h4&gt;
&lt;p&gt;The default setting of cx_Oracle is not thread-safe.  &lt;br /&gt;
So if user have multiple threads, make sure that specifying &lt;code&gt;threaded=True&lt;/code&gt; when creating the connection.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;conn = cx_Oracle.connect(user + '/' + passwd + "@" + host + "/" + db, threaded=True)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;Otherwise, the program will crash with error message like    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ORA-24550: signal received: [si_signo=11] [si_errno=0] [si_code=2] [si_addr=0000000000000000]&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Fetch LOB column&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Internally, Oracle uses LOB locators which are allocated based on the cursor array size. Thus, it is important that the data in the LOB object be manipulated before another internal fetch takes place. The safest way to do this is to use the cursor as an iterator. In particular, do not use the fetchall() method. The exception “LOB variable no longer valid after subsequent fetch” will be raised if an attempt to access a LOB variable after a subsequent fetch is detected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use curosr as an iterator rather than use &lt;code&gt;fetchall()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;self._cursor.execute(sql, *args)
def fix_lob(row):
    def convert(col):
        if isinstance(col, cx_Oracle.LOB):
            return str(col)
        else:
            return col

    return [convert(c) for c in row]

return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Fri, 27 Nov 2015 16:01:57 +0800</pubDate><guid>tag:,2015-11-27:learning/python_oracle.html</guid><category>Python</category></item><item><title>Use webpack together with browser-sync</title><link>/tool/webpack_and_browser-sync.html</link><description>&lt;p&gt;Here are some tips about using &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;Browsersync&lt;/code&gt; to improve working speed.&lt;/p&gt;
&lt;h3&gt;Browsersync&lt;/h3&gt;
&lt;p&gt;Browsersync makes your browser testing workflow faster by synchronising URLs, interactions and code changes across multiple devices. &lt;br /&gt;
&lt;code&gt;npm install browser-sync@2.7.1 -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Proxy&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;browser-sync start --proxy localhost:8888 --port 4000 --files index.html --files src/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Used to proxy ajax request to back-end server.&lt;/p&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;
&lt;p&gt;With webpack, don't need &lt;code&gt;require.js&lt;/code&gt; and &lt;code&gt;require-react-plugin&lt;/code&gt; loading in &lt;code&gt;index.html&lt;/code&gt;. Very useful to me. &lt;br /&gt;
&lt;code&gt;npm install webpack -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Work together&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;npm install -g browser-sync-webpack-plugin&lt;/code&gt;
And config &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var BrowserSyncPlugin = require(&amp;#39;browser-sync-webpack-plugin&amp;#39;);
module.exports = {
entry: &amp;#39;./src/js/index.js&amp;#39;,
output: {
    publicPath: &amp;#39;./dist/&amp;#39;,
    path: &amp;#39;./dist/&amp;#39;,
    filename: &amp;#39;bundle.js&amp;#39;,
    pathinfo: true
},
resolve: {
    root: &amp;#39;.&amp;#39;
},
module: {
    loaders: [
    {test: /\.js/, loader: &amp;#39;jsx-loader?harmony&amp;#39;}
    ]
},
plugins: [
    new BrowserSyncPlugin({
    host: &amp;#39;localhost&amp;#39;,
    port: 4000,
    proxy: &amp;#39;localhost:8888&amp;#39;,
    files: &amp;#39;src/*&amp;#39;,
    files: &amp;#39;index.html&amp;#39;
})  
]
};
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 28 Oct 2015 16:56:48 +0800</pubDate><guid>tag:,2015-10-28:tool/webpack_and_browser-sync.html</guid><category>front-end</category></item><item><title>MySQL 优化学习之路</title><link>/learning/mysql_opti.html</link><description>&lt;h3&gt;Overview&lt;/h3&gt;
&lt;h4&gt;DB Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;table structure: column data type | table with few or many columns&lt;/li&gt;
&lt;li&gt;right indexs&lt;/li&gt;
&lt;li&gt;storage engine&lt;/li&gt;
&lt;li&gt;data format: compression or not&lt;/li&gt;
&lt;li&gt;locking strategy&lt;/li&gt;
&lt;li&gt;caching size&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Hardware Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Disk seeks 10ms&lt;/li&gt;
&lt;li&gt;Disk reading and writing. easier to optimize than disk seeks&lt;/li&gt;
&lt;li&gt;CPU cycles large tables compared to the amount of memory ???&lt;/li&gt;
&lt;li&gt;Memory bandwith when CPU needs more data to fit in CPU cache ???&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use explain&lt;/li&gt;
&lt;li&gt;indexs&lt;/li&gt;
&lt;li&gt;avoid full table scan&lt;/li&gt;
&lt;li&gt;analyze table periodically&lt;/li&gt;
&lt;li&gt;read-only transactions 5.6.4+ // had read an article on ATA about this&lt;/li&gt;
&lt;li&gt;avoid transforming query hard to read, optimizer will do this&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SELECT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cover index: In some cases, MySQL can read rows from the index without even consulting the data file. If all columns used from the index are numeric, only the index tree is used to resolve the query. // need numeric ? TODO&lt;/li&gt;
&lt;li&gt;range index&lt;ul&gt;
&lt;li&gt;MySQL does not support merging ranges， use union&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; To permit use of index dives for comparisons of up to N equality ranges, set &lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; to N + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index extensions: add pk after each secondary index  5.6.9&lt;/li&gt;
&lt;li&gt;two kinds of filesort&lt;/li&gt;
&lt;li&gt;group by: loose index scan vs tight index scan, depends on distribution of column(cardinality).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;INSERT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use INSERT statements with multiple VALUES lists to insert several rows at a time will be faster than using separate single-row INSERT statements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bulk_insert_buffer_size&lt;/code&gt; for large INSERT&lt;/li&gt;
&lt;li&gt;insert values explicitly only when the value to be inserted differs from the default.&lt;/li&gt;
&lt;li&gt;Bulk insert speed up (https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-bulk-data-loading.html)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;same with INSERT&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DELETE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;truncate&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Optimizing INFORMATION_SCHEMA Queries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Try to use constant lookup values for database and table names in the WHERE clause&lt;/li&gt;
&lt;li&gt;Write queries that minimize the number of table files that must be opened (???)&lt;/li&gt;
&lt;li&gt;Use EXPLAIN to determine whether the server can use INFORMATION_SCHEMA optimizations for a query&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Index&lt;/h3&gt;
&lt;p&gt;Index can improve the speed of determining rows which match where statements. But useless indexs are waste of space and time for db to determinie whcih index to use and need more time to create indexs when insert.&lt;/p&gt;
&lt;h4&gt;How MySQL use index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the most seletive indexs&lt;/li&gt;
&lt;li&gt;leftmost prefix of the index&lt;/li&gt;
&lt;li&gt;join: &lt;ul&gt;
&lt;li&gt;use same data type will be faster // varchar and char are the same if their size equal.&lt;/li&gt;
&lt;li&gt;must use the same character set when compare string columns&lt;/li&gt;
&lt;li&gt;comparison of dissimilar column may prevent use of indexs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIN() MAX() of column &lt;code&gt;key_col&lt;/code&gt; will be O(1) if all &lt;code&gt;key_part_N&lt;/code&gt; before &lt;code&gt;key_col&lt;/code&gt; in where statement is constant.&lt;/li&gt;
&lt;li&gt;cover index // here not mention numeric&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Primary Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use numeric pk&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Foreign Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;split low-frequently data into separate table&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Column Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;prefix index &lt;/li&gt;
&lt;li&gt;fulltext for char varchar and text&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Statistic&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expr1 = expr2 is not true when expr1 or expr2 (or both) are NULL&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Sun, 25 Oct 2015 22:56:42 +0800</pubDate><guid>tag:,2015-10-25:learning/mysql_opti.html</guid><category>MySQL</category></item><item><title>Pip 无网络环境安装包</title><link>/tool/2015-10-20.html</link><description>&lt;p&gt;在内网部署 Python 的时候, 因为不能用连接到 &lt;code&gt;pip&lt;/code&gt; 源所以仅仅靠 requirement.txt 是不够的.&lt;br /&gt;
我们需要 wheel 这个工具帮我们把需要的依赖先打成本地包.&lt;br /&gt;
&lt;code&gt;pip wheel --wheel-dir=/tmp/wheelhouse tornado&lt;/code&gt;&lt;br /&gt;
这样 tornado 的依赖包就全在 wheelhouse 里了 &lt;br /&gt;
我们面对一个更悲剧的情况, 线上连 &lt;code&gt;pip&lt;/code&gt; 都没, 那么只能先在线下先给装好包.&lt;br /&gt;
&lt;code&gt;pip install --use-wheel --no-index --find-links=/tmp/wheelhouse -t  /tmp/wheelhouse/code tornado&lt;/code&gt;&lt;br /&gt;
这样包就全在 code 里了, 可以直接复制到线上. &lt;strong&gt;要注意编译环境一致和 so 库&lt;/strong&gt;   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Tue, 20 Oct 2015 22:28:48 +0800</pubDate><guid>tag:,2015-10-20:tool/2015-10-20.html</guid><category>Python</category></item><item><title>当我们在谈论异常时我们在谈论什么?</title><link>/learning/2015-10-19-2.html</link><description>&lt;h3&gt;异常是什么&lt;/h3&gt;
&lt;p&gt;异常是一种用来分离程序运行中那1%会走进的&lt;strong&gt;岔路&lt;/strong&gt;的分支控制手段.&lt;/p&gt;
&lt;h3&gt;语言是如何实现它的&lt;/h3&gt;
&lt;p&gt;曾经, 大概在我大三末大四初的时候, 有幸读了本 C 接口与实现, 书里用 &lt;code&gt;setjump &amp;amp; longjmp&lt;/code&gt; 和宏的方式向我展现了如何在 C 语言中实现它.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception is a beautiful goto. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然, sjlj 只是实现异常的一种, 还有基于 table 的方式等等, 更加高效, 在不进入异常时不产生副作用.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 23:40:31 +0800</pubDate><guid>tag:,2015-10-19:learning/2015-10-19-2.html</guid><category>exception</category></item><item><title>把Capslock重定向为Ctrl</title><link>/nix/Change_caplocks.html</link><description>&lt;p&gt;Capslock这键平时没多大用，而Ctrl则用的非常多，所以把Capslock换成Ctrl也算是个比较常见的需求。&lt;/p&gt;
&lt;p&gt;以前我是把xmodmap里swap脚本小改一下，也算在Arch上能用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最近换了deepin后，这脚本会让Capslock啥也不做。于是找了个更加合理的脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比较一下， 就是少了一行对Control的设置，我猜之前出错的原因是Control_L不能被绑到两个keysym上&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 23:16:22 +0800</pubDate><guid>tag:,2015-10-19:nix/Change_caplocks.html</guid><category>Linux</category></item><item><title>Mac上遇到了一个Chrome和Safari被劫持的问题</title><link>/nix/Chrome_be_hijacked.html</link><description>&lt;p&gt;大概是因为下载了恶意的软件, 导致Chrome和Safari打开各种网站都出现广告. 检查过DNS
也更改过DNS, 无效. 目前没找到原因, 只能将就这用FireFox和Chromium, 这俩货没被劫持&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:nix/Chrome_be_hijacked.html</guid><category>杂事</category></item><item><title>Pelican上增加评论和自动删除文章的一些坑</title><link>/nix/Pelican.html</link><description>&lt;h3&gt;增加评论功能&lt;/h3&gt;
&lt;p&gt;这个网上有很多描述，主要是去disqus注册下，然后设置下配置文件&lt;a href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html"&gt;example&lt;/a&gt;坑主要在于Pelican的默认主题是没有disqus的模板的，所以虽然看到了对disqus的请求，却看不到评论区。需要自己下个比较全的主题。&lt;/p&gt;
&lt;h3&gt;自动删除文件&lt;/h3&gt;
&lt;p&gt;在content里删除了md文件，重新&lt;code&gt;make html&lt;/code&gt;后在output中依然会看到那个md文件生成的html文件。&lt;/p&gt;
&lt;p&gt;一个方法是加入配置&lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;来每次清空output，但是这带来了两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动日期没了 目前无法解决&lt;/li&gt;
&lt;li&gt;版本控制没了，可以通过加入&lt;code&gt;OUTPUT_RETENTION = [".hg", ".git", ".bzr"]&lt;/code&gt;来解决&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:nix/Pelican.html</guid><category>Pelican</category></item><item><title>用正则来解决grep时行过长的问题</title><link>/tool/fxg.html</link><description>&lt;p&gt;之前自己写了个函数用来查找文件中匹配关键字的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg_old(){
    find . -type f -name $1 | xargs grep $2 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是今天在用的时候，发现如果匹配到的行过长的话，输出很难看，而且也不知道哪里匹配到了。&lt;/p&gt;
&lt;p&gt;所以就想能不能对行的长度做限制，但是grep里并没有这个参数选项。于是想到了用正则去控制匹配串。在so上找到了这样的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; fxg(){
    find . -type f -name $1 | xargs grep -oE &amp;quot;.{0,20}$2.{0,20}&amp;quot;
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-o 只输出匹配的部分。 如果只加这个选项，那么就输出N行的$2。&lt;/p&gt;
&lt;p&gt;-E 使用扩展的正则(有人提到用-P，Perl正则，但是在我这里出现错误)&lt;/p&gt;
&lt;p&gt;后面的正则表达式用来匹配前后20个字符。&lt;/p&gt;
&lt;p&gt;这样就满足了我的需求&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:tool/fxg.html</guid><category>Linux</category></item><item><title>TCP自连接</title><link>/learning/tcp-self-connect.html</link><description>&lt;p&gt;陈硕的第8节视频介绍了TCP自连接这个特性。&lt;/p&gt;
&lt;p&gt;程序代码类似于:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for i in range(65536):
    try:
        sock = socket.create_connection((&amp;#39;localhost&amp;#39;, port))
        time.sleep(60*60)
    except:
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要是这样的一个逻辑:  &lt;/p&gt;
&lt;p&gt;首先在循环中每次尝试创建连接的时候，TCP会分配一个IP给客户端，这个IP不是每次都随机的而是会自增。在最多尝试了65536或更少次后，一定会恰好和我们输入的port参数重合(如果port没有被占用)，那么就产生了一个客户端连接到自己的现象。要避免这个现象，可以在网络库中进行判断。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:learning/tcp-self-connect.html</guid><category>网络编程</category></item><item><title>开始学习陈硕的网络编程课程</title><link>/learning/test.html</link><description>&lt;p&gt;很久前就关注了陈硕的这门课，等着他结课后一次性看完，截止到现在他已经更新了40多节了，
就要结束了，所以开始刷这门课。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:learning/test.html</guid><category>网络编程</category></item></channel></rss>