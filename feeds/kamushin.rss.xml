<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kamushin's blog</title><link>/</link><description></description><atom:link href="/feeds/kamushin.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 27 Nov 2015 16:01:57 +0800</lastBuildDate><item><title>Some tricks when using cx_Oracle</title><link>/learning/python_oracle.html</link><description>&lt;p&gt;cx_Oracle is a Python module that enables access to Oracle databases.&lt;br /&gt;
However, users may have confusion due to some fetures of this module.&lt;/p&gt;
&lt;h4&gt;Thread safe&lt;/h4&gt;
&lt;p&gt;The default setting of cx_Oracle is not thread-safe.  &lt;br /&gt;
So if user have multiple threads, make sure that specifying &lt;code&gt;threaded=True&lt;/code&gt; when creating the connection.   &lt;/p&gt;
&lt;p&gt;&lt;code&gt;conn = cx_Oracle.connect(user + '/' + passwd + "@" + host + "/" + db, threaded=True)&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;Otherwise, the program will crash with error message like    &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ORA-24550: signal received: [si_signo=11] [si_errno=0] [si_code=2] [si_addr=0000000000000000]&lt;/code&gt;  &lt;/p&gt;
&lt;h4&gt;Fetch LOB column&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Internally, Oracle uses LOB locators which are allocated based on the cursor array size. Thus, it is important that the data in the LOB object be manipulated before another internal fetch takes place. The safest way to do this is to use the cursor as an iterator. In particular, do not use the fetchall() method. The exception “LOB variable no longer valid after subsequent fetch” will be raised if an attempt to access a LOB variable after a subsequent fetch is detected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use curosr as an iterator rather than use &lt;code&gt;fetchall()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;self._cursor.execute(sql, *args)
def fix_lob(row):
    def convert(col):
        if isinstance(col, cx_Oracle.LOB):
            return str(col)
        else:
            return col

    return [convert(c) for c in row]

return [fix_lob(r) for r in self._cursor]
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Fri, 27 Nov 2015 16:01:57 +0800</pubDate><guid>tag:,2015-11-27:learning/python_oracle.html</guid><category>Python</category></item><item><title>Use webpack together with browser-sync</title><link>/tool/webpack_and_browser-sync.html</link><description>&lt;p&gt;Here are some tips about using &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;Browsersync&lt;/code&gt; to improve working speed.&lt;/p&gt;
&lt;h3&gt;Browsersync&lt;/h3&gt;
&lt;p&gt;Browsersync makes your browser testing workflow faster by synchronising URLs, interactions and code changes across multiple devices. &lt;br /&gt;
&lt;code&gt;npm install browser-sync@2.7.1 -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Proxy&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;browser-sync start --proxy localhost:8888 --port 4000 --files index.html --files src/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Used to proxy ajax request to back-end server.&lt;/p&gt;
&lt;h3&gt;Webpack&lt;/h3&gt;
&lt;p&gt;With webpack, don't need &lt;code&gt;require.js&lt;/code&gt; and &lt;code&gt;require-react-plugin&lt;/code&gt; loading in &lt;code&gt;index.html&lt;/code&gt;. Very useful to me. &lt;br /&gt;
&lt;code&gt;npm install webpack -g&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Work together&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;npm install -g browser-sync-webpack-plugin&lt;/code&gt;
And config &lt;code&gt;webpack.config.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var BrowserSyncPlugin = require(&amp;#39;browser-sync-webpack-plugin&amp;#39;);
module.exports = {
entry: &amp;#39;./src/js/index.js&amp;#39;,
output: {
    publicPath: &amp;#39;./dist/&amp;#39;,
    path: &amp;#39;./dist/&amp;#39;,
    filename: &amp;#39;bundle.js&amp;#39;,
    pathinfo: true
},
resolve: {
    root: &amp;#39;.&amp;#39;
},
module: {
    loaders: [
    {test: /\.js/, loader: &amp;#39;jsx-loader?harmony&amp;#39;}
    ]
},
plugins: [
    new BrowserSyncPlugin({
    host: &amp;#39;localhost&amp;#39;,
    port: 4000,
    proxy: &amp;#39;localhost:8888&amp;#39;,
    files: &amp;#39;src/*&amp;#39;,
    files: &amp;#39;index.html&amp;#39;
})  
]
};
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Wed, 28 Oct 2015 16:56:48 +0800</pubDate><guid>tag:,2015-10-28:tool/webpack_and_browser-sync.html</guid><category>front-end</category></item><item><title>New fxg for me</title><link>/tool/fxg_new.html</link><description>&lt;p&gt;&lt;a href="http://kamushin.github.io/tool/fxg.html"&gt;previos article about fxg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fxg&lt;/code&gt; means &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;xargs&lt;/code&gt; then &lt;code&gt;grep&lt;/code&gt;. It has a insufferable performace, so &lt;br /&gt;
I use &lt;code&gt;ag&lt;/code&gt; to instead, after forking some tools made by &lt;a href="https://github.com/lilydjwg/search-and-view"&gt;lilydjwg&lt;/a&gt;
The tool chain is used for finding pattern in files and opening file by vim.
I rewrite a simple version of &lt;code&gt;vv&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;
&lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/fxg.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;file_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;
            &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_line&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Insert of writing regex pattern to match the complex colored output, I call ag the second time to gen a un-colored output to log file.
And I also add a &lt;code&gt;-G&lt;/code&gt; for file pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg () {
    ag -s -G $1 --column --nogroup --color $2 | nl &amp;amp;&amp;amp; ag -s -G $1 --column --nogroup $2 | nl &amp;gt; /tmp/fxg.log
}
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 26 Oct 2015 00:07:54 +0800</pubDate><guid>tag:,2015-10-26:tool/fxg_new.html</guid><category>Ag</category><category>Linux</category></item><item><title>MySQL 优化学习之路</title><link>/learning/mysql_opti.html</link><description>&lt;h3&gt;Overview&lt;/h3&gt;
&lt;h4&gt;DB Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;table structure: column data type | table with few or many columns&lt;/li&gt;
&lt;li&gt;right indexs&lt;/li&gt;
&lt;li&gt;storage engine&lt;/li&gt;
&lt;li&gt;data format: compression or not&lt;/li&gt;
&lt;li&gt;locking strategy&lt;/li&gt;
&lt;li&gt;caching size&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Hardware Level&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Disk seeks 10ms&lt;/li&gt;
&lt;li&gt;Disk reading and writing. easier to optimize than disk seeks&lt;/li&gt;
&lt;li&gt;CPU cycles large tables compared to the amount of memory ???&lt;/li&gt;
&lt;li&gt;Memory bandwith when CPU needs more data to fit in CPU cache ???&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SQL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;use explain&lt;/li&gt;
&lt;li&gt;indexs&lt;/li&gt;
&lt;li&gt;avoid full table scan&lt;/li&gt;
&lt;li&gt;analyze table periodically&lt;/li&gt;
&lt;li&gt;read-only transactions 5.6.4+ // had read an article on ATA about this&lt;/li&gt;
&lt;li&gt;avoid transforming query hard to read, optimizer will do this&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SELECT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cover index: In some cases, MySQL can read rows from the index without even consulting the data file. If all columns used from the index are numeric, only the index tree is used to resolve the query. // need numeric ? TODO&lt;/li&gt;
&lt;li&gt;range index&lt;ul&gt;
&lt;li&gt;MySQL does not support merging ranges， use union&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; To permit use of index dives for comparisons of up to N equality ranges, set &lt;code&gt;eq_range_index_dive_limit&lt;/code&gt; to N + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index extensions: add pk after each secondary index  5.6.9&lt;/li&gt;
&lt;li&gt;two kinds of filesort&lt;/li&gt;
&lt;li&gt;group by: loose index scan vs tight index scan, depends on distribution of column(cardinality).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;INSERT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use INSERT statements with multiple VALUES lists to insert several rows at a time will be faster than using separate single-row INSERT statements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bulk_insert_buffer_size&lt;/code&gt; for large INSERT&lt;/li&gt;
&lt;li&gt;insert values explicitly only when the value to be inserted differs from the default.&lt;/li&gt;
&lt;li&gt;Bulk insert speed up (https://dev.mysql.com/doc/refman/5.6/en/optimizing-innodb-bulk-data-loading.html)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;same with INSERT&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DELETE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;truncate&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Optimizing INFORMATION_SCHEMA Queries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Try to use constant lookup values for database and table names in the WHERE clause&lt;/li&gt;
&lt;li&gt;Write queries that minimize the number of table files that must be opened (???)&lt;/li&gt;
&lt;li&gt;Use EXPLAIN to determine whether the server can use INFORMATION_SCHEMA optimizations for a query&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Index&lt;/h3&gt;
&lt;p&gt;Index can improve the speed of determining rows which match where statements. But useless indexs are waste of space and time for db to determinie whcih index to use and need more time to create indexs when insert.&lt;/p&gt;
&lt;h4&gt;How MySQL use index&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the most seletive indexs&lt;/li&gt;
&lt;li&gt;leftmost prefix of the index&lt;/li&gt;
&lt;li&gt;join: &lt;ul&gt;
&lt;li&gt;use same data type will be faster // varchar and char are the same if their size equal.&lt;/li&gt;
&lt;li&gt;must use the same character set when compare string columns&lt;/li&gt;
&lt;li&gt;comparison of dissimilar column may prevent use of indexs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIN() MAX() of column &lt;code&gt;key_col&lt;/code&gt; will be O(1) if all &lt;code&gt;key_part_N&lt;/code&gt; before &lt;code&gt;key_col&lt;/code&gt; in where statement is constant.&lt;/li&gt;
&lt;li&gt;cover index // here not mention numeric&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Primary Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;use numeric pk&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Foreign Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;split low-frequently data into separate table&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Column Key&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;prefix index &lt;/li&gt;
&lt;li&gt;fulltext for char varchar and text&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Statistic&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;expr1 = expr2 is not true when expr1 or expr2 (or both) are NULL&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Sun, 25 Oct 2015 22:56:42 +0800</pubDate><guid>tag:,2015-10-25:learning/mysql_opti.html</guid><category>MySQL</category></item><item><title>Pip 无网络环境安装包</title><link>/tool/2015-10-20.html</link><description>&lt;p&gt;在内网部署 Python 的时候, 因为不能用连接到 &lt;code&gt;pip&lt;/code&gt; 源所以仅仅靠 requirement.txt 是不够的.&lt;br /&gt;
我们需要 wheel 这个工具帮我们把需要的依赖先打成本地包.&lt;br /&gt;
&lt;code&gt;pip wheel --wheel-dir=/tmp/wheelhouse tornado&lt;/code&gt;&lt;br /&gt;
这样 tornado 的依赖包就全在 wheelhouse 里了 &lt;br /&gt;
我们面对一个更悲剧的情况, 线上连 &lt;code&gt;pip&lt;/code&gt; 都没, 那么只能先在线下先给装好包.&lt;br /&gt;
&lt;code&gt;pip install --use-wheel --no-index --find-links=/tmp/wheelhouse -t  /tmp/wheelhouse/code tornado&lt;/code&gt;&lt;br /&gt;
这样包就全在 code 里了, 可以直接复制到线上. &lt;strong&gt;要注意编译环境一致和 so 库&lt;/strong&gt;   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Tue, 20 Oct 2015 22:28:48 +0800</pubDate><guid>tag:,2015-10-20:tool/2015-10-20.html</guid><category>Python</category></item><item><title>当我们在谈论异常时我们在谈论什么?</title><link>/learning/2015-10-19-2.html</link><description>&lt;h3&gt;异常是什么&lt;/h3&gt;
&lt;p&gt;异常是一种用来分离程序运行中那1%会走进的&lt;strong&gt;岔路&lt;/strong&gt;的分支控制手段.&lt;/p&gt;
&lt;h3&gt;语言是如何实现它的&lt;/h3&gt;
&lt;p&gt;曾经, 大概在我大三末大四初的时候, 有幸读了本 C 接口与实现, 书里用 &lt;code&gt;setjump &amp;amp; longjmp&lt;/code&gt; 和宏的方式向我展现了如何在 C 语言中实现它.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception is a beautiful goto. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然, sjlj 只是实现异常的一种, 还有基于 table 的方式等等, 更加高效, 在不进入异常时不产生副作用.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 23:40:31 +0800</pubDate><guid>tag:,2015-10-19:learning/2015-10-19-2.html</guid><category>exception</category></item><item><title>把Capslock重定向为Ctrl</title><link>/nix/Change_caplocks.html</link><description>&lt;p&gt;Capslock这键平时没多大用，而Ctrl则用的非常多，所以把Capslock换成Ctrl也算是个比较常见的需求。&lt;/p&gt;
&lt;p&gt;以前我是把xmodmap里swap脚本小改一下，也算在Arch上能用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Control_L = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最近换了deepin后，这脚本会让Capslock啥也不做。于是找了个更加合理的脚本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;remove Lock = Caps_Lock
remove Control = Control_L
keysym Caps_Lock = Control_L
add Lock = Caps_Lock
add Control = Control_L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比较一下， 就是少了一行对Control的设置，我猜之前出错的原因是Control_L不能被绑到两个keysym上&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 23:16:22 +0800</pubDate><guid>tag:,2015-10-19:nix/Change_caplocks.html</guid><category>Linux</category></item><item><title>Mac上遇到了一个Chrome和Safari被劫持的问题</title><link>/nix/Chrome_be_hijacked.html</link><description>&lt;p&gt;大概是因为下载了恶意的软件, 导致Chrome和Safari打开各种网站都出现广告. 检查过DNS
也更改过DNS, 无效. 目前没找到原因, 只能将就这用FireFox和Chromium, 这俩货没被劫持&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:nix/Chrome_be_hijacked.html</guid><category>杂事</category></item><item><title>Pelican上增加评论和自动删除文章的一些坑</title><link>/nix/Pelican.html</link><description>&lt;h3&gt;增加评论功能&lt;/h3&gt;
&lt;p&gt;这个网上有很多描述，主要是去disqus注册下，然后设置下配置文件&lt;a href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html"&gt;example&lt;/a&gt;坑主要在于Pelican的默认主题是没有disqus的模板的，所以虽然看到了对disqus的请求，却看不到评论区。需要自己下个比较全的主题。&lt;/p&gt;
&lt;h3&gt;自动删除文件&lt;/h3&gt;
&lt;p&gt;在content里删除了md文件，重新&lt;code&gt;make html&lt;/code&gt;后在output中依然会看到那个md文件生成的html文件。&lt;/p&gt;
&lt;p&gt;一个方法是加入配置&lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;来每次清空output，但是这带来了两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动日期没了 目前无法解决&lt;/li&gt;
&lt;li&gt;版本控制没了，可以通过加入&lt;code&gt;OUTPUT_RETENTION = [".hg", ".git", ".bzr"]&lt;/code&gt;来解决&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:nix/Pelican.html</guid><category>Pelican</category></item><item><title>用正则来解决grep时行过长的问题</title><link>/tool/fxg.html</link><description>&lt;p&gt;之前自己写了个函数用来查找文件中匹配关键字的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fxg_old(){
    find . -type f -name $1 | xargs grep $2 
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是今天在用的时候，发现如果匹配到的行过长的话，输出很难看，而且也不知道哪里匹配到了。&lt;/p&gt;
&lt;p&gt;所以就想能不能对行的长度做限制，但是grep里并没有这个参数选项。于是想到了用正则去控制匹配串。在so上找到了这样的代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; fxg(){
    find . -type f -name $1 | xargs grep -oE &amp;quot;.{0,20}$2.{0,20}&amp;quot;
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-o 只输出匹配的部分。 如果只加这个选项，那么就输出N行的$2。&lt;/p&gt;
&lt;p&gt;-E 使用扩展的正则(有人提到用-P，Perl正则，但是在我这里出现错误)&lt;/p&gt;
&lt;p&gt;后面的正则表达式用来匹配前后20个字符。&lt;/p&gt;
&lt;p&gt;这样就满足了我的需求&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:tool/fxg.html</guid><category>Linux</category></item><item><title>TCP自连接</title><link>/learning/tcp-self-connect.html</link><description>&lt;p&gt;陈硕的第8节视频介绍了TCP自连接这个特性。&lt;/p&gt;
&lt;p&gt;程序代码类似于:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;for i in range(65536):
    try:
        sock = socket.create_connection((&amp;#39;localhost&amp;#39;, port))
        time.sleep(60*60)
    except:
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里主要是这样的一个逻辑:  &lt;/p&gt;
&lt;p&gt;首先在循环中每次尝试创建连接的时候，TCP会分配一个IP给客户端，这个IP不是每次都随机的而是会自增。在最多尝试了65536或更少次后，一定会恰好和我们输入的port参数重合(如果port没有被占用)，那么就产生了一个客户端连接到自己的现象。要避免这个现象，可以在网络库中进行判断。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:learning/tcp-self-connect.html</guid><category>网络编程</category></item><item><title>开始学习陈硕的网络编程课程</title><link>/learning/test.html</link><description>&lt;p&gt;很久前就关注了陈硕的这门课，等着他结课后一次性看完，截止到现在他已经更新了40多节了，
就要结束了，所以开始刷这门课。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamushin</dc:creator><pubDate>Mon, 19 Oct 2015 21:37:24 +0800</pubDate><guid>tag:,2015-10-19:learning/test.html</guid><category>网络编程</category></item></channel></rss>